"use strict";(self.webpackChunkfluss_website=self.webpackChunkfluss_website||[]).push([[1965],{218:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"engine-flink/writes","title":"Flink Writes","description":"You can directly insert or update data into a Fluss table using the INSERT INTO statement.","source":"@site/versioned_docs/version-0.6/engine-flink/writes.md","sourceDirName":"engine-flink","slug":"/engine-flink/writes","permalink":"/docs/0.6/engine-flink/writes","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fluss/edit/main/website/docs/engine-flink/writes.md","tags":[],"version":"0.6","sidebarPosition":3,"frontMatter":{"sidebar_label":"Writes","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"DDL","permalink":"/docs/0.6/engine-flink/ddl"},"next":{"title":"Reads","permalink":"/docs/0.6/engine-flink/reads"}}');var s=t(4848),l=t(8453);const i={sidebar_label:"Writes",sidebar_position:3},r="Flink Writes",d={},o=[{value:"INSERT INTO",id:"insert-into",level:2},{value:"Appending Data to the Log Table",id:"appending-data-to-the-log-table",level:3},{value:"Create a Log table.",id:"create-a-log-table",level:4},{value:"Insert data into the Log table.",id:"insert-data-into-the-log-table",level:4},{value:"Perform Data Upserts to the PrimaryKey Table.",id:"perform-data-upserts-to-the-primarykey-table",level:3},{value:"Create a primary key table.",id:"create-a-primary-key-table",level:4},{value:"Updates All Columns",id:"updates-all-columns",level:4},{value:"Partial Updates",id:"partial-updates",level:4},{value:"DELETE FROM",id:"delete-from",level:2},{value:"UPDATE",id:"update",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"flink-writes",children:"Flink Writes"})}),"\n",(0,s.jsxs)(n.p,{children:["You can directly insert or update data into a Fluss table using the ",(0,s.jsx)(n.code,{children:"INSERT INTO"})," statement.\nFluss primary key tables can accept all types of messages (",(0,s.jsx)(n.code,{children:"INSERT"}),", ",(0,s.jsx)(n.code,{children:"UPDATE_BEFORE"}),", ",(0,s.jsx)(n.code,{children:"UPDATE_AFTER"}),", ",(0,s.jsx)(n.code,{children:"DELETE"}),"), while Fluss log table can only accept ",(0,s.jsx)(n.code,{children:"INSERT"})," type messages."]}),"\n",(0,s.jsx)(n.h2,{id:"insert-into",children:"INSERT INTO"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"INSERT INTO"})," statements are used to write data to Fluss tables.\nThey support both streaming and batch modes and are compatible with primary-key tables (for upserting data) as well as log tables (for appending data)."]}),"\n",(0,s.jsx)(n.h3,{id:"appending-data-to-the-log-table",children:"Appending Data to the Log Table"}),"\n",(0,s.jsx)(n.h4,{id:"create-a-log-table",children:"Create a Log table."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"CREATE TABLE log_table (\n  order_id BIGINT,\n  item_id BIGINT,\n  amount INT,\n  address STRING\n);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"insert-data-into-the-log-table",children:"Insert data into the Log table."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"CREATE TEMPORARY TABLE source (\n  order_id BIGINT,\n  item_id BIGINT,\n  amount INT,\n  address STRING\n) WITH ('connector' = 'datagen');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"INSERT INTO log_table\nSELECT * FROM source;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"perform-data-upserts-to-the-primarykey-table",children:"Perform Data Upserts to the PrimaryKey Table."}),"\n",(0,s.jsx)(n.h4,{id:"create-a-primary-key-table",children:"Create a primary key table."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"CREATE TABLE pk_table (\n  shop_id BIGINT,\n  user_id BIGINT,\n  num_orders INT,\n  total_amount INT,\n  PRIMARY KEY (shop_id, user_id) NOT ENFORCED\n);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"updates-all-columns",children:"Updates All Columns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"CREATE TEMPORARY TABLE source (\n  shop_id BIGINT,\n  user_id BIGINT,\n  num_orders INT,\n  total_amount INT\n) WITH ('connector' = 'datagen');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"INSERT INTO pk_table\nSELECT * FROM source;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"partial-updates",children:"Partial Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"CREATE TEMPORARY TABLE source (\n  shop_id BIGINT,\n  user_id BIGINT,\n  num_orders INT,\n  total_amount INT\n) WITH ('connector' = 'datagen');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"-- only partial-update the num_orders column\nINSERT INTO pk_table (shop_id, user_id, num_orders)\nSELECT shop_id, user_id, num_orders FROM source;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"delete-from",children:"DELETE FROM"}),"\n",(0,s.jsxs)(n.p,{children:["Fluss supports deleting data for primary-key tables in batch mode via ",(0,s.jsx)(n.code,{children:"DELETE FROM"})," statement. Currently, only single data deletions based on the primary key are supported."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"the primary key table"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"-- DELETE statement requires batch mode\nSET 'execution.runtime-mode' = 'batch';\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"-- The condition must include all primary key equality conditions.\nDELETE FROM pk_table WHERE shop_id = 10000 and user_id = 123456;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"update",children:"UPDATE"}),"\n",(0,s.jsxs)(n.p,{children:["Fluss enables data updates for primary-key tables in batch mode using the ",(0,s.jsx)(n.code,{children:"UPDATE"})," statement. Currently, only single-row updates based on the primary key are supported."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"-- Execute the flink job in batch mode for current session context\nSET execution.runtime-mode = batch;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"-- The condition must include all primary key equality conditions.\nUPDATE pk_table SET total_amount = 2 WHERE shop_id = 10000 and user_id = 123456;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var a=t(6540);const s={},l=a.createContext(s);function i(e){const n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);