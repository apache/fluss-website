"use strict";(self.webpackChunkfluss_website=self.webpackChunkfluss_website||[]).push([[3593],{6598:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"install-deploy/deploying-distributed-cluster","title":"Deploying Distributed Cluster","description":"\x3c!--","source":"@site/versioned_docs/version-0.7/install-deploy/deploying-distributed-cluster.md","sourceDirName":"install-deploy","slug":"/install-deploy/deploying-distributed-cluster","permalink":"/docs/install-deploy/deploying-distributed-cluster","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fluss/edit/main/website/docs/install-deploy/deploying-distributed-cluster.md","tags":[],"version":"0.7","sidebarPosition":3,"frontMatter":{"title":"Deploying Distributed Cluster","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Deploying Local Cluster","permalink":"/docs/install-deploy/deploying-local-cluster"},"next":{"title":"Deploying with Docker","permalink":"/docs/install-deploy/deploying-with-docker"}}');var t=s(4848),i=s(8453);const l={title:"Deploying Distributed Cluster",sidebar_position:3},o="Deploying Distributed Cluster",d={},a=[{value:"Requirements",id:"requirements",level:2},{value:"Hardware Requirements",id:"hardware-requirements",level:3},{value:"Software Requirements",id:"software-requirements",level:3},{value:"<code>JAVA_HOME</code> Configuration",id:"java_home-configuration",level:3},{value:"Fluss Setup",id:"fluss-setup",level:2},{value:"Preparation",id:"preparation",level:3},{value:"Configuring Fluss",id:"configuring-fluss",level:3},{value:"Starting Fluss",id:"starting-fluss",level:3},{value:"Interacting with Fluss",id:"interacting-with-fluss",level:2},{value:"Flink SQL Client",id:"flink-sql-client",level:3},{value:"Preparation",id:"preparation-1",level:4},{value:"Add catalog",id:"add-catalog",level:4},{value:"Do more with Fluss",id:"do-more-with-fluss",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"deploying-distributed-cluster",children:"Deploying Distributed Cluster"})}),"\n",(0,t.jsxs)(n.p,{children:["This page provides instructions on how to deploy a ",(0,t.jsx)(n.em,{children:"distributed cluster"})," for Fluss on bare machines."]}),"\n",(0,t.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsx)(n.h3,{id:"hardware-requirements",children:"Hardware Requirements"}),"\n",(0,t.jsxs)(n.p,{children:["Fluss runs on all ",(0,t.jsx)(n.em,{children:"UNIX-like environments"}),", e.g. ",(0,t.jsx)(n.strong,{children:"Linux"}),", ",(0,t.jsx)(n.strong,{children:"Mac OS X"}),".\nTo build a distributed cluster, you need to have at least two nodes.\nThis doc provides a simple example of how to deploy a distributed cluster on four nodes."]}),"\n",(0,t.jsx)(n.h3,{id:"software-requirements",children:"Software Requirements"}),"\n",(0,t.jsxs)(n.p,{children:["Before you start to set up the system, make sure you have installed ",(0,t.jsx)(n.strong,{children:"Java 17"})," or higher ",(0,t.jsx)(n.strong,{children:"on each node"})," in your cluster.\nJava 8 and Java 11 are not recommended."]}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, you need a running ",(0,t.jsx)(n.strong,{children:"ZooKeeper"})," cluster with version 3.6.0 or higher.\nWe do not recommend to use ZooKeeper versions below 3.6.0.\nFor further information how to deploy a distributed ZooKeeper cluster, see ",(0,t.jsx)(n.a,{href:"https://zookeeper.apache.org/doc/r3.6.0/zookeeperStarted.html#sc_RunningReplicatedZooKeeper",children:"Running Replicated ZooKeeper"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"If your cluster does not fulfill these software requirements, you will need to install/upgrade them."}),"\n",(0,t.jsxs)(n.h3,{id:"java_home-configuration",children:[(0,t.jsx)(n.code,{children:"JAVA_HOME"})," Configuration"]}),"\n",(0,t.jsxs)(n.p,{children:["Fluss requires the ",(0,t.jsx)(n.code,{children:"JAVA_HOME"})," environment variable to be set on all nodes and point to the directory of your Java installation."]}),"\n",(0,t.jsx)(n.h2,{id:"fluss-setup",children:"Fluss Setup"}),"\n",(0,t.jsxs)(n.p,{children:["This part will describe how to set up a Fluss cluster consisting of one CoordinatorServer and multiple TabletServers\nacross four machines. Suppose you have four nodes in a ",(0,t.jsx)(n.code,{children:"192.168.10/24"})," subnet with the following IP address assignment:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Node0: ",(0,t.jsx)(n.code,{children:"192.168.10.100"})]}),"\n",(0,t.jsxs)(n.li,{children:["Node1: ",(0,t.jsx)(n.code,{children:"192.168.10.101"})]}),"\n",(0,t.jsxs)(n.li,{children:["Node2: ",(0,t.jsx)(n.code,{children:"192.168.10.102"})]}),"\n",(0,t.jsxs)(n.li,{children:["Node3: ",(0,t.jsx)(n.code,{children:"192.168.10.103"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Node0 will deploy a CoordinatorServer instance. Node1, Node2 and Node3 will deploy one TabletServer instance, respectively."}),"\n",(0,t.jsx)(n.h3,{id:"preparation",children:"Preparation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Make sure ZooKeeper has been deployed. We assume that ZooKeeper listens on ",(0,t.jsx)(n.code,{children:"192.168.10.199:2181"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Download Fluss"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Go to the ",(0,t.jsx)(n.a,{href:"/downloads",children:"downloads page"})," and download the latest Fluss release. After downloading the latest release, copy the archive to all the nodes and extract it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"tar -xzf fluss-0.7.0-bin.tgz\ncd fluss-0.7.0/\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuring-fluss",children:"Configuring Fluss"}),"\n",(0,t.jsxs)(n.p,{children:["After having extracted the archived files, you need to configure Fluss for a distributed deployment.\nWe will use the ",(0,t.jsx)(n.em,{children:"default config file"})," (",(0,t.jsx)(n.code,{children:"conf/server.yaml"}),") to configure Fluss.\nAdapt the ",(0,t.jsx)(n.code,{children:"server.yaml"})," on each node as follows."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Node0"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="server.yaml"',children:"# coordinator server\nbind.listeners: FLUSS://192.168.10.100:9123\n\nzookeeper.address: 192.168.10.199:2181\nzookeeper.path.root: /fluss\n\nremote.data.dir: /tmp/fluss-remote-data\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Node1"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="server.yaml"',children:"# tablet server\nbind.listeners: FLUSS://192.168.10.101:9123 # alternatively, setting the port to 0 assigns a random port\ntablet-server.id: 1\n\nzookeeper.address: 192.168.10.199:2181\nzookeeper.path.root: /fluss\n\nremote.data.dir: /tmp/fluss-remote-data\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Node2"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="server.yaml"',children:"# tablet server\nbind.listeners: FLUSS://192.168.10.102:9123 # alternatively, setting the port to 0 assigns a random port\ntablet-server.id: 2\n\nzookeeper.address: 192.168.10.199:2181\nzookeeper.path.root: /fluss\n\nremote.data.dir: /tmp/fluss-remote-data\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Node3"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="server.yaml"',children:"# tablet server\nbind.listeners: FLUSS://192.168.10.103:9123 # alternatively, setting the port to 0 assigns a random port\ntablet-server.id: 3\n\nzookeeper.address: 192.168.10.199:2181\nzookeeper.path.root: /fluss\n\nremote.data.dir: /tmp/fluss-remote-data\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tablet-server.id"})," is the unique id of the TabletServer. If you have multiple TabletServers, you should set a different id for each TabletServer."]}),"\n",(0,t.jsxs)(n.li,{children:["In this example, we only set the mandatory properties. For additional properties, you can refer to ",(0,t.jsx)(n.a,{href:"/docs/maintenance/configuration",children:"Configuration"})," for more details."]}),"\n"]})}),"\n",(0,t.jsx)(n.h3,{id:"starting-fluss",children:"Starting Fluss"}),"\n",(0,t.jsxs)(n.p,{children:["To deploy a distributed Fluss cluster, you should first start a CoordinatorServer instance on ",(0,t.jsx)(n.strong,{children:"Node0"}),".\nThen, start a TabletServer instance on ",(0,t.jsx)(n.strong,{children:"Node1"}),", ",(0,t.jsx)(n.strong,{children:"Node2"}),", and ",(0,t.jsx)(n.strong,{children:"Node3"}),", respectively."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"CoordinatorServer"})}),"\n",(0,t.jsxs)(n.p,{children:["On ",(0,t.jsx)(n.strong,{children:"Node0"}),", start a CoordinatorServer as follows."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"./bin/coordinator-server.sh start\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"TabletServer"})}),"\n",(0,t.jsxs)(n.p,{children:["On ",(0,t.jsx)(n.strong,{children:"Node1"}),", ",(0,t.jsx)(n.strong,{children:"Node2"})," and ",(0,t.jsx)(n.strong,{children:"Node3"}),", start a TabletServer as follows."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"./bin/tablet-server.sh start\n"})}),"\n",(0,t.jsx)(n.p,{children:"After that, you have successfully deployed a distributed Fluss cluster."}),"\n",(0,t.jsx)(n.h2,{id:"interacting-with-fluss",children:"Interacting with Fluss"}),"\n",(0,t.jsxs)(n.p,{children:["After the Fluss cluster is started, you can use ",(0,t.jsx)(n.strong,{children:"Fluss Client"})," (e.g., Flink SQL Client) to interact with Fluss.\nThe following subsections will show you how to use Flink SQL Client to interact with Fluss."]}),"\n",(0,t.jsx)(n.h3,{id:"flink-sql-client",children:"Flink SQL Client"}),"\n",(0,t.jsx)(n.p,{children:"Using Flink SQL Client to interact with Fluss."}),"\n",(0,t.jsx)(n.h4,{id:"preparation-1",children:"Preparation"}),"\n",(0,t.jsxs)(n.p,{children:["You can start a Flink standalone cluster refer to ",(0,t.jsx)(n.a,{href:"/docs/engine-flink/getting-started#preparation-when-using-flink-sql-client",children:"Flink Environment Preparation"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"}),": Make sure the ",(0,t.jsx)(n.a,{href:"/downloads/",children:"Fluss connector jar"})," already has copied to the ",(0,t.jsx)(n.code,{children:"lib"})," directory of your Flink home."]}),"\n",(0,t.jsx)(n.h4,{id:"add-catalog",children:"Add catalog"}),"\n",(0,t.jsx)(n.p,{children:"In Flink SQL client, a catalog is created and named by executing the following query:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"CREATE CATALOG fluss_catalog WITH (\n  'type' = 'fluss',\n  'bootstrap.servers' = '192.168.10.100:9123'\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"do-more-with-fluss",children:"Do more with Fluss"}),"\n",(0,t.jsxs)(n.p,{children:["After the catalog is created, you can use Flink SQL Client to do more with Fluss, for example, create a table, insert data, query data, etc.\nMore details please refer to ",(0,t.jsx)(n.a,{href:"/docs/engine-flink/getting-started",children:"Flink Getting Started"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);