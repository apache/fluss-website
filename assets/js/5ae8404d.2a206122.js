"use strict";(self.webpackChunkfluss_website=self.webpackChunkfluss_website||[]).push([[5902],{5120:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"apis/java-client","title":"Java Client","description":"\x3c!--","source":"@site/versioned_docs/version-0.7/apis/java-client.md","sourceDirName":"apis","slug":"/apis/java-client","permalink":"/docs/apis/java-client","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fluss/edit/main/website/docs/apis/java-client.md","tags":[],"version":"0.7","sidebarPosition":1,"frontMatter":{"title":"Java Client","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Authorization and ACLs","permalink":"/docs/security/authorization"}}');var s=t(4848),i=t(8453);const r={title:"Java Client",sidebar_position:1},o="Fluss Java Client",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Dependency",id:"dependency",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Working Operations",id:"working-operations",level:2},{value:"Blocking Operations",id:"blocking-operations",level:3},{value:"Asynchronous Operations",id:"asynchronous-operations",level:3},{value:"Creating Databases and Tables",id:"creating-databases-and-tables",level:2},{value:"Creating a Database",id:"creating-a-database",level:3},{value:"Creating a Table",id:"creating-a-table",level:3},{value:"Table API",id:"table-api",level:2},{value:"Writers",id:"writers",level:3},{value:"Scanner",id:"scanner",level:3},{value:"Lookup",id:"lookup",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"fluss-java-client",children:"Fluss Java Client"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["Fluss ",(0,s.jsx)(n.code,{children:"Admin"})," API that supports asynchronous operations for managing and inspecting Fluss resources. It communicates with the Fluss cluster and provides methods for:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Managing databases (create, drop, list)"}),"\n",(0,s.jsx)(n.li,{children:"Managing tables (create, drop, list)"}),"\n",(0,s.jsx)(n.li,{children:"Managing partitions (create, drop, list)"}),"\n",(0,s.jsx)(n.li,{children:"Retrieving metadata (schemas, snapshots, server information)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Fluss ",(0,s.jsx)(n.code,{children:"Table"})," API allows you to interact with Fluss tables for reading and writing data."]}),"\n",(0,s.jsx)(n.h2,{id:"dependency",children:"Dependency"}),"\n",(0,s.jsxs)(n.p,{children:["In order to use the client, you need to add the following dependency to your ",(0,s.jsx)(n.code,{children:"pom.xml"})," file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"\x3c!-- https://mvnrepository.com/artifact/com.alibaba.fluss/fluss-client --\x3e\n<dependency>\n    <groupId>com.alibaba.fluss</groupId>\n    <artifactId>fluss-client</artifactId>\n    <version>0.7.0</version>\n</dependency>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Connection"})," is the main entry point for the Fluss Java client. It is used to create ",(0,s.jsx)(n.code,{children:"Admin"})," and ",(0,s.jsx)(n.code,{children:"Table"})," instances.\nThe ",(0,s.jsx)(n.code,{children:"Connection"})," object is created using the ",(0,s.jsx)(n.code,{children:"ConnectionFactory"})," class, which takes a ",(0,s.jsx)(n.code,{children:"Configuration"})," object as an argument.\nThe ",(0,s.jsx)(n.code,{children:"Configuration"})," object contains the necessary configuration parameters for connecting to the Fluss cluster, such as the bootstrap servers."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Connection"})," object is thread-safe and can be shared across multiple threads. It is recommended to create a\nsingle ",(0,s.jsx)(n.code,{children:"Connection"})," instance per application and use it to create multiple ",(0,s.jsx)(n.code,{children:"Admin"})," and ",(0,s.jsx)(n.code,{children:"Table"})," instances.\n",(0,s.jsx)(n.code,{children:"Table"})," and ",(0,s.jsx)(n.code,{children:"Admin"})," instances, on the other hand, are not thread-safe and should be created for each thread that needs to access them.\nCaching or pooling of ",(0,s.jsx)(n.code,{children:"Table"})," and ",(0,s.jsx)(n.code,{children:"Admin"})," is not recommended."]}),"\n",(0,s.jsxs)(n.p,{children:["Create a new ",(0,s.jsx)(n.code,{children:"Admin"})," instance :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// creating Connection object to connect with Fluss cluster\nConfiguration conf = new Configuration(); \nconf.setString("bootstrap.servers", "localhost:9123");\nConnection connection = ConnectionFactory.createConnection(conf);\n\n\n// obtain Admin instance from the Connection\nAdmin admin = connection.getAdmin();\nadmin.listDatabases().get().forEach(System.out::println);\n\n// obtain Table instance from the Connection\nTable table = connection.getTable(TablePath.of("my_db", "my_table"));\nSystem.out.println(table.getTableInfo());\n'})}),"\n",(0,s.jsx)(n.p,{children:"if you are using SASL authentication, you need to set the following properties:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// creating Connection object to connect with Fluss cluster\nConfiguration conf = new Configuration(); \nconf.setString("bootstrap.servers", "localhost:9123");\nconf.setString("client.security.protocol", "sasl");\nconf.setString("client.security.sasl.mechanism", "PLAIN");\nconf.setString("client.security.sasl.username", "alice");\nconf.setString("client.security.sasl.password", "alice-secret");\nConnection connection = ConnectionFactory.createConnection(conf);\n\n\n// obtain Admin instance from the Connection\nAdmin admin = connection.getAdmin();\nadmin.listDatabases().get().forEach(System.out::println);\n\n// obtain Table instance from the Connection\nTable table = connection.getTable(TablePath.of("my_db", "my_table"));\nSystem.out.println(table.getTableInfo());\n'})}),"\n",(0,s.jsx)(n.h2,{id:"working-operations",children:"Working Operations"}),"\n",(0,s.jsxs)(n.p,{children:["All methods in ",(0,s.jsx)(n.code,{children:"FlussAdmin"})," return ",(0,s.jsx)(n.code,{children:"CompletableFuture"})," objects. You can handle these in two ways:"]}),"\n",(0,s.jsx)(n.h3,{id:"blocking-operations",children:"Blocking Operations"}),"\n",(0,s.jsxs)(n.p,{children:["For synchronous behavior, use the ",(0,s.jsx)(n.code,{children:"get()"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Blocking call\nList<String> databases = admin.listDatabases().get();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"asynchronous-operations",children:"Asynchronous Operations"}),"\n",(0,s.jsxs)(n.p,{children:["For non-blocking behavior, use the ",(0,s.jsx)(n.code,{children:"thenAccept"}),", ",(0,s.jsx)(n.code,{children:"thenApply"}),", or other methods:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'admin.listDatabases()\n    .thenAccept(databases -> {\n        System.out.println("Available databases:");\n        databases.forEach(System.out::println);\n    })\n    .exceptionally(ex -> {\n        System.err.println("Failed to list databases: " + ex.getMessage());\n        return null;\n    });\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creating-databases-and-tables",children:"Creating Databases and Tables"}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-database",children:"Creating a Database"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'\n// Create database descriptor\nDatabaseDescriptor descriptor = DatabaseDescriptor.builder()\n    .comment("This is a test database")\n    .customProperty("owner", "data-team")\n    .build();\n\n// Create database (true means ignore if exists)\nadmin.createDatabase("my_db", descriptor, true) // non-blocking call\n    .thenAccept(unused -> System.out.println("Database created successfully"))\n    .exceptionally(ex -> {\n        System.err.println("Failed to create database: " + ex.getMessage());\n        return null;\n    });\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-table",children:"Creating a Table"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Schema schema = Schema.newBuilder()\n        .column("id", DataTypes.STRING())\n        .column("age", DataTypes.INT())\n        .column("created_at", DataTypes.TIMESTAMP())\n        .column("is_active", DataTypes.BOOLEAN())\n        .primaryKey("id")\n        .build();\n\n// Use the schema in a table descriptor\nTableDescriptor tableDescriptor = TableDescriptor.builder()\n        .schema(schema)\n        .distributedBy(1, "id")  // Distribute by the id column with 1 buckets\n//        .partitionedBy("")     // Partition by the partition key\n        .build();\n\nTablePath tablePath = TablePath.of("my_db", "user_table");\nadmin.createTable(tablePath, tableDescriptor, false).get(); // blocking call\n\nTableInfo tableInfo = admin.getTableInfo(tablePath).get(); // blocking call\nSystem.out.println(tableInfo);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"table-api",children:"Table API"}),"\n",(0,s.jsx)(n.h3,{id:"writers",children:"Writers"}),"\n",(0,s.jsx)(n.p,{children:"In order to write data to Fluss tables, first you need to create a Table instance."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'TablePath tablePath = TablePath.of("my_db", "user_table");\nTable table = connection.getTable(tablePath);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In Fluss we have both Primary Key Tables and Log Tables, so the client provides different functionality depending on the table type.\nYou can use an ",(0,s.jsx)(n.code,{children:"UpsertWriter"})," to write data to a Primary Key table, and an ",(0,s.jsx)(n.code,{children:"AppendWriter"})," to write data to a Log Table."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"table.newUpsert().createWriter();\ntable.newAppend().createWriter();\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's take a look at how to write data to a Primary Key table."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<User> users = List.of(\n        new User("1", 20, LocalDateTime.now() , true),\n        new User("2", 22, LocalDateTime.now() , true),\n        new User("3", 23, LocalDateTime.now() , true),\n        new User("4", 24, LocalDateTime.now() , true),\n        new User("5", 25, LocalDateTime.now() , true)\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," Currently data in Fluss is written in the form of ",(0,s.jsx)(n.code,{children:"rows"}),", so we need to convert our POJO to ",(0,s.jsx)(n.code,{children:"GenericRow"}),", while the Fluss community is working to provide\na more user-friendly API for writing data."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Table table = connection.getTable(tablePath);\n\nList<GenericRow> rows = users.stream().map(user -> {\n    GenericRow row = new GenericRow(4);\n    row.setField(0, BinaryString.fromString(user.getId()));\n    row.setField(1, user.getAge());\n    row.setField(2, TimestampNtz.fromLocalDateTime(user.getCreatedAt()));\n    row.setField(3, user.isActive());\n    return row;\n}).collect(Collectors.toList());\n        \nSystem.out.println("Upserting rows to the table");\nUpsertWriter writer = table.newUpsert().createWriter();\n\n// upsert() is a non-blocking call that sends data to Fluss server with batching and timeout\nrows.forEach(writer::upsert);\n\n// call flush() to blocking the thread until all data is written successfully\nwriter.flush();\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For a Log table you can use the ",(0,s.jsx)(n.code,{children:"AppendWriter"})," API to write data."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"table.newAppend().createWriter().append(row);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"scanner",children:"Scanner"}),"\n",(0,s.jsx)(n.p,{children:"In order to read data from Fluss tables, first you need to create a Scanner instance. Then users can subscribe to the table buckets and\nstart polling for records."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'LogScanner logScanner = table.newScan()\n        .createLogScanner();\n\nint numBuckets = table.getTableInfo().getNumBuckets();\nSystem.out.println("Number of buckets: " + numBuckets);\nfor (int i = 0; i < numBuckets; i++) {     \n    System.out.println("Subscribing to bucket " + i);\n    logScanner.subscribeFromBeginning(i);\n}\n\nlong scanned = 0;\nMap<Integer, List<String>> rowsMap = new HashMap<>();\n\nwhile (true) {     \n    System.out.println("Polling for records...");\n    ScanRecords scanRecords = logScanner.poll(Duration.ofSeconds(1));\n    for (TableBucket bucket : scanRecords.buckets()) {\n        for (ScanRecord record : scanRecords.records(bucket)) {\n            InternalRow row = record.getRow();\n            // Process the row\n            ...\n        }\n    }\n    scanned += scanRecords.count();\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"lookup",children:"Lookup"}),"\n",(0,s.jsx)(n.p,{children:"You can also use the Fluss API to perform lookups on a table. This is useful for querying specific records based on their primary key."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"LookupResult lookup = table.newLookup().createLookuper().lookup(rowKey).get();\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);