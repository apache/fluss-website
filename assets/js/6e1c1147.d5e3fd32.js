"use strict";(self.webpackChunkfluss_website=self.webpackChunkfluss_website||[]).push([[4405],{2313:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"concepts/architecture","title":"Architecture","description":"A Fluss cluster consists of two main processes: the CoordinatorServer and the TabletServer.","source":"@site/versioned_docs/version-0.5/concepts/architecture.md","sourceDirName":"concepts","slug":"/concepts/architecture","permalink":"/docs/0.5/concepts/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fluss/edit/main/website/docs/concepts/architecture.md","tags":[],"version":"0.5","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Flink","permalink":"/docs/0.5/quickstart/flink"},"next":{"title":"Overview","permalink":"/docs/0.5/install-deploy/overview"}}');var s=r(4848),o=r(8453);const i={sidebar_position:1},a="Architecture",l={},d=[{value:"CoordinatorServer",id:"coordinatorserver",level:2},{value:"TabletServer",id:"tabletserver",level:2},{value:"LogStore",id:"logstore",level:3},{value:"KvStore",id:"kvstore",level:3},{value:"Tablet / Bucket",id:"tablet--bucket",level:3},{value:"Zookeeper",id:"zookeeper",level:2},{value:"Remote Storage",id:"remote-storage",level:2},{value:"Client",id:"client",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,s.jsxs)(t.p,{children:["A Fluss cluster consists of two main processes: the ",(0,s.jsx)(t.strong,{children:"CoordinatorServer"})," and the ",(0,s.jsx)(t.strong,{children:"TabletServer"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Fluss Architecture",src:r(8464).A+"",width:"6714",height:"4904"})}),"\n",(0,s.jsx)(t.h2,{id:"coordinatorserver",children:"CoordinatorServer"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"CoordinatorServer"})," serves as the central control and management component of the cluster. It is responsible for maintaining metadata, managing tablet allocation, listing nodes, and handling permissions."]}),"\n",(0,s.jsx)(t.p,{children:"Additionally, it coordinates critical operations such as:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Rebalancing data during node scaling (upscaling or downscaling)."}),"\n",(0,s.jsx)(t.li,{children:"Managing data migration and service node switching in the event of node failures."}),"\n",(0,s.jsx)(t.li,{children:"Overseeing table management tasks, including creating or deleting tables and updating bucket counts."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["As the ",(0,s.jsx)(t.strong,{children:"brain"})," of the cluster, the ",(0,s.jsx)(t.strong,{children:"Coordinator Server"})," ensures efficient cluster operation and seamless management of resources."]}),"\n",(0,s.jsx)(t.h2,{id:"tabletserver",children:"TabletServer"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"TabletServer"})," is responsible for data storage, persistence, and providing I/O services directly to users. It comprises two key components: ",(0,s.jsx)(t.strong,{children:"LogStore"})," and ",(0,s.jsx)(t.strong,{children:"KvStore"}),"."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["For ",(0,s.jsx)(t.strong,{children:"PrimaryKey Tables"})," which support updates, both ",(0,s.jsx)(t.strong,{children:"LogStore"})," and ",(0,s.jsx)(t.strong,{children:"KvStore"})," are activated. The KvStore is used to support updates and point lookup efficiently. LogStore is used to store the changelogs of the table."]}),"\n",(0,s.jsxs)(t.li,{children:["For ",(0,s.jsx)(t.strong,{children:"Log Tables"})," which only supports appends, only the ",(0,s.jsx)(t.strong,{children:"LogStore"})," is activated, optimizing performance for write-heavy workloads."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["This architecture ensures the ",(0,s.jsx)(t.strong,{children:"TabletServer"})," delivers tailored data handling capabilities based on table types."]}),"\n",(0,s.jsx)(t.h3,{id:"logstore",children:"LogStore"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"LogStore"})," is designed to store log data, functioning similarly to a database binlog.\nMessages can only be appended, not modified, ensuring data integrity.\nIts primary purpose is to enable low-latency streaming reads and to serve as the write-ahead log (WAL) for restoring the ",(0,s.jsx)(t.strong,{children:"KvStore"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"kvstore",children:"KvStore"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"KvStore"})," is used to store table data, functioning similarly to database tables. It supports data updates and deletions, enabling efficient querying and table management. Additionally, it generates comprehensive changelogs to track data modifications."]}),"\n",(0,s.jsx)(t.h3,{id:"tablet--bucket",children:"Tablet / Bucket"}),"\n",(0,s.jsx)(t.p,{children:"Table data is divided into multiple buckets based on the defined bucketing policy."}),"\n",(0,s.jsxs)(t.p,{children:["Data for the ",(0,s.jsx)(t.strong,{children:"LogStore"})," and ",(0,s.jsx)(t.strong,{children:"KvStore"})," is stored within tablets. Each tablet consists of a ",(0,s.jsx)(t.strong,{children:"LogTablet"})," and, optionally, a ",(0,s.jsx)(t.strong,{children:"KvTablet"}),", depending on whether the table supports updates.\nBoth ",(0,s.jsx)(t.strong,{children:"LogStore"})," and ",(0,s.jsx)(t.strong,{children:"KvStore"})," adhere to the same bucket-splitting and tablet allocation policies. As a result, ",(0,s.jsx)(t.strong,{children:"LogTablets"})," and ",(0,s.jsx)(t.strong,{children:"KvTablets"})," with the same ",(0,s.jsx)(t.code,{children:"tablet_id"})," are always allocated to the same ",(0,s.jsx)(t.strong,{children:"TabletServer"})," for efficient data management."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"LogTablet"})," supports multiple replicas based on the table's configured replication factor, ensuring high availability and fault tolerance. ",(0,s.jsx)(t.strong,{children:"Currently, replication is not supported for KvTablets"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"zookeeper",children:"Zookeeper"}),"\n",(0,s.jsxs)(t.p,{children:["Fluss currently utilizes ",(0,s.jsx)(t.strong,{children:"ZooKeeper"})," for cluster coordination, metadata storage, and cluster configuration management.\nIn upcoming releases, ",(0,s.jsx)(t.strong,{children:"ZooKeeper will be replaced"})," by ",(0,s.jsx)(t.strong,{children:"KvStore"})," for metadata storage and ",(0,s.jsx)(t.strong,{children:"Raft"})," for cluster coordination and ensuring consistency. This transition aims to streamline operations and enhance system reliability. See the ",(0,s.jsx)(t.a,{href:"/roadmap",children:"Roadmap"})," for more details."]}),"\n",(0,s.jsx)(t.h2,{id:"remote-storage",children:"Remote Storage"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Remote Storage"})," serves two primary purposes:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Hierarchical Storage for LogStores:"})," By offloading LogStore data, it reduces storage costs and accelerates scaling operations."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Persistent Storage for KvStores:"})," It ensures durable storage for KvStore data and collaborates with LogStore to enable fault recovery."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Additionally, ",(0,s.jsx)(t.strong,{children:"Remote Storage"})," allows clients to perform bulk read operations on Log and Kv data, enhancing data analysis efficiency and reduce the overhead on Fluss servers. In the future, it will also support bulk write operations, optimizing data import workflows for greater scalability and performance."]}),"\n",(0,s.jsx)(t.h2,{id:"client",children:"Client"}),"\n",(0,s.jsx)(t.p,{children:"Fluss clients/sdks support streaming reads/writes, batch read/writes, DDL and point queries. Currently, the main implementation of client is Flink Connector. Users can use Flink SQL to easily operate Fluss tables and data."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var n=r(6540);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}},8464:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/architecture-b318beb94d717f94d6fe64b6303e79ab.png"}}]);