"use strict";(self.webpackChunkfluss_website=self.webpackChunkfluss_website||[]).push([[9922],{1925:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"engine-flink/reads","title":"Flink Reads","description":"Fluss supports streaming and batch read with Apache Flink\'s SQL & Table API. Execute the following SQL command to switch execution mode from streaming to batch, and vice versa:","source":"@site/versioned_docs/version-0.5/engine-flink/reads.md","sourceDirName":"engine-flink","slug":"/engine-flink/reads","permalink":"/docs/0.5/engine-flink/reads","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fluss/edit/main/website/docs/engine-flink/reads.md","tags":[],"version":"0.5","sidebarPosition":4,"frontMatter":{"sidebar_label":"Reads","sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Writes","permalink":"/docs/0.5/engine-flink/writes"},"next":{"title":"Lookups","permalink":"/docs/0.5/engine-flink/lookups"}}');var a=t(4848),i=t(8453);const l={sidebar_label:"Reads",sidebar_position:4},r="Flink Reads",o={},c=[{value:"Streaming Read",id:"streaming-read",level:2},{value:"Batch Read",id:"batch-read",level:2},{value:"Limit Read",id:"limit-read",level:3},{value:"Example",id:"example",level:4},{value:"Point Query",id:"point-query",level:3},{value:"Example",id:"example-1",level:4},{value:"Aggregations",id:"aggregations",level:3},{value:"Read Options",id:"read-options",level:2},{value:"scan.startup.mode",id:"scanstartupmode",level:3},{value:"scan.partition.discovery.interval",id:"scanpartitiondiscoveryinterval",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"flink-reads",children:"Flink Reads"})}),"\n",(0,a.jsxs)(n.p,{children:["Fluss supports streaming and batch read with ",(0,a.jsx)(n.a,{href:"https://flink.apache.org/",children:"Apache Flink"}),"'s SQL & Table API. Execute the following SQL command to switch execution mode from streaming to batch, and vice versa:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Execute the flink job in streaming mode for current session context\nSET 'execution.runtime-mode' = 'streaming';\n\n-- Execute the flink job in batch mode for current session context\nSET 'execution.runtime-mode' = 'batch';\n"})}),"\n",(0,a.jsx)(n.h2,{id:"streaming-read",children:"Streaming Read"}),"\n",(0,a.jsx)(n.p,{children:"By default, Streaming read produces the latest snapshot on the table upon first startup, and continue to read the latest changes."}),"\n",(0,a.jsx)(n.p,{children:"Fluss by default ensures that your startup is properly processed with all data included."}),"\n",(0,a.jsx)(n.p,{children:"Fluss Source in streaming mode is unbounded, like a queue that never ends."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SET 'execution.runtime-mode' = 'streaming';\nSELECT * FROM my_table ;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can also do streaming read without reading the snapshot data, you can use ",(0,a.jsx)(n.code,{children:"latest"})," scan mode, which only reads the changelogs (or logs) from the latest offset:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM my_table /*+ OPTIONS('scan.startup.mode' = 'latest') */;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"batch-read",children:"Batch Read"}),"\n",(0,a.jsx)(n.h3,{id:"limit-read",children:"Limit Read"}),"\n",(0,a.jsxs)(n.p,{children:["The Fluss source supports limiting reads for both primary-key tables and log tables, making it convenient to preview the latest ",(0,a.jsx)(n.code,{children:"N"})," records in a table."]}),"\n",(0,a.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Create a table and prepare data"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE log_table (\n    `c_custkey` INT NOT NULL,\n    `c_name` STRING NOT NULL,\n    `c_address` STRING NOT NULL,\n    `c_nationkey` INT NOT NULL,\n    `c_phone` STRING NOT NULL,\n    `c_acctbal` DECIMAL(15, 2) NOT NULL,\n    `c_mktsegment` STRING NOT NULL,\n    `c_comment` STRING NOT NULL\n);\n\nINSERT INTO log_table\nVALUES (1, 'Customer1', 'IVhzIApeRb ot,c,E', 15, '25-989-741-2988', 711.56, 'BUILDING', 'comment1'),\n       (2, 'Customer2', 'XSTf4,NCwDVaWNe6tEgvwfmRchLXak', 13, '23-768-687-3665', 121.65, 'AUTOMOBILE', 'comment2'),\n       (3, 'Customer3', 'MG9kdTD2WBHm', 1, '11-719-748-3364', 7498.12, 'AUTOMOBILE', 'comment3');\n;\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Query from table."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Execute the flink job in batch mode for current session context\nSET 'execution.runtime-mode' = 'batch';\nSET 'sql-client.execution.result-mode' = 'tableau';\n\nSELECT * FROM log_table LIMIT 10;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"point-query",children:"Point Query"}),"\n",(0,a.jsx)(n.p,{children:"The Fluss source supports point queries for primary-key tables, allowing you to inspect specific records efficiently. Currently, this functionality is exclusive to primary-key tables."}),"\n",(0,a.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Create a table and prepare data"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE pk_table (\n    `c_custkey` INT NOT NULL,\n    `c_name` STRING NOT NULL,\n    `c_address` STRING NOT NULL,\n    `c_nationkey` INT NOT NULL,\n    `c_phone` STRING NOT NULL,\n    `c_acctbal` DECIMAL(15, 2) NOT NULL,\n    `c_mktsegment` STRING NOT NULL,\n    `c_comment` STRING NOT NULL,\n    PRIMARY KEY (c_custkey) NOT ENFORCED\n);\nINSERT INTO pk_table\nVALUES (1, 'Customer1', 'IVhzIApeRb ot,c,E', 15, '25-989-741-2988', 711.56, 'BUILDING', 'comment1'),\n       (2, 'Customer2', 'XSTf4,NCwDVaWNe6tEgvwfmRchLXak', 13, '23-768-687-3665', 121.65, 'AUTOMOBILE', 'comment2'),\n       (3, 'Customer3', 'MG9kdTD2WBHm', 1, '11-719-748-3364', 7498.12, 'AUTOMOBILE', 'comment3');\n;\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Query from table."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Execute the flink job in batch mode for current session context\nSET 'execution.runtime-mode' = 'batch';\nSET 'sql-client.execution.result-mode' = 'tableau';\n\nSELECT * FROM pk_table WHERE c_custkey = 1;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"aggregations",children:"Aggregations"}),"\n",(0,a.jsx)(n.p,{children:"The Fluss source supports pushdown count aggregation for the log table in batch mode. It is useful to preview the total number of the log table;"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Execute the flink job in batch mode for current session context\nSET 'execution.runtime-mode' = 'batch';\nSET 'sql-client.execution.result-mode' = 'tableau';\n\nSELECT COUNT(*) FROM log_table;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"read-options",children:"Read Options"}),"\n",(0,a.jsx)(n.h3,{id:"scanstartupmode",children:"scan.startup.mode"}),"\n",(0,a.jsxs)(n.p,{children:["The scan startup mode enables you to specify the starting point for data consumption. Fluss currently supports the following ",(0,a.jsx)(n.code,{children:"scan.startup.mode"})," options:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"initial"})," (default): For primary key tables, it first consumes the full data set and then consumes incremental data. For log tables, it starts consuming from the earliest offset."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"earliest"}),": For primary key tables, it starts consuming from the earliest changelog offset; for log tables, it starts consuming from the earliest log offset."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"latest"}),": For primary key tables, it starts consuming from the latest changelog offset; for log tables, it starts consuming from the latest log offset."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"timestamp"}),": For primary key tables, it starts consuming the changelog from a specified time (defined by the configuration item ",(0,a.jsx)(n.code,{children:"scan.startup.timestamp"}),"); for log tables, it starts consuming from the offset corresponding to the specified time."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You can dynamically apply the scan parameters via SQL hints. For instance, the following SQL statement temporarily sets the ",(0,a.jsx)(n.code,{children:"scan.startup.mode"})," to latest when consuming the ",(0,a.jsx)(n.code,{children:"log_table"})," table."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM log_table /*+ OPTIONS('scan.startup.mode' = 'latest') */;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Also, the following SQL statement temporarily sets the ",(0,a.jsx)(n.code,{children:"scan.startup.mode"})," to timestamp when consuming the ",(0,a.jsx)(n.code,{children:"log_table"})," table."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- timestamp mode with microseconds.\nSELECT * FROM log_table\n/*+ OPTIONS('scan.startup.mode' = 'timestamp',\n'scan.startup.timestamp' = '1678883047356') */;\n\n-- timestamp mode with a time string format\nSELECT * FROM log_table\n/*+ OPTIONS('scan.startup.mode' = 'timestamp',\n'scan.startup.timestamp' = '2023-12-09 23:09:12') */;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"scanpartitiondiscoveryinterval",children:"scan.partition.discovery.interval"}),"\n",(0,a.jsx)(n.p,{children:"The interval in milliseconds for the Fluss source to discover the new partitions for partitioned table while scanning.  The default value is 10s. A non-positive value disables the partition discovery."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var s=t(6540);const a={},i=s.createContext(a);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);