"use strict";(self.webpackChunkfluss_website=self.webpackChunkfluss_website||[]).push([[2851],{2861:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>a,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"maintenance/configuration","title":"Server Configuration","description":"All configurations can be set in Fluss configuration file conf/server.yaml","source":"@site/versioned_docs/version-0.6/maintenance/configuration.md","sourceDirName":"maintenance","slug":"/maintenance/configuration","permalink":"/docs/0.6/maintenance/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fluss/edit/main/website/docs/maintenance/configuration.md","tags":[],"version":"0.6","sidebarPosition":1,"frontMatter":{"sidebar_label":"Configuration","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Paimon","permalink":"/docs/0.6/streaming-lakehouse/integrate-data-lakes/paimon"},"next":{"title":"Overview","permalink":"/docs/0.6/maintenance/filesystems/overview"}}');var i=r(4848),n=r(8453);const l={sidebar_label:"Configuration",sidebar_position:1},d="Server Configuration",o={},h=[{value:"Common",id:"common",level:2},{value:"CoordinatorServer",id:"coordinatorserver",level:2},{value:"TabletServer",id:"tabletserver",level:2},{value:"Zookeeper",id:"zookeeper",level:2},{value:"Netty",id:"netty",level:2},{value:"Log",id:"log",level:2},{value:"Log Tiered Storage",id:"log-tiered-storage",level:2},{value:"Kv",id:"kv",level:2},{value:"Metrics",id:"metrics",level:2},{value:"Lakehouse",id:"lakehouse",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"server-configuration",children:"Server Configuration"})}),"\n",(0,i.jsxs)(t.p,{children:["All configurations can be set in Fluss configuration file ",(0,i.jsx)(t.code,{children:"conf/server.yaml"})]}),"\n",(0,i.jsx)(t.p,{children:"The configuration is parsed and evaluated when the Fluss processes are started.\nChanges to the configuration file require restarting the relevant processes."}),"\n",(0,i.jsxs)(t.p,{children:["Users can organize config in format ",(0,i.jsx)(t.code,{children:"key: value"}),", such as:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'title="conf/server.yaml"',children:"default.bucket.number: 8\ndefault.replication.factor: 3\nremote.data.dir: /home/fluss/data\nremote.fs.write-buffer-size: 10mb\nauto-partition.check.interval: 5min\n"})}),"\n",(0,i.jsx)(t.p,{children:"Server configuration refers to a set of configurations used to specify the running parameters of a server.\nThese settings can only be configured at the time of cluster startup and do not support dynamic modification\nduring the Fluss cluster working."}),"\n",(0,i.jsx)(t.h2,{id:"common",children:"Common"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"default.bucket.number"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"The default number of buckets for a table in Fluss cluster. It's a cluster-level parameter and all the tables without specifying bucket number in the cluster will use the value as the bucket number."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"default.replication.factor"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"The default replication factor for the log of a table in Fluss cluster. It's a cluster-level parameter, and all the tables without specifying replication factor in the cluster will use the value as replication factor."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"remote.data.dir"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"(none)"}),(0,i.jsx)(t.td,{children:"The directory used for storing the kv snapshot data files and remote log for log tiered storage in a Fluss supported filesystem."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"remote.fs.write-buffer-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"4kb"}),(0,i.jsx)(t.td,{children:"The default size of the write buffer for writing the local files to remote file systems."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"plugin.classloader.parent-first-patterns.default"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsxs)(t.td,{children:["java.,",(0,i.jsx)("br",{}),"com.alibaba.fluss.,",(0,i.jsx)("br",{}),"javax.annotation.,",(0,i.jsx)("br",{}),"org.slf4j,",(0,i.jsx)("br",{}),"org.apache.log4j,",(0,i.jsx)("br",{}),"org.apache.logging,",(0,i.jsx)("br",{}),"org.apache.commons.logging,",(0,i.jsx)("br",{}),"ch.qos.logback"]}),(0,i.jsx)(t.td,{children:"A (semicolon-separated) list of patterns that specifies which classes should always be resolved through the plugin parent ClassLoader first. A pattern is a simple prefix that is checked against the fully qualified class name. This setting should generally not be modified."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"auto-partition.check.interval"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"10min"}),(0,i.jsx)(t.td,{children:"The interval of auto partition check. The default value is 10 minutes."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"coordinatorserver",children:"CoordinatorServer"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"coordinator.host"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"(None)"}),(0,i.jsx)(t.td,{children:"The config parameter defining the network address to connect to for communication with the coordinator server. If the coordinator server is used as a bootstrap server (discover all the servers in the cluster), the value of this config option should be a static hostname or address."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"coordinator.port"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"9123"}),(0,i.jsx)(t.td,{children:"The config parameter defining the network port to connect to for communication with the coordinator server. Like 'coordinator.host', if the coordinator server is used as a bootstrap server (discover all the servers in the cluster), the value of this config option should be a static port. Otherwise, the value can be set to \"0\" for a dynamic service name resolution. The value accepts a list of ports (\u201c50100,50101\u201d), ranges (\u201c50100-50200\u201d) or a combination of both."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"coordinator.io-pool.size"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"The size of the IO thread pool to run blocking operations for coordinator server. This includes discard unnecessary snapshot files. Increase this value if you experience slow unnecessary snapshot files clean. The default value is 1."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"tabletserver",children:"TabletServer"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"tablet-server.host"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"(None)"}),(0,i.jsx)(t.td,{children:"The external address of the network interface where the TabletServer is exposed. Because different TabletServer need different values for this option, usually it is specified in an additional non-shared TabletServer-specific config file."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"tablet-server.port"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"0"}),(0,i.jsx)(t.td,{children:"The external RPC port where the TabletServer is exposed."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"tablet-server.id"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"(None)"}),(0,i.jsx)(t.td,{children:"The id for the tablet server."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"data.dir"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"/tmp/fluss-data"}),(0,i.jsx)(t.td,{children:"This configuration controls the directory where fluss will store its data. The default value is /tmp/fluss-data"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"server.writer-id.expiration-time"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"7d"}),(0,i.jsx)(t.td,{children:"The time that the tablet server will wait without receiving any write request from a client before expiring the related status. The default value is 7 days."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"server.writer-id.expiration-check-interval"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"10min"}),(0,i.jsx)(t.td,{children:"The interval at which to remove writer ids that have expired due to 'server.writer-id.expiration-time passing. The default value is 10 minutes."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"server.background.threads"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"10"}),(0,i.jsx)(t.td,{children:"The number of threads to use for various background processing tasks. The default value is 10."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"server.buffer.memory-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"256mb"}),(0,i.jsx)(t.td,{children:"The total bytes of memory the server can use, e.g, buffer write-ahead-log rows."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"server.buffer.page-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"128kb"}),(0,i.jsx)(t.td,{children:"Size of every page in memory buffers ('server.buffer.memory-size')."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"server.buffer.per-request-memory-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"16mb"}),(0,i.jsx)(t.td,{children:"The minimum number of bytes that will be allocated by the writer rounded down to the closest multiple of server.buffer.page-size. It must be greater than or equal to server.buffer.page-size. This option allows to allocate memory in batches to have better CPU-cached friendliness due to contiguous segments."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"server.buffer.wait-timeout"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"2^(63)-1ns"}),(0,i.jsx)(t.td,{children:"Defines how long the buffer pool will block when waiting for segments."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"zookeeper",children:"Zookeeper"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"zookeeper.address"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"(None)"}),(0,i.jsx)(t.td,{children:"The ZooKeeper address to use, when running Fluss with ZooKeeper."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"zookeeper.path.root"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"/fluss"}),(0,i.jsx)(t.td,{children:"The root path under which Fluss stores its entries in ZooKeeper."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"zookeeper.client.session-timeout"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"60s"}),(0,i.jsx)(t.td,{children:"Defines the session timeout for the ZooKeeper session in ms."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"zookeeper.client.connection-timeout"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"15s"}),(0,i.jsx)(t.td,{children:"Defines the connection timeout for ZooKeeper in ms."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"zookeeper.client.retry-wait"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"5s"}),(0,i.jsx)(t.td,{children:"Defines the pause between consecutive retries in ms."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"zookeeper.client.max-retry-attempts"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"3"}),(0,i.jsx)(t.td,{children:"Defines the number of connection retries before the client gives up."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"zookeeper.client.tolerate-suspended-connections"}),(0,i.jsx)(t.td,{children:"Boolean"}),(0,i.jsx)(t.td,{children:"false"}),(0,i.jsx)(t.td,{children:"Defines whether a suspended ZooKeeper connection will be treated as an error that causes the leader information to be invalidated or not. In case you set this option to %s, Fluss will wait until a ZooKeeper connection is marked as lost before it revokes the leadership of components. This has the effect that Fluss is more resilient against temporary connection instabilities at the cost of running more likely into timing issues with ZooKeeper."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"zookeeper.client.ensemble-tracker"}),(0,i.jsx)(t.td,{children:"Boolean"}),(0,i.jsx)(t.td,{children:"true"}),(0,i.jsx)(t.td,{children:"Defines whether Curator should enable ensemble tracker. This can be useful in certain scenarios in which CuratorFramework is accessing to ZK clusters via load balancer or Virtual IPs. Default Curator EnsembleTracking logic watches CuratorEventType.GET_CONFIG events and changes ZooKeeper connection string. It is not desired behaviour when ZooKeeper is running under the Virtual IPs. Under certain configurations EnsembleTracking can lead to setting of ZooKeeper connection string with unresolvable hostnames."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"netty",children:"Netty"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"netty.server.num-network-threads"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"3"}),(0,i.jsx)(t.td,{children:"The number of threads that the server uses for receiving requests from the network and sending responses to the network."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"netty.server.num-worker-threads"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"8"}),(0,i.jsx)(t.td,{children:"The number of threads that the server uses for processing requests, which may include disk and remote I/O."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"netty.server.max-queued-requests"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"500"}),(0,i.jsx)(t.td,{children:"The number of queued requests allowed for worker threads, before blocking the I/O threads."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"netty.connection.max-idle-time"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"10min"}),(0,i.jsx)(t.td,{children:"Close idle connections after the number of milliseconds specified by this config."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"netty.client.num-network-threads"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"The number of threads that the client uses for sending requests to the network and receiving responses from network. The default value is 1"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"log",children:"Log"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.segment.file-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"1024m"}),(0,i.jsx)(t.td,{children:"This configuration controls the segment file size for the log. Retention and cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over retention."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.index.file-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"10m"}),(0,i.jsx)(t.td,{children:"This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.index.interval-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"4k"}),(0,i.jsx)(t.td,{children:"This setting controls how frequently fluss adds an index entry to its offset index. The default setting ensures that we index a message roughly every 4096 bytes. More indexing allows reads to jump closer to the exact position in the log but makes the index larger. You probably don't need to change this."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.file-preallocate"}),(0,i.jsx)(t.td,{children:"Boolean"}),(0,i.jsx)(t.td,{children:"false"}),(0,i.jsx)(t.td,{children:"True if we should preallocate the file on disk when creating a new log segment."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.flush.interval-messages"}),(0,i.jsx)(t.td,{children:"Long"}),(0,i.jsx)(t.td,{children:"Long.MAX_VALUE"}),(0,i.jsx)(t.td,{children:"This setting allows specifying an interval at which we will force a fsync of data written to the log. For example if this was set to 1, we would fsync after every message; if it were 5 we would fsync after every five messages."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.high-watermark.checkpoint-interval"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"5s"}),(0,i.jsx)(t.td,{children:"The frequency with which the high watermark is saved out to disk. The default setting is 5 seconds."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.max-lag-time"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"30s"}),(0,i.jsx)(t.td,{children:"If a follower replica hasn't sent any fetch log requests or hasn't consumed up the leaders log end offset for at least this time, the leader will remove the follower replica form isr"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.write-operation-purge-number"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1000"}),(0,i.jsx)(t.td,{children:"The purge number (in number of requests) of the write operation manager, the default value is 1000."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.fetch-operation-purge-number"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1000"}),(0,i.jsx)(t.td,{children:"The purge number (in number of requests) of the fetch log operation manager, the default value is 1000."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.fetcher-number"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"Number of fetcher threads used to replicate log records from each source tablet server. The total number of fetchers on each tablet server is bound by this parameter multiplied by the number of tablet servers in the cluster. Increasing this value can increase the degree of I/O parallelism in the follower and leader tablet server at the cost of higher CPU and memory utilization."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.fetch.backoff-interval"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"1s"}),(0,i.jsx)(t.td,{children:"The amount of time to sleep when fetch bucket error occurs."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.fetch.max-bytes"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"16mb"}),(0,i.jsx)(t.td,{children:"The maximum amount of data the server should return for a fetch request from follower. Records are fetched in batches, and if the first record batch in the first non-empty bucket of the fetch is larger than this value, the record batch will still be returned to ensure that the fetch can make progress. As such, this is not a absolute maximum. Note that the fetcher performs multiple fetches in parallel."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.fetch.max-bytes-for-bucket"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"1mb"}),(0,i.jsx)(t.td,{children:"The maximum amount of data the server should return for a table bucket in fetch request fom follower. Records are fetched in batches, and the max bytes size is config by this option."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.fetch.min-bytes"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"1b"}),(0,i.jsx)(t.td,{children:"The minimum bytes expected for each fetch log request from the follower to response. If not enough bytes, wait up to log.replica.fetch-wait-max-time time to return."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.fetch.wait-max-time"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"500ms"}),(0,i.jsx)(t.td,{children:"The maximum time to wait for enough bytes to be available for a fetch log request from the follower to response. This value should always be less than the 'log.replica.max-lag-time' at all times to prevent frequent shrinking of ISR for low throughput tables"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"log.replica.min-in-sync-replicas-number"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"When a producer set acks to all (-1), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception(NotEnoughReplicas). when used together, this config and 'acks' allow you to enforce greater durability guarantees. A typical scenario would be to create a table with a replication factor of 3. set this conf to 2, and produce with acks = -1. This will ensure that the producer raises an exception if a majority of replicas don't receive a write."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"log-tiered-storage",children:"Log Tiered Storage"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"remote.log.task-interval-duration"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"1min"}),(0,i.jsx)(t.td,{children:"Interval at which remote log manager runs the scheduled tasks like copy segments, clean up remote log segments, delete local log segments etc. If the value is set to 0s, it means that the remote log storage is disabled."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"remote.log.index-file-cache-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"1gb"}),(0,i.jsx)(t.td,{children:"The total size of the space allocated to store index files fetched from remote storage in the local storage."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"remote.log-manager.thread-pool-size"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"4"}),(0,i.jsx)(t.td,{children:"Size of the thread pool used in scheduling tasks to copy segments, fetch remote log indexes and clean up remote log segments."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"remote.log.data-transfer-thread-num"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"4"}),(0,i.jsx)(t.td,{children:"The number of threads the server uses to transfer (download and upload) remote log file can be data file, index file and remote log metadata file."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"kv",children:"Kv"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.snapshot.interval"}),(0,i.jsx)(t.td,{children:"Duration"}),(0,i.jsx)(t.td,{children:"10min"}),(0,i.jsx)(t.td,{children:"The interval to perform periodic snapshot for kv data. The default setting is 10 minutes."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.snapshot.scheduler-thread-num"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"The number of threads that the server uses to schedule snapshot kv data for all the replicas in the server."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.snapshot.transfer-thread-num"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"4"}),(0,i.jsx)(t.td,{children:"The number of threads the server uses to transfer (download and upload) kv snapshot files."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.snapshot.num-retained"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"The maximum number of completed snapshots to retain."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.thread.num"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"2"}),(0,i.jsx)(t.td,{children:"The maximum number of concurrent background flush and compaction jobs (per bucket of table). The default value is '2'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.files.open"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"-1"}),(0,i.jsx)(t.td,{children:"The maximum number of open files (per  bucket of table) that can be used by the DB, '-1' means no limit. The default value is '-1'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.log.max-file-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"25mb"}),(0,i.jsx)(t.td,{children:"The maximum size of RocksDB's file used for information logging. If the log files becomes larger than this, a new file will be created. If 0, all logs will be written to one log file. The default maximum file size is '25MB'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.log.file-num"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"4"}),(0,i.jsx)(t.td,{children:"The maximum number of files RocksDB should keep for information logging (Default setting: 4)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.log.dir"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"(None)"}),(0,i.jsx)(t.td,{children:"The directory for RocksDB's information logging files. If empty (Fluss default setting), log files will be in the same directory as the Fluss log. If non-empty, this directory will be used and the data directory's absolute path will be used as the prefix of the log file name. If setting this option as a non-existing location, e.g '/dev/null', RocksDB will then create the log under its own database folder as before."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.log.level"}),(0,i.jsx)(t.td,{children:"Enum"}),(0,i.jsx)(t.td,{children:"INFO_LEVEL"}),(0,i.jsx)(t.td,{children:"The specified information logging level for RocksDB. Candidate log level is 'DEBUG_LEVEL', 'INFO_LEVEL', 'WARN_LEVEL', 'ERROR_LEVEL', 'FATAL_LEVEL', 'HEADER_LEVEL', NUM_INFO_LOG_LEVELS, . If unset, Fluss will use INFO_LEVEL. Note: RocksDB info logs will not be written to the Fluss's tablet server logs and there is no rolling strategy, unless you configure 'kv.rocksdb.log.dir', 'kv.rocksdb.log.max-file-size' and 'kv.rocksdb.log.file-num' accordingly. Without a rolling strategy, it may lead to uncontrolled disk space usage if configured with increased log levels!  There is no need to modify the RocksDB log level, unless for troubleshooting RocksDB."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.write-batch-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"2mb"}),(0,i.jsx)(t.td,{children:"The max size of the consumed memory for RocksDB batch write, will flush just based on item count if this config set to 0."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.compaction.style"}),(0,i.jsx)(t.td,{children:"Enum"}),(0,i.jsx)(t.td,{children:"LEVEL"}),(0,i.jsx)(t.td,{children:"The specified compaction style for DB. Candidate compaction style is LEVEL, FIFO, UNIVERSAL, or NONE, and Fluss chooses 'LEVEL' as default style."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.compaction.level.use-dynamic-size"}),(0,i.jsx)(t.td,{children:"Boolean"}),(0,i.jsx)(t.td,{children:"false"}),(0,i.jsxs)(t.td,{children:["If true, RocksDB will pick target size of each level dynamically. From an empty DB, RocksDB would make last level the base level, which means merging L0 data into the last level, until it exceeds max_bytes_for_level_base. And then repeat this process for second last level and so on. The default value is 'false'. For more information, please refer to %s ",(0,i.jsx)(t.a,{href:"https://github.com/facebook/rocksdb/wiki/Leveled-Compaction#level_compaction_dynamic_level_bytes-is-true",children:"https://github.com/facebook/rocksdb/wiki/Leveled-Compaction#level_compaction_dynamic_level_bytes-is-true"})," RocksDB's doc."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.compression.per.level"}),(0,i.jsx)(t.td,{children:"Enum"}),(0,i.jsx)(t.td,{children:"LZ4,LZ4,LZ4,LZ4,LZ4,ZSTD,ZSTD"}),(0,i.jsxs)(t.td,{children:["A comma-separated list of Compression Type. Different levels can have different compression policies. In many cases, lower levels use fast compression algorithms, while higher levels with more data use slower but more effective compression algorithms. The N th element in the List corresponds to the compression type of the level N-1 When 'kv.rocksdb.compaction.level.use-dynamic-size' is true, compression_per_level[0] still determines L0, but other elements are based on the base level and may not match the level seen in the info log. Note: If the List size is smaller than the level number, the undefined lower level uses the last Compression Type in the List. The optional values include NO, SNAPPY, LZ4, ZSTD. For more information about compression type, please refer to doc ",(0,i.jsx)(t.a,{href:"https://github.com/facebook/rocksdb/wiki/Compression",children:"https://github.com/facebook/rocksdb/wiki/Compression"}),". The default value is \u2018LZ4,LZ4,LZ4,LZ4,LZ4,ZSTD,ZSTD\u2019, indicates there is lz4 compaction of level0 and level4, ZSTD compaction algorithm is used from level5 to level6. LZ4 is a lightweight compression algorithm so it usually strikes a good balance between space and CPU usage. ZSTD is more space save than LZ4, but it is more CPU-intensive. Different machines deploy compaction modes according to CPU and I/O resources. The default value is for the scenario that CPU resources are adequate. If you find the IO pressure of the system is not big when writing a lot of data, but CPU resources are inadequate, you can exchange I/O resources for CPU resources and change the compaction mode to 'NO,NO,NO,LZ4,LZ4,ZSTD,ZSTD'."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.compaction.level.target-file-size-base"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"64mb"}),(0,i.jsx)(t.td,{children:"The target file size for compaction, which determines a level-1 file size. The default value is '64MB'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.compaction.level.max-size-level-base"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"256mb"}),(0,i.jsx)(t.td,{children:"The upper-bound of the total size of level base files in bytes. The default value is '256MB'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.writebuffer.size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"64mb"}),(0,i.jsx)(t.td,{children:"The amount of data built up in memory (backed by an unsorted log on disk) before converting to a sorted on-disk files. The default writebuffer size is '64MB'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.writebuffer.count"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"2"}),(0,i.jsx)(t.td,{children:"The maximum number of write buffers that are built up in memory. The default value is '2'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.writebuffer.number-to-merge"}),(0,i.jsx)(t.td,{children:"Integer"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"The minimum number of write buffers that will be merged together before writing to storage. The default value is '1'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.block.blocksize"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"4kb"}),(0,i.jsx)(t.td,{children:"The approximate size (in bytes) of user data packed per block. The default blocksize is '4KB'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.block.cache-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"8mb"}),(0,i.jsx)(t.td,{children:"The amount of the cache for data blocks in RocksDB. The default block-cache size is '8MB'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.use-bloom-filter"}),(0,i.jsx)(t.td,{children:"Boolean"}),(0,i.jsx)(t.td,{children:"true"}),(0,i.jsx)(t.td,{children:"If true, every newly created SST file will contain a Bloom filter. It is enabled by default."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.bloom-filter.bits-per-key"}),(0,i.jsx)(t.td,{children:"Double"}),(0,i.jsx)(t.td,{children:"10.0"}),(0,i.jsx)(t.td,{children:"Bits per key that bloom filter will use, this only take effect when bloom filter is used. The default value is 10.0."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.rocksdb.bloom-filter.block-based-mode"}),(0,i.jsx)(t.td,{children:"Boolean"}),(0,i.jsx)(t.td,{children:"false"}),(0,i.jsx)(t.td,{children:"If true, RocksDB will use block-based filter instead of full filter, this only take effect when bloom filter is used. The default value is 'false'."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"kv.recover.log-record-batch.max-size"}),(0,i.jsx)(t.td,{children:"MemorySize"}),(0,i.jsx)(t.td,{children:"16mb"}),(0,i.jsx)(t.td,{children:"The max fetch size for fetching log to apply to kv during recovering kv."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"metrics",children:"Metrics"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"metrics.reporters"}),(0,i.jsx)(t.td,{children:"List"}),(0,i.jsx)(t.td,{children:"(None)"}),(0,i.jsx)(t.td,{children:"An optional list of reporter names. If configured, only reporters whose name matches in the list will be started"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"metrics.reporter.prometheus.port"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"9249"}),(0,i.jsx)(t.td,{children:"The port the Prometheus reporter listens on. In order to be able to run several instances of the reporter on one host (e.g. when one TabletServer is colocated with the CoordinatorServer) it is advisable to use a port range like 9250-9260."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"metrics.reporter.jmx.port"}),(0,i.jsx)(t.td,{children:"String"}),(0,i.jsx)(t.td,{children:"(None)"}),(0,i.jsx)(t.td,{children:"The port for the JMXServer that JMX clients can connect to. If not set, the JMXServer won't start. In order to be able to run several instances of the reporter on one host (e.g. when one TabletServer is colocated with the CoordinatorServer) it is advisable to use a port range like 9990-9999."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"lakehouse",children:"Lakehouse"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"datalake.format"}),(0,i.jsx)(t.td,{children:"ENUM"}),(0,i.jsx)(t.td,{children:"(None)"}),(0,i.jsx)(t.td,{children:"The datalake format used by of Fluss to be as lakehouse storage, such as Paimon, Iceberg, Hudi. Now, only support Paimon."})]})})]})]})}function a(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>d});var s=r(6540);const i={},n=s.createContext(i);function l(e){const t=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);