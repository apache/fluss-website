"use strict";(self.webpackChunkfluss_website=self.webpackChunkfluss_website||[]).push([[4959],{8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>d});var n=s(6540);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}},8742:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"table-design/data-types","title":"Data Types","description":"Fluss has a rich set of native data types available to users. All the data types of Fluss are as follows:","source":"@site/versioned_docs/version-0.5/table-design/data-types.md","sourceDirName":"table-design","slug":"/table-design/data-types","permalink":"/docs/0.5/table-design/data-types","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fluss/edit/main/website/docs/table-design/data-types.md","tags":[],"version":"0.5","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"docsSidebar","previous":{"title":"TTL","permalink":"/docs/0.5/table-design/data-distribution/ttl"},"next":{"title":"Getting Started","permalink":"/docs/0.5/engine-flink/getting-started"}}');var i=s(4848),a=s(8453);const r={sidebar_position:10},d="Data Types",o={},c=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"data-types",children:"Data Types"})}),"\n",(0,i.jsx)(t.p,{children:"Fluss has a rich set of native data types available to users. All the data types of Fluss are as follows:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"DataType"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BOOLEAN"}),(0,i.jsx)(t.td,{children:"A boolean with a (possibly) three-valued logic of TRUE, FALSE, UNKNOWN."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TINYINT"}),(0,i.jsx)(t.td,{children:"A 1-byte signed integer with values from -128 to 127."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SMALLINT"}),(0,i.jsx)(t.td,{children:"A 2-byte signed integer with values from -32,768 to 32,767."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"INT"}),(0,i.jsx)(t.td,{children:"A 4-byte signed integer with values from -2,147,483,648 to 2,147,483,647."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BIGINT"}),(0,i.jsx)(t.td,{children:"An 8-byte signed integer with values from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"FLOAT"}),(0,i.jsx)(t.td,{children:"A 4-byte single precision floating point number."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DOUBLE"}),(0,i.jsx)(t.td,{children:"An 8-byte double precision floating point number."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"CHAR(n)"}),(0,i.jsx)(t.td,{children:"A fixed-length character string where n is the number of code points. n must have a value between 1 and Integer.MAX_VALUE (both inclusive)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"STRING"}),(0,i.jsx)(t.td,{children:"A variable-length character string."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DECIMAL(p, s)"}),(0,i.jsx)(t.td,{children:"A decimal number with fixed precision and scale where p is the number of digits in a number (=precision) and s is the number of digits to the right of the decimal point in a number (=scale). p must have a value between 1 and 38 (both inclusive). s must have a value between 0 and p (both inclusive)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DATE"}),(0,i.jsxs)(t.td,{children:["A date consisting of year-month-day with values ranging from 0000-01-01 to 9999-12-31. ",(0,i.jsx)("br",{}),"Compared to the SQL standard, the range starts at year 0000."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TIME"}),(0,i.jsxs)(t.td,{children:["A time WITHOUT time zone with no fractional seconds by default. ",(0,i.jsx)("br",{})," An instance consists of ",(0,i.jsx)(t.code,{children:"hour:minute:second"})," with up to second precision and values ranging from 00:00:00 to 23:59:59. ",(0,i.jsx)("br",{}),"Compared to the SQL standard, leap seconds (23:59:60 and 23:59:61) are not supported as the semantics are closer to java.time.LocalTime. A time WITH time zone is not provided."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TIME(p)"}),(0,i.jsxs)(t.td,{children:["A time WITHOUT time zone where p is the number of digits of fractional seconds (=precision). p must have a value between 0 and 9 (both inclusive).",(0,i.jsx)("br",{})," An instance consists of ",(0,i.jsx)(t.code,{children:"hour:minute:second[.fractional]"})," with up to nanosecond precision and values ranging from 00:00:00.000000000 to 23:59:59.999999999. ",(0,i.jsx)("br",{}),"Compared to the SQL standard, leap seconds (23:59:60 and 23:59:61) are not supported as the semantics are closer to java. time. LocalTime. A time WITH time zone is not provided."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TIMESTAMP"}),(0,i.jsxs)(t.td,{children:["A timestamp WITHOUT time zone with 6 digits of fractional seconds by default.",(0,i.jsx)("br",{})," An instance consists of ",(0,i.jsx)(t.code,{children:"year-month-day hour:minute:second[.fractional]"})," with up to microsecond precision and values ranging from 0000-01-01 00:00:00.000000 to 9999-12-31 23:59:59.999999. ",(0,i.jsx)("br",{}),"Compared to the SQL standard, leap seconds (23:59:60 and 23:59:61) are not supported as the semantics are closer to java. time. LocalDateTime."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TIMESTAMP(p)"}),(0,i.jsxs)(t.td,{children:["A timestamp WITHOUT time zone where p is the number of digits of fractional seconds (=precision). p must have a value between 0 and 9 (both inclusive). ",(0,i.jsx)("br",{}),"An instance consists of ",(0,i.jsx)(t.code,{children:"year-month-day hour:minute:second[.fractional]"})," with up to nanosecond precision and values ranging from 0000-01-01 00:00:00.000000000 to 9999-12-31 23:59:59.999999999.",(0,i.jsx)("br",{}),"Compared to the SQL standard, leap seconds (23:59:60 and 23:59:61) are not supported as the semantics are closer to java. time. LocalDateTime."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TIMESTAMP_LTZ"}),(0,i.jsxs)(t.td,{children:["A a timestamp WITH time zone TIMESTAMP WITH TIME ZONE with 6 digits of fractional seconds by default. ",(0,i.jsx)("br",{}),"An instance consists of ",(0,i.jsx)(t.code,{children:"year-month-day hour:minute:second[.fractional]"})," zone with up to microsecond precision and values ranging from 0000-01-01 00:00:00.000000 +14:59 to 9999-12-31 23:59:59.999999 -14:59. ",(0,i.jsx)("br",{})," Compared to the SQL standard, leap seconds (23:59:60 and 23:59:61) are not supported as the semantics are closer to java. time. OffsetDateTime."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TIMESTAMP_LTZ(p)"}),(0,i.jsxs)(t.td,{children:["A a timestamp WITH time zone TIMESTAMP WITH TIME ZONE where p is the number of digits of fractional seconds (=precision). p must have a value between 0 and 9 (both inclusive). ",(0,i.jsx)("br",{}),"An instance consists of ",(0,i.jsx)(t.code,{children:"year-month-day hour:minute:second[.fractional]"})," with up to nanosecond precision and values ranging from 0000-01-01 00:00:00.000000000 to 9999-12-31 23:59:59.999999999. ",(0,i.jsx)("br",{})," Compared to the SQL standard, leap seconds (23:59:60 and 23:59:61) are not supported as the semantics are closer to java. time. LocalDateTime"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BYTES"}),(0,i.jsx)(t.td,{children:"A variable-length binary string (=a sequence of bytes)."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);