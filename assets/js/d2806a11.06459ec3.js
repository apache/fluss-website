"use strict";(self.webpackChunkfluss_website=self.webpackChunkfluss_website||[]).push([[2656],{6032:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>i,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"maintenance/observability/monitor-metrics","title":"Monitor Metrics","description":"\x3c!--","source":"@site/versioned_docs/version-0.7/maintenance/observability/monitor-metrics.md","sourceDirName":"maintenance/observability","slug":"/maintenance/observability/monitor-metrics","permalink":"/docs/maintenance/observability/monitor-metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fluss/edit/main/website/docs/maintenance/observability/monitor-metrics.md","tags":[],"version":"0.7","sidebarPosition":3,"frontMatter":{"title":"Monitor Metrics","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Metric Reporters","permalink":"/docs/maintenance/observability/metric-reporters"},"next":{"title":"Logging","permalink":"/docs/maintenance/observability/logging"}}');var n=r(4848),d=r(8453);const i={title:"Monitor Metrics",sidebar_position:3},l="Monitor Metrics",c={},h=[{value:"Scope",id:"scope",level:2},{value:"Reporter",id:"reporter",level:2},{value:"Metrics List",id:"metrics-list",level:2},{value:"CPU",id:"cpu",level:3},{value:"Memory",id:"memory",level:3},{value:"Threads",id:"threads",level:3},{value:"GarbageCollection",id:"garbagecollection",level:3},{value:"Netty",id:"netty",level:3},{value:"Coordinator Server",id:"coordinator-server",level:3},{value:"Tablet Server",id:"tablet-server",level:3},{value:"Request",id:"request",level:3},{value:"Table/Bucket",id:"tablebucket",level:3},{value:"Flink connector standard metrics",id:"flink-connector-standard-metrics",level:3},{value:"Source Metrics",id:"source-metrics",level:4},{value:"Sink Metrics",id:"sink-metrics",level:4}];function o(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"monitor-metrics",children:"Monitor Metrics"})}),"\n",(0,n.jsx)(t.p,{children:"Fluss has built a metrics system to measure the behaviours of cluster and table, like the active CoordinatorServer,\nthe number of table, the bytes written, the number of records written, etc."}),"\n",(0,n.jsxs)(t.p,{children:["Fluss supports different metric types: ",(0,n.jsx)(t.strong,{children:"Counters"}),", ",(0,n.jsx)(t.strong,{children:"Gauges"}),", ",(0,n.jsx)(t.strong,{children:"Histograms"}),", and ",(0,n.jsx)(t.strong,{children:"Meters"}),"."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Gauge"}),": Provides a value of any type at a point in time."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Counter"}),": Used to count values by incrementing and decrementing."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Histogram"}),": Measure the statistical distribution of a set of values including the min, max, mean, standard deviation and percentile."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Meter"}),": The gauge exports the meter's rate."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Fluss client also has supported built-in metrics to measure operations of ",(0,n.jsx)(t.strong,{children:"write to"}),", ",(0,n.jsx)(t.strong,{children:"read from"})," fluss cluster,\nwhich can be bridged to Flink use Flink connector standard metrics."]}),"\n",(0,n.jsx)(t.h2,{id:"scope",children:"Scope"}),"\n",(0,n.jsx)(t.p,{children:"Every metric is assigned an identifier and a set of key-value pairs under which the metric will be reported."}),"\n",(0,n.jsxs)(t.p,{children:["The identifier is delimited by ",(0,n.jsx)(t.code,{children:"metrics.scope.delimiter"}),". Currently, the ",(0,n.jsx)(t.code,{children:"metrics.scope.delimiter"})," is not configurable,\nit determined by the metric reporter. Take prometheus as example, the scope will delimited by ",(0,n.jsx)(t.code,{children:"_"}),", so the scope like ",(0,n.jsx)(t.code,{children:"A_B_C"}),",\nwhile Fluss metrics will always begin with ",(0,n.jsx)(t.code,{children:"fluss"}),", as ",(0,n.jsx)(t.code,{children:"fluss_A_B_C"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The key-value pairs are called ",(0,n.jsx)(t.strong,{children:"variables"})," and are used to filter metrics. There are no restrictions on the\nnumber of order of variables. Variables are case-sensitive."]}),"\n",(0,n.jsx)(t.h2,{id:"reporter",children:"Reporter"}),"\n",(0,n.jsxs)(t.p,{children:["For information on how to set up Fluss's metric reporters please take a look at the ",(0,n.jsx)(t.a,{href:"/docs/maintenance/observability/metric-reporters",children:"Metric Reporters"})," page."]}),"\n",(0,n.jsx)(t.h2,{id:"metrics-list",children:"Metrics List"}),"\n",(0,n.jsxs)(t.p,{children:["By default, Fluss provides ",(0,n.jsx)(t.strong,{children:"cluster state"})," metrics, ",(0,n.jsx)(t.strong,{children:"table state"})," metrics, and bridging to\n",(0,n.jsx)(t.strong,{children:"Flink connector"})," standard metrics. This section is a reference of all these metrics."]}),"\n",(0,n.jsx)(t.p,{children:"The tables below generally feature 5 columns:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:['The "Scope" column describes which scope format is used to generate the system scope.\nFor example, if the cell contains ',(0,n.jsx)(t.code,{children:"tabletserver"})," then the scope format for ",(0,n.jsx)(t.code,{children:"fluss_tabletserver"})," is used.\nIf the cell contains multiple values, separated by a slash, then the metrics are reported multiple\ntimes for different entities, like for both ",(0,n.jsx)(t.code,{children:"tabletserver"})," and ",(0,n.jsx)(t.code,{children:"coordinator"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:'The (optional)"Infix" column describes which infix is appended to the scope.'}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:'The "Metrics" column lists the names of all metrics that are registered for the given scope and infix.'}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:'The "Description" column provides information as to what a given metric is measuring.'}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:'The "Type" column describes which metric type is used for the measurement.'}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Thus, in order to infer the metric identifier:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:'Take the "fluss_" first.'}),"\n",(0,n.jsx)(t.li,{children:'Take the scope-format based on the "Scope" column'}),"\n",(0,n.jsxs)(t.li,{children:['Append the value in the "Infix" column if present, and account for the ',(0,n.jsx)(t.code,{children:"metrics.scope.delimiter"})," setting"]}),"\n",(0,n.jsx)(t.li,{children:"Append metric name."}),"\n",(0,n.jsxs)(t.li,{children:["One metric for prometheus will be like ",(0,n.jsx)(t.code,{children:"fluss_tabletserver_status_JVM_CPU_load"})]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"cpu",children:"CPU"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"30pt"},children:"Scope"}),(0,n.jsx)("th",{class:"text-left",style:{width:"150pt"},children:"Infix"}),(0,n.jsx)("th",{class:"text-left",style:{width:"80pt"},children:"Metrics"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"40pt"},children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"2",children:(0,n.jsx)("strong",{children:"coordinator/tabletserver"})}),(0,n.jsx)("td",{rowspan:"2",children:"status_JVM_CPU"}),(0,n.jsx)("td",{children:"load"}),(0,n.jsx)("td",{children:"The recent CPU usage of the JVM."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"time"}),(0,n.jsx)("td",{children:"The CPU time used by the JVM."}),(0,n.jsx)("td",{children:"Gauge"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"memory",children:"Memory"}),"\n",(0,n.jsx)(t.p,{children:"The memory-related metrics require Oracle's memory management (also included in OpenJDK's Hotspot implementation) to be in place.\nSome metrics might not be exposed when using other JVM implementations (e.g. IBM's J9)."}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",children:"Scope"}),(0,n.jsx)("th",{class:"text-left",children:"Infix"}),(0,n.jsx)("th",{class:"text-left",children:"Metrics"}),(0,n.jsx)("th",{class:"text-left",children:"Description"}),(0,n.jsx)("th",{class:"text-left",children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"17",children:(0,n.jsx)("strong",{children:"coordinator/tabletserver"})}),(0,n.jsx)("td",{rowspan:"15",children:"status_JVM_memory"}),(0,n.jsx)("td",{children:"heap_used"}),(0,n.jsx)("td",{children:"The amount of heap memory currently used (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"heap_committed"}),(0,n.jsx)("td",{children:"The amount of heap memory guaranteed to be available to the JVM (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"heap_max"}),(0,n.jsxs)("td",{children:["The maximum amount of heap memory that can be used for memory management (in bytes). ",(0,n.jsx)("br",{}),"\nThis value might not be necessarily equal to the maximum value specified through -Xmx or\nthe equivalent Fluss configuration parameter. Some GC algorithms allocate heap memory that won't\nbe available to the user code and, therefore, not being exposed through the heap metrics."]}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"nonHeap_used"}),(0,n.jsx)("td",{children:"The amount of non-heap memory currently used (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"nonHeap_committed"}),(0,n.jsx)("td",{children:"The amount of non-heap memory guaranteed to be available to the JVM (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"nonHeap_max"}),(0,n.jsx)("td",{children:"The maximum amount of non-heap memory that can be used for memory management (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"metaspace_used"}),(0,n.jsx)("td",{children:"The amount of memory currently used in the Metaspace memory pool (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"metaspace_committed"}),(0,n.jsx)("td",{children:"The amount of memory guaranteed to be available to the JVM in the Metaspace memory pool (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"metaspace_max"}),(0,n.jsx)("td",{children:"The maximum amount of memory that can be used in the Metaspace memory pool (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"direct_count"}),(0,n.jsx)("td",{children:"The number of buffers in the direct buffer pool."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"direct_memoryUsed"}),(0,n.jsx)("td",{children:"The amount of memory used by the JVM for the direct buffer pool (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"direct_totalCapacity"}),(0,n.jsx)("td",{children:"The total capacity of all buffers in the direct buffer pool (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"mapped_count"}),(0,n.jsx)("td",{children:"The number of buffers in the mapped buffer pool."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"mapped_memoryUsed"}),(0,n.jsx)("td",{children:"The amount of memory used by the JVM for the mapped buffer pool (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"mapped_totalCapacity"}),(0,n.jsx)("td",{children:"The number of buffers in the mapped buffer pool (in bytes)."}),(0,n.jsx)("td",{children:"Gauge"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"threads",children:"Threads"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"30pt"},children:"Scope"}),(0,n.jsx)("th",{class:"text-left",style:{width:"150pt"},children:"Infix"}),(0,n.jsx)("th",{class:"text-left",style:{width:"80pt"},children:"Metrics"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"40pt"},children:"Type"})]})}),(0,n.jsx)("tbody",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"1",children:(0,n.jsx)("strong",{children:"coordinator/tabletserver"})}),(0,n.jsx)("td",{rowspan:"1",children:"status_JVM_threads"}),(0,n.jsx)("td",{children:"count"}),(0,n.jsx)("td",{children:"The total number of live threads."}),(0,n.jsx)("td",{children:"Gauge"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"garbagecollection",children:"GarbageCollection"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"30pt"},children:"Scope"}),(0,n.jsx)("th",{class:"text-left",style:{width:"150pt"},children:"Infix"}),(0,n.jsx)("th",{class:"text-left",style:{width:"80pt"},children:"Metrics"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"40pt"},children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"3",children:(0,n.jsx)("strong",{children:"coordinator/tabletserver"})}),(0,n.jsx)("td",{rowspan:"3",children:"status_JVM_GC"}),(0,n.jsx)("td",{children:"<Collector/all>_count"}),(0,n.jsx)("td",{children:"The total number of collections that have occurred for the given (or all) collector."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"<Collector/all>_time"}),(0,n.jsx)("td",{children:"The total time spent performing garbage collection for the given (or all) collector."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"<Collector/all>_timeMsPerSecond"}),(0,n.jsx)("td",{children:"The time (in milliseconds) spent garbage collecting per second for the given (or all) collector."}),(0,n.jsx)("td",{children:"Gauge"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"netty",children:"Netty"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"30pt"},children:"Scope"}),(0,n.jsx)("th",{class:"text-left",style:{width:"150pt"},children:"Infix"}),(0,n.jsx)("th",{class:"text-left",style:{width:"80pt"},children:"Metrics"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"40pt"},children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"4",children:(0,n.jsx)("strong",{children:"coordinator/tabletserver/client"})}),(0,n.jsx)("td",{rowspan:"4",children:"netty"}),(0,n.jsx)("td",{children:"usedDirectMemory"}),(0,n.jsx)("td",{children:"The number of bytes of direct memory used by netty."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"numDirectArenas"}),(0,n.jsx)("td",{children:"The number of direct arenas in netty."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"numAllocationsPerSecond"}),(0,n.jsx)("td",{children:"The number of allocations done via the arena per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"numHugeAllocationsPerSecond"}),(0,n.jsx)("td",{children:"The number of huge allocations done via the arena per second."}),(0,n.jsx)("td",{children:"Meter"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"coordinator-server",children:"Coordinator Server"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"30pt"},children:"Scope"}),(0,n.jsx)("th",{class:"text-left",style:{width:"150pt"},children:"Infix"}),(0,n.jsx)("th",{class:"text-left",style:{width:"80pt"},children:"Metrics"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"40pt"},children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"6",children:(0,n.jsx)("strong",{children:"coordinator"})}),(0,n.jsx)("td",{style:{textAlign:"center",verticalAlign:"middle"},rowspan:"6",children:"-"}),(0,n.jsx)("td",{children:"activeCoordinatorCount"}),(0,n.jsx)("td",{children:"The number of active CoordinatorServer in this cluster."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"activeTabletServerCount"}),(0,n.jsx)("td",{children:"The number of active TabletServer in this cluster."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"offlineBucketCount"}),(0,n.jsx)("td",{children:"The total number of offline buckets in this cluster."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"tableCount"}),(0,n.jsx)("td",{children:"The total number of tables in this cluster."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"bucketCount"}),(0,n.jsx)("td",{children:"The total number of buckets in this cluster."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"replicasToDeleteCount"}),(0,n.jsx)("td",{children:"The total number of replicas in the progress to be deleted in this cluster."}),(0,n.jsx)("td",{children:"Gauge"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"tablet-server",children:"Tablet Server"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"30pt"},children:"Scope"}),(0,n.jsx)("th",{class:"text-left",style:{width:"150pt"},children:"Infix"}),(0,n.jsx)("th",{class:"text-left",style:{width:"80pt"},children:"Metrics"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"40pt"},children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"10",children:(0,n.jsx)("strong",{children:"tabletserver"})}),(0,n.jsx)("td",{style:{textAlign:"center",verticalAlign:"middle"},rowspan:"10",children:"-"}),(0,n.jsx)("td",{children:"replicationBytesInPerSecond"}),(0,n.jsx)("td",{children:"The bytes of data write into follower replica for data sync."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"replicationBytesOutPerSecond"}),(0,n.jsx)("td",{children:"The bytes of data read from leader replica for data sync."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"leaderCount"}),(0,n.jsx)("td",{children:"The total number of leader replicas in this TabletServer."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"replicaCount"}),(0,n.jsx)("td",{children:"The total number of replicas (include follower replicas) in this TabletServer."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"writerIdCount"}),(0,n.jsx)("td",{children:"The writer id count"}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"delayedWriteCount"}),(0,n.jsx)("td",{children:"The delayed write count in this TabletServer."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"delayedFetchCount"}),(0,n.jsx)("td",{children:"The delayed fetch log operation count in this TabletServer."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"delayedWriteExpiresPerSecond"}),(0,n.jsx)("td",{children:"The delayed write operation expire count per second in this TabletServer."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"delayedFetchFromFollowerExpiresPerSecond"}),(0,n.jsx)("td",{children:"The delayed fetch log operation from follower expire count per second in this TabletServer."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"delayedFetchFromClientExpiresPerSecond"}),(0,n.jsx)("td",{children:"The delayed fetch log operation from client expire count per second in this TabletServer."}),(0,n.jsx)("td",{children:"Meter"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"request",children:"Request"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"30pt"},children:"Scope"}),(0,n.jsx)("th",{class:"text-left",style:{width:"150pt"},children:"Infix"}),(0,n.jsx)("th",{class:"text-left",style:{width:"80pt"},children:"Metrics"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"40pt"},children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"1",children:(0,n.jsx)("strong",{children:"coordinator"})}),(0,n.jsx)("td",{rowspan:"1",children:"request"}),(0,n.jsx)("td",{children:"requestQueueSize"}),(0,n.jsx)("td",{children:"The CoordinatorServer node network waiting queue size."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"8",children:"tabletserver"}),(0,n.jsx)("td",{rowspan:"1",children:"request"}),(0,n.jsx)("td",{children:"requestQueueSize"}),(0,n.jsx)("td",{children:"The TabletServer node network waiting queue size."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"7",children:(0,n.jsx)(t.p,{children:"request_productLog\nrequest_putKv\nrequest_lookup\nrequest_prefixLookup\nrequest_metadata"})}),(0,n.jsx)("td",{children:"requestsPerSecond"}),(0,n.jsx)("td",{children:"The total number of requests processed per second for each request type."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"errorsPerSecond"}),(0,n.jsx)("td",{children:"The total number of error requests processed per second for each request type."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"requestBytes"}),(0,n.jsx)("td",{children:"Size of requests for each request type."}),(0,n.jsx)("td",{children:"Histogram"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"totalTimeMs"}),(0,n.jsx)("td",{children:"The total time it takes for each request type, it's requestQueueTimeMs + requestProcessTimeMs + responseSendTimeMs."}),(0,n.jsx)("td",{children:"Histogram"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"requestProcessTimeMs"}),(0,n.jsx)("td",{children:"The time the current TabletServer node spends to process a request."}),(0,n.jsx)("td",{children:"Histogram"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"requestQueueTimeMs"}),(0,n.jsx)("td",{children:"The wait time spent by the request in the network waiting queue for each request type."}),(0,n.jsx)("td",{children:"Histogram"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"responseSendTimeMs"}),(0,n.jsx)("td",{children:"Time to send the response\tfor each request type."}),(0,n.jsx)("td",{children:"Histogram"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"6",children:"client"}),(0,n.jsx)("td",{rowspan:"6",children:"request"}),(0,n.jsx)("td",{children:"bytesInPerSecond"}),(0,n.jsx)("td",{children:"The data bytes return from another server per second."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"bytesOutPerSecond"}),(0,n.jsx)("td",{children:"The data bytes send from client to another server per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"requestsPerSecond"}),(0,n.jsx)("td",{children:"The requests count send from this client to another server per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"responsesPerSecond"}),(0,n.jsx)("td",{children:"The responses count return from another server per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"requestLatencyMs"}),(0,n.jsx)("td",{children:"The request latency."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"requestsInFlight"}),(0,n.jsx)("td",{children:"The in flight requests count send from client to another server."}),(0,n.jsx)("td",{children:"Gauge"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"tablebucket",children:"Table/Bucket"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"30pt"},children:"Scope"}),(0,n.jsx)("th",{class:"text-left",style:{width:"150pt"},children:"Infix"}),(0,n.jsx)("th",{class:"text-left",style:{width:"80pt"},children:"Metrics"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"40pt"},children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{rowspan:"39",children:(0,n.jsx)("strong",{children:"tabletserver"})}),(0,n.jsx)("td",{rowspan:"20",children:"table"}),(0,n.jsx)("td",{children:"messagesInPerSecond"}),(0,n.jsx)("td",{children:"The number of messages written per second to this table"}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"bytesInPerSecond"}),(0,n.jsx)("td",{children:"The number of bytes written per second to this table."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"bytesOutPerSecond"}),(0,n.jsx)("td",{children:"The number of bytes read per second from this table."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"totalProduceLogRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of produce log requests to write log to this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"failedProduceLogRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of failed produce log requests to write log to this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"totalFetchLogRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of fetch log requests to read log from this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"failedFetchLogRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of failed fetch log requests to read log from this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"totalPutKvRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of put kv requests to put kv to this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"failedPutKvRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of failed put kv requests to put kv to this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"totalLookupRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of lookup requests to lookup value by key from this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"failedLookupRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of failed lookup requests to lookup value by key from this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"totalLimitScanRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of limit scan requests to scan records with limit from this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"failedLimitScanRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of failed limit scan requests to scan records with limit from this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"totalPrefixLookupRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of prefix lookup requests to lookup value by prefix key from this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"failedPrefixLookupRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of failed prefix lookup requests to lookup value by prefix key from this table per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"remoteLogCopyBytesPerSecond"}),(0,n.jsx)("td",{children:"The bytes of log data copied to remote per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"remoteLogCopyRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of remote log copy requests to copy local log to remote per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"remoteLogCopyErrorPerSecond"}),(0,n.jsx)("td",{children:"The number of error remote log copy requests to copy local log to remote per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"remoteLogDeleteRequestsPerSecond"}),(0,n.jsx)("td",{children:"The number of delete remote log requests to delete remote log after log ttl per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"remoteLogDeleteErrorPerSecond"}),(0,n.jsx)("td",{children:"The number of failed delete remote log requests to delete remote log after log ttl per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"7",children:"table_bucket"}),(0,n.jsx)("td",{children:"inSyncReplicasCount"}),(0,n.jsx)("td",{children:"The inSync replicas count of this table bucket."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"underMinIsr"}),(0,n.jsx)("td",{children:"If this bucket is under min isr, this value is 1, otherwise 0."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"underReplicated"}),(0,n.jsx)("td",{children:"If this bucket is under replication factor, this value is 1, otherwise 0."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"atMinIsr"}),(0,n.jsx)("td",{children:"If this bucket is at min isr, this value is 1, otherwise 0."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"isrExpandsPerSecond"}),(0,n.jsx)("td",{children:"The number of isr expands per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"isrShrinksPerSecond"}),(0,n.jsx)("td",{children:"The number of isr shrinks per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"failedIsrUpdatesPerSecond"}),(0,n.jsx)("td",{children:"The failed isr updates per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"5",children:"table_bucket_log"}),(0,n.jsx)("td",{children:"numSegments"}),(0,n.jsx)("td",{children:"The number of segments in local storage for this table bucket."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"endOffset"}),(0,n.jsx)("td",{children:"The end offset in local storage for this table bucket."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"size"}),(0,n.jsx)("td",{children:"The total log sizes in local storage for this table bucket."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"flushPerSecond"}),(0,n.jsx)("td",{children:"The log flush count per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"flushLatencyMs"}),(0,n.jsx)("td",{children:"The log flush latency in ms."}),(0,n.jsx)("td",{children:"Histogram"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"3",children:"table_bucket_remoteLog"}),(0,n.jsx)("td",{children:"numSegments"}),(0,n.jsx)("td",{children:"The number of segments in remote storage for this table bucket."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"endOffset"}),(0,n.jsx)("td",{children:"The end offset in remote storage for this table bucket."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"size"}),(0,n.jsx)("td",{children:"The number of bytes written per second to this table."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"4",children:"table_bucket_kv"}),(0,n.jsx)("td",{children:"preWriteBufferFlushPerSecond"}),(0,n.jsx)("td",{children:"The kv pre-write buffer flush count per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"preWriteBufferFlushLatencyMs"}),(0,n.jsx)("td",{children:"The kv pre-write buffer latency in ms."}),(0,n.jsx)("td",{children:"Histogram"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"preWriteBufferTruncateAsDuplicatedPerSecond"}),(0,n.jsx)("td",{children:"The number of kv pre-write buffer truncate due to the batch duplicated per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"preWriteBufferTruncateAsErrorPerSecond"}),(0,n.jsx)("td",{children:"The number of kv pre-write buffer truncate due to the error happened when writing cdc to log per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"1",children:"table_bucket_kv_snapshot"}),(0,n.jsx)("td",{children:"latestSnapshotSize"}),(0,n.jsx)("td",{children:"The latest kv snapshot size in bytes for this table bucket."}),(0,n.jsx)("td",{children:"Gauge"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"flink-connector-standard-metrics",children:"Flink connector standard metrics"}),"\n",(0,n.jsxs)(t.p,{children:["When using Flink to read and write, Fluss has implemented some key standard Flink connector metrics\nto measure the source latency and output of sink, see ",(0,n.jsx)(t.a,{href:"https://cwiki.apache.org/confluence/display/FLINK/FLIP-33%3A+Standardize+Connector+Metrics",children:"FLIP-33: Standardize Connector Metrics"}),".\nFlink source / sink metrics implemented are listed here."]}),"\n",(0,n.jsxs)(t.p,{children:["How to use flink metrics, you can see ",(0,n.jsx)(t.a,{href:"https://nightlies.apache.org/flink/flink-docs-release-1.20/docs/ops/metrics/#system-metrics",children:"flink metrics"})," for more details."]}),"\n",(0,n.jsx)(t.h4,{id:"source-metrics",children:"Source Metrics"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"225pt"},children:"Metrics Name"}),(0,n.jsx)("th",{class:"text-left",style:{width:"165pt"},children:"Level"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"70pt"},children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"currentEmitEventTimeLag"}),(0,n.jsx)("td",{children:"Flink Source Operator"}),(0,n.jsx)("td",{children:"Time difference between sending the record out of source and file creation."}),(0,n.jsx)("td",{children:"Gauge"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"currentFetchEventTimeLag"}),(0,n.jsx)("td",{children:"Flink Source Operator"}),(0,n.jsx)("td",{children:"Time difference between reading the data file and file creation."}),(0,n.jsx)("td",{children:"Gauge"})]})]})]}),"\n",(0,n.jsx)(t.h4,{id:"sink-metrics",children:"Sink Metrics"}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{class:"text-left",style:{width:"225pt"},children:"Metrics Name"}),(0,n.jsx)("th",{class:"text-left",style:{width:"165pt"},children:"Level"}),(0,n.jsx)("th",{class:"text-left",style:{width:"300pt"},children:"Description"}),(0,n.jsx)("th",{class:"text-left",style:{width:"70pt"},children:"Type"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"numBytesOut"}),(0,n.jsx)("td",{children:"Table"}),(0,n.jsx)("td",{children:"The total number of output bytes."}),(0,n.jsx)("td",{children:"Counter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"numBytesOutPerSecond"}),(0,n.jsx)("td",{children:"Table"}),(0,n.jsx)("td",{children:"The output bytes per second."}),(0,n.jsx)("td",{children:"Meter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"numRecordsOut"}),(0,n.jsx)("td",{children:"Table"}),(0,n.jsx)("td",{children:"The total number of output records."}),(0,n.jsx)("td",{children:"Counter"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"numRecordsOutPerSecond"}),(0,n.jsx)("td",{children:"Table"}),(0,n.jsx)("td",{children:"The output records per second."}),(0,n.jsx)("td",{children:"Meter"})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>l});var s=r(6540);const n={},d=s.createContext(n);function i(e){const t=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);