"use strict";(self.webpackChunkfluss_website=self.webpackChunkfluss_website||[]).push([[1873],{93:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"table-design/table-types/pk-table/merge-engines/versioned","title":"Versioned Merge Engine","description":"\x3c!--","source":"@site/docs/table-design/table-types/pk-table/merge-engines/versioned.md","sourceDirName":"table-design/table-types/pk-table/merge-engines","slug":"/table-design/table-types/pk-table/merge-engines/versioned","permalink":"/docs/next/table-design/table-types/pk-table/merge-engines/versioned","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/fluss/edit/main/website/docs/table-design/table-types/pk-table/merge-engines/versioned.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_label":"Versioned","title":"Versioned Merge Engine","sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"FirstRow","permalink":"/docs/next/table-design/table-types/pk-table/merge-engines/first-row"},"next":{"title":"Bucketing","permalink":"/docs/next/table-design/data-distribution/bucketing"}}');var t=i(4848),r=i(8453);const l={sidebar_label:"Versioned",title:"Versioned Merge Engine",sidebar_position:4},a="Versioned Merge Engine",o={},d=[{value:"Version Column",id:"version-column",level:3},{value:"Example:",id:"example",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"versioned-merge-engine",children:"Versioned Merge Engine"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Versioned Merge Engine"})," enables data updates based on version numbers or event timestamps. It ensures that only the row with the highest version number (or event timestamp) for a given primary key is retained. This mechanism is particularly useful for deduplicating or merging out-of-order data while guaranteeing eventual consistency with the upstream source."]}),"\n",(0,t.jsxs)(n.p,{children:["By setting ",(0,t.jsx)(n.code,{children:"'table.merge-engine' = 'versioned'"}),", users can update data based on a configured version column. Updates are performed when the latest value of the specified field is greater than or equal to the stored value. If the incoming value is less than the stored value or is null, no update will occur."]}),"\n",(0,t.jsxs)(n.p,{children:["This feature is especially valuable as a replacement for ",(0,t.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-docs-release-1.20/docs/dev/table/sql/queries/deduplication/",children:"Deduplication"})," transformations in streaming computations. It simplifies workflows, reduces complexity, and improves overall efficiency."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["When using the ",(0,t.jsx)(n.code,{children:"versioned"})," merge engine, keep the following limitations in mind:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"UPDATE"})," and ",(0,t.jsx)(n.code,{children:"DELETE"})," statements are not supported."]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Partial updates are not supported."})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"UPDATE_BEFORE"})," and ",(0,t.jsx)(n.code,{children:"DELETE"})," changelog events are ignored automatically."]})}),"\n"]})]}),"\n",(0,t.jsx)(n.h3,{id:"version-column",children:"Version Column"}),"\n",(0,t.jsx)(n.p,{children:"The version column is a column in the table that stores the version number (or event timestamp) of the data record.\nWhen enabling the versioned merge engine, the version column must be explicitly specified using the property:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"'table.merge-engine' = 'versioned',\n'table.merge-engine.versioned.ver-column' = '<column_name>'\n"})}),"\n",(0,t.jsx)(n.p,{children:"The version column can be of the following data types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"INT"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"BIGINT"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"TIMESTAMP"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TIMESTAMP(p)"})," (with precision)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TIMESTAMP_LTZ"})," (timestamp with local time zone)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TIMESTAMP_LTZ(p)"})," (timestamp with local time zone and precision)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'title="Flink SQL"',children:"CREATE TABLE VERSIONED (\n    a INT NOT NULL PRIMARY KEY NOT ENFORCED,\n    b STRING, \n    ts BIGINT\n ) WITH (\n    'table.merge-engine' = 'versioned',\n    'table.merge-engine.versioned.ver-column' = 'ts'\n);\n\nINSERT INTO VERSIONED (a, b, ts) VALUES (1, 'v1', 1000);\n\n-- insert data with ts < 1000, no update will be made\nINSERT INTO VERSIONED (a, b, ts) VALUES (1, 'v2', 999);\nSELECT * FROM VERSIONED WHERE a = 1;\n-- Output\n-- +---+-----+------+\n-- | a | b   | ts   |\n-- +---+-----+------+\n-- | 1 | v1  | 1000 |\n-- +---+-----+------+\n\n\n-- insert data with ts > 1000, update will be made\nINSERT INTO VERSIONED (a, b, ts) VALUES (1, 'v3', 2000);\nSELECT * FROM VERSIONED WHERE a = 1;\n-- Output\n-- +---+-----+------+\n-- | a | b   | ts   |\n-- +---+-----+------+\n-- | 1 | v3  | 2000 |\n-- +---+-----+------+\n\n-- insert data with ts = null, no update will be made\nINSERT INTO VERSIONED (a, b, ts) VALUES (1, 'v4', CAST(null as BIGINT));\nSELECT * FROM VERSIONED WHERE a = 1;\n-- Output\n-- +---+-----+------+\n-- | a | b   | ts   |\n-- +---+-----+------+\n-- | 1 | v3  | 2000 |\n-- +---+-----+------+\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(6540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);