<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fluss.apache.org/blog/</id>
    <title>Apache Fluss™ (incubating) Blog</title>
    <updated>2025-07-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fluss.apache.org/blog/"/>
    <subtitle>Apache Fluss™ (incubating) Blog</subtitle>
    <icon>https://fluss.apache.org/img/logo/fluss_favicon.svg</icon>
    <entry>
        <title type="html"><![CDATA[Fluss Joins the Apache Incubator]]></title>
        <id>https://fluss.apache.org/blog/fluss-joins-asf/</id>
        <link href="https://fluss.apache.org/blog/fluss-joins-asf/"/>
        <updated>2025-07-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>On June 5th, Fluss, the next-generation streaming storage project open-sourced and donated by Alibaba, successfully passed the <a href="https://lists.apache.org/thread/mnol4wxovpz6klt196d3x239t4mp6z5o" target="_blank" rel="noopener noreferrer">vote</a> and officially became an incubator project of the Apache Software Foundation (ASF). This marks a significant milestone in the development of the Fluss community, symbolizing that the project has entered a new phase that is more open,
neutral, and standardized. Moving forward, Fluss will leverage the ASF ecosystem to accelerate the building of a global developer community, continuously driving innovation and adoption of next-generation real-time data infrastructure.</p>
<p><img decoding="async" loading="lazy" alt="ASF" src="https://fluss.apache.org/assets/images/asf-0621eab6f6aadbdfebfc5e24a36667c1.png" width="1231" height="631" class="img_ev3q"></p>
<p>The Fluss community has recently completed all donation procedures and successfully transferred the project to the Apache Software Foundation.
During the keynote speech at Flink Forward Asia 2025, held on July 3rd in Singapore, project creator Jark Wu officially announced the exciting news,
sharing the new <a href="https://github.com/apache/fluss/" target="_blank" rel="noopener noreferrer">repository address</a> and the <a href="https://fluss.apache.org/" target="_blank" rel="noopener noreferrer">official website domain</a>.</p>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/announcement-73511437ca09935c2c70c5339a4e6bc7.png" width="1203" height="800" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-fluss">What is Fluss?<a href="https://fluss.apache.org/blog/fluss-joins-asf/#what-is-fluss" class="hash-link" aria-label="Direct link to What is Fluss?" title="Direct link to What is Fluss?">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Architecture" src="https://fluss.apache.org/assets/images/architecture-0d8148aebd6d7b8c666e2484f2e4ce8c.png" width="1218" height="552" class="img_ev3q"></p>
<p>Apache Fluss (incubating) is a next-generation streaming storage designed for real-time analytics scenarios.
It aims to address the high costs and inefficiencies of traditional streaming storage technologies in stream processing and Lakehouse architectures.
It offers the following core features:</p>
<ul>
<li><strong>Columnar Streaming Storage:</strong> Supports real-time streaming read and write with millisecond-level latency. Real-time streaming data is stored in the Apache Arrow columnar format to leverage query pushdown technologies such as column pruning and partition pruning during streaming read. It improves read performance by up to 10 times and reduces network costs.</li>
<li><strong>Real-Time Updates and Lookup Queries:</strong> Innovatively introduces real-time update capabilities into stream storage. Through high-performance streaming updates, partial updates, changelog feed, key-value lookup, and DeltaJoin features, it collaborates efficiently with Flink to build a cost-effective, real-time streaming data warehouse.</li>
<li><strong>Streaming Lakehouse:</strong> Achieves unified storage of data lakehouse and data streams, enabling data sharing between them. The Lakehouse provides low-cost historical data support for streams, while streams inject real-time data capabilities into the Lakehouse, delivering real-time data analysis experiences to the Lakehouse.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-two-year-journey">The Two-Year Journey<a href="https://fluss.apache.org/blog/fluss-joins-asf/#the-two-year-journey" class="hash-link" aria-label="Direct link to The Two-Year Journey" title="Direct link to The Two-Year Journey">​</a></h3>
<p>In July 2023, the Flink team at Alibaba Cloud launched the Fluss project.
The name <strong>"Fluss"</strong> is derived from the abbreviation of "<strong>Fl</strong>ink <strong>U</strong>nified <strong>S</strong>treaming <strong>S</strong>torage", signifying its mission to build a unified streaming storage foundation for Apache Flink.
Coincidentally, "Fluss" means <strong>"river"</strong> in German, symbolizing the continuous flow of data.</p>
<p>After more than a year of internal incubation and refinement, Alibaba officially announced the open-sourcing of the Fluss project on November 29, 2024, during the keynote speech at Flink Forward Asia 2024 in Shanghai.
Since then, Fluss has embarked on a path of diverse and international development, attracting contributions from more than 60 developers worldwide.
The community’s activity has been steadily growing, with a major version released approximately every three months.</p>
<p>At the same time, Fluss has achieved large-scale adoption within Alibaba Group.
Currently, it supports <strong>data scales of over 3 PB</strong>, with a cluster <strong>throughput peak of 40 GB/s</strong>, and a maximum single-table <strong>lookup query QPS of up to 500,000 per second</strong>, and single-table data volume <strong>reaching up to 500 billion rows</strong>.
In key business scenarios such as log collection and analysis, search recommendation, and real-time data warehouses, Fluss has demonstrated outstanding performance and capabilities.</p>
<p><img decoding="async" loading="lazy" alt="Alibaba Production" src="https://fluss.apache.org/assets/images/alibaba-84407d53e3ba58ed346f59ed45f7d834.png" width="1195" height="338" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-apache">Why Apache?<a href="https://fluss.apache.org/blog/fluss-joins-asf/#why-apache" class="hash-link" aria-label="Direct link to Why Apache?" title="Direct link to Why Apache?">​</a></h3>
<p>The Apache Software Foundation (ASF) is the cradle of global open-source big data technologies, nurturing numerous world-changing projects such as Hadoop, Spark, Iceberg, Kafka, and Flink. Fluss looks forward to joining the ASF and becoming a part of the movement that shapes the future of real-time infrastructure. At the same time, Fluss has a strong need for deep integration with these Apache projects, and joining the ASF will accelerate the integration process within the ecosystem. More importantly, the ASF's core values of openness, collaboration, and neutrality align closely with Fluss's vision. By joining the Apache Incubator, we align with this spirit and gain access to a larger community, better governance, and long-term sustainability.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="special-thanks">Special Thanks<a href="https://fluss.apache.org/blog/fluss-joins-asf/#special-thanks" class="hash-link" aria-label="Direct link to Special Thanks" title="Direct link to Special Thanks">​</a></h3>
<p>Special thanks to the Fluss incubation mentors for their valuable support and guidance during the project's journey into the ASF Incubator.</p>
<ul>
<li><strong>@Yu Li (Champion):</strong> PMC member of Flink and HBase projects, experienced mentor of multiple open-source projects, and successfully guided top-level projects such as Apache Paimon and Apache Celeborn.</li>
<li><strong>@Jingsong Lee:</strong> Chair of the Apache Paimon PMC and member of the Apache Flink PMC.</li>
<li><strong>@Zili Chen:</strong> A seasoned mentor of multiple open-source projects, PMC member of Pulsar, Zookeeper and Curator. He also serves as a member of the Apache Board in 2025.</li>
<li><strong>@Becket Qin:</strong> An active mentor of multiple open-source projects and PMC member of projects including Apache Flink and Apache Kafka.</li>
<li><strong>@Jean-Baptiste Onofré:</strong> Karaf PMC Chair, PMC on ACE, ActiveMQ, Archiva, Aries, Beam, Brooklyn, Camel, Felix, Incubator. He is also the incubation champion for Apache Polaris.</li>
</ul>
<p>We would also like to express our gratitude to all contributors of the Fluss community!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="join-the-surfing">Join the Surfing<a href="https://fluss.apache.org/blog/fluss-joins-asf/#join-the-surfing" class="hash-link" aria-label="Direct link to Join the Surfing" title="Direct link to Join the Surfing">​</a></h3>
<p>We sincerely invite developers and users who are interested in Fluss to join our open-source community and help drive the project forward. We look forward to your participation!</p>
<ul>
<li>GitHub Repository: <a href="https://github.com/apache/fluss/" target="_blank" rel="noopener noreferrer">https://github.com/apache/fluss/</a>  (give it some ❤️ via ⭐)</li>
<li>Official Website: <a href="https://fluss.apache.org/" target="_blank" rel="noopener noreferrer">https://fluss.apache.org/</a></li>
<li>Slack: <a href="https://join.slack.com/t/apache-fluss/shared_invite/zt-33wlna581-QAooAiCmnYboJS8D_JUcYw" target="_blank" rel="noopener noreferrer">Apache Fluss </a></li>
<li>Mailing List: <code>dev@fluss.apache.org</code> (by sending any mail to <code>dev-subscribe@fluss.apache.org</code> to subscribe)</li>
</ul>]]></content>
        <author>
            <name>Jark Wu</name>
            <uri>https://github.com/wuchong</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Fluss Java Client: A Deep Dive]]></title>
        <id>https://fluss.apache.org/blog/fluss-java-client/</id>
        <link href="https://fluss.apache.org/blog/fluss-java-client/"/>
        <updated>2025-07-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Banner" src="https://fluss.apache.org/assets/images/banner-9b4e9683efcde75c4961249525c8f269.png" width="1477" height="975" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="https://fluss.apache.org/blog/fluss-java-client/#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2>
<p>Apache Fluss is a streaming data storage system built for real-time analytics, serving as a low-latency data layer in modern data Lakehouses.
It supports sub-second streaming reads and writes, storing data in a columnar format for efficiency, and offers two flexible table types: <strong>append-only Log Tables</strong> and <strong>updatable Primary Key Tables</strong>.
In practice, this means Fluss can ingest high-throughput event streams <em>(using log tables)</em> while also maintaining <em>up-to-date</em> reference data or state <em>(using primary key tables)</em>, a combination ideal for
scenarios like IoT, where you might stream sensor readings and look up information for those sensors in real-time, without
the need for external K/V stores.</p>
<p>In this tutorial, we'll introduce the <strong>Fluss Java Client</strong> by walking through a simple home IoT system example.
We will use <code>Fluss's Admin client</code> to create a primary key table for sensor information and a log table for sensor readings, then use the client
to write data to these tables and read/enrich the streaming sensor data.</p>
<p>By the end, you'll see how a sensor reading can be ingested into a log table and immediately enriched with information from a primary key table (essentially performing a real-time lookup join for streaming data enrichment).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="preflight-check">Preflight Check<a href="https://fluss.apache.org/blog/fluss-java-client/#preflight-check" class="hash-link" aria-label="Direct link to Preflight Check" title="Direct link to Preflight Check">​</a></h2>
<p>The full source code can be found <a href="https://github.com/ververica/ververica-fluss-examples/tree/main/fluss-java-client" target="_blank" rel="noopener noreferrer">here</a>.</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token function" style="color:rgb(220, 220, 170)">docker</span><span class="token plain"> compose up</span><br></span></code></pre></div></div>
<p>The first thing we need to do is establish a connection to the Fluss cluster.
The <code>Connection</code> is the main entry point for the Fluss client, from which we obtain an <code>Admin</code> (for metadata operations) and Table instances (for data operations)</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">// Configure connection to Fluss cluster</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">Configuration</span><span class="token plain"> conf </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Configuration</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">conf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"bootstrap.servers"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"localhost:9123"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)">// Fluss server endpoint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">Connection</span><span class="token plain"> connection </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">ConnectionFactory</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">createConnection</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">conf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">// Get Admin client for managing databases and tables</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">Admin</span><span class="token plain"> admin </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> connection</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getAdmin</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p>The above code snippet shows the bare minimum requirements for connecting and interacting with a Fluss Cluster.
For our example we will use the following mock data - to keep things simple - which you can find below:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">final</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">List</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> readings </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">15</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">22.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">45.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1013.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">87.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23.1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">44.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1013.1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">88.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">45</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">21.8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">46.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1012.9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">86.9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">24.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">43.8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1013.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">89.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">15</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">22.9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">45.3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1013.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">87.8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23.4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">44.9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1013.3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">88.3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">45</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">21.7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">46.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1012.8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">86.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">11</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">24.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">43.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1013.6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">89.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">11</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">15</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">45.1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1013.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">87.9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">11</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">22.6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">45.7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1013.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">87.4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">final</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">List</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> sensorInfos </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Outdoor Temp Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Roof"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">15</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OK"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">15</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Main Lobby Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Humidity"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Lobby"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"ERROR"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Server Room Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Server Room"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"MAINTENANCE"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">45</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Warehouse Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Pressure"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Warehouse"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OK"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Conference Room Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Humidity"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Conference Room"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">25</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OK"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">15</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Office 1 Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Office 1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">18</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"LOW_BATTERY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Office 2 Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Humidity"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Office 2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">12</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OK"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">45</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Lab Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Lab"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"ERROR"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">11</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Parking Lot Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Pressure"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Parking Lot"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">14</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OK"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">11</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">15</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Backyard Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Backyard"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OK"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">11</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)">// SEND SOME UPDATES</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Main Lobby Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Humidity"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Lobby"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"ERROR"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">9</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">48</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Lab Sensor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Lab"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2024</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"ERROR"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">23</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">11</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="operating-the-cluster">Operating The Cluster<a href="https://fluss.apache.org/blog/fluss-java-client/#operating-the-cluster" class="hash-link" aria-label="Direct link to Operating The Cluster" title="Direct link to Operating The Cluster">​</a></h2>
<p>Let's create a database for our IoT data, and within it define two tables:</p>
<ul>
<li><strong>Sensor Readings Table:</strong> A log table that will collect time-series readings from sensors (like temperature and humidity readings). This table is append-only (new records are added continuously, with no updates/deletes) which is ideal for immutable event streams</li>
<li><strong>Sensor Information Table:</strong> A primary key table that stores metadata for each sensor (like sensor ID, location, type). Each <code>sensorId</code> will be unique and acts as the primary key. This table can be updated as sensor info changes (e.g., sensor relocated or reconfigured).</li>
</ul>
<p>Using the Admin client, we can programmatically create these tables.</p>
<p>First, we'll ensure the database exists (creating it if not), then define schemas for each table and create them:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="schema-definitions">Schema Definitions<a href="https://fluss.apache.org/blog/fluss-java-client/#schema-definitions" class="hash-link" aria-label="Direct link to Schema Definitions" title="Direct link to Schema Definitions">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="log-table-sensor-readings">Log table (sensor readings)<a href="https://fluss.apache.org/blog/fluss-java-client/#log-table-sensor-readings" class="hash-link" aria-label="Direct link to Log table (sensor readings)" title="Direct link to Log table (sensor readings)">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">static</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Schema</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">getSensorReadingsSchema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Schema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">newBuilder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"sensorId"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"timestamp"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">TIMESTAMP</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">DOUBLE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"humidity"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">DOUBLE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"pressure"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">DOUBLE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"batteryLevel"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">DOUBLE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">build</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="primary-key-table-sensor-information">Primary Key table (sensor information)<a href="https://fluss.apache.org/blog/fluss-java-client/#primary-key-table-sensor-information" class="hash-link" aria-label="Direct link to Primary Key table (sensor information)" title="Direct link to Primary Key table (sensor information)">​</a></h4>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">static</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Schema</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">getSensorInfoSchema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Schema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">newBuilder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"sensorId"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"name"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"type"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"location"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"installationDate"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">DATE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"state"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">column</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"lastUpdated"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DataTypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">TIMESTAMP</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">primaryKey</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"sensorId"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">             </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token operator" style="color:rgb(212, 212, 212)">--</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Define</span><span class="token plain"> a </span><span class="token class-name" style="color:rgb(78, 201, 176)">Primary</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Key</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">build</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="table-creation">Table Creation<a href="https://fluss.apache.org/blog/fluss-java-client/#table-creation" class="hash-link" aria-label="Direct link to Table Creation" title="Direct link to Table Creation">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">void</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">setupTables</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">Admin</span><span class="token plain"> admin</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">throws</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">ExecutionException</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">InterruptedException</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token class-name" style="color:rgb(78, 201, 176)">TableDescriptor</span><span class="token plain"> readingsDescriptor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">TableDescriptor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">schema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token function" style="color:rgb(220, 220, 170)">getSensorReadingsSchema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">distributedBy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"sensorId"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">comment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"This is the sensor readings table"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">build</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)">// drop the tables or ignore if they exist</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    admin</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">dropTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">readingsTablePath</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    admin</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">dropTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">sensorInfoTablePath</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">     </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    admin</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">createTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">readingsTablePath</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> readingsDescriptor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token class-name" style="color:rgb(78, 201, 176)">TableDescriptor</span><span class="token plain"> sensorInfoDescriptor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">TableDescriptor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">schema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token function" style="color:rgb(220, 220, 170)">getSensorInfoSchema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">distributedBy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"sensorId"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">comment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"This is the sensor information table"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">build</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">     </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    admin</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">createTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">sensorInfoTablePath</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> sensorInfoDescriptor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre></div></div>
<p>We specify a distribution with <code>.distributedBy(3, "sensorId")</code>.
Fluss tables are partitioned into buckets (similar to partitions in Kafka topics) for scalability.
Here we use 3 buckets, meaning data gets distributed across 3 buckets. Multiple buckets allow for higher throughput or to parallelize reads/writes.
If using multiple buckets, Fluss would hash on the bucket key (<code>sensorId</code> in our case) to assign records to buckets.</p>
<p>For the <code>sensor_readings</code> table, we define a schema without any primary key. In Fluss, a table created without a primary key clause is a Log Table.
A log table only supports appending new records (no updates or deletes), making it perfect for immutable time-series data or logs.</p>
<p>In the log table, specifying a bucket key like <code>sensorId</code> ensures all readings from the same sensor end up to the same bucket providing strict ordering guarantees.</p>
<p>With our tables created let's go and write some data.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="table-writes">Table Writes<a href="https://fluss.apache.org/blog/fluss-java-client/#table-writes" class="hash-link" aria-label="Direct link to Table Writes" title="Direct link to Table Writes">​</a></h2>
<p>With our tables in place, let's insert some data using the Fluss Java API.
The client allows us to write or read data from it.
We'll demonstrate two patterns:</p>
<ul>
<li><strong>Upserting</strong> into the primary key table (sensor information).</li>
<li><strong>Appending</strong> to the log table (sensor readings).</li>
</ul>
<p>Fluss provides specialized writer interfaces for each table type: an <strong>UpsertWriter</strong> for primary key tables and an <strong>AppendWriter</strong> for log tables.
Under the hood, the Fluss client currently expects data as <strong>GenericRow</strong> objects (a generic row data format).</p>
<blockquote>
<p><strong>Note:</strong> Internally Fluss uses <strong>InternalRow</strong> as an optimized, binary representation of data for better performance and memory efficiency.
<strong>GenericRow</strong> is a generic implementation of InternalRow. This allows developers to interact with data easily while Fluss processes it efficiently using the underlying binary format.</p>
</blockquote>
<p>Since we are creating <strong>Pojos</strong> though this means that we need to convert these into a GenericRow in order to write them into Fluss.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">static</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">GenericRow</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">energyReadingToRow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token plain"> reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token class-name" style="color:rgb(78, 201, 176)">GenericRow</span><span class="token plain"> row </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">GenericRow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getDeclaredFields</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">sensorId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">TimestampNtz</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">fromLocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">timestamp</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">temperature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">humidity</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">pressure</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">batteryLevel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">static</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">GenericRow</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">sensorInfoToRow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token plain"> sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token class-name" style="color:rgb(78, 201, 176)">GenericRow</span><span class="token plain"> row </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">GenericRow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getDeclaredFields</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">sensorId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">BinaryString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">fromString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">BinaryString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">fromString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">BinaryString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">fromString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">location</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:rgb(86, 156, 214)">int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">installationDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">toEpochDay</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">BinaryString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">fromString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setField</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">TimestampNtz</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">fromLocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">lastUpdated</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain">     </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre></div></div>
<p><strong>Note:</strong> For certain data types like <code>String</code> or <code>LocalDateTime</code> we need to use certain functions like
<code>BinaryString.fromString("string_value")</code> or <code>TimestampNtz.fromLocalDateTime(datetime)</code> otherwise you might
come across some conversion exceptions.</p>
<p>Let's start by writing data to the <code>Log Table</code>. This requires getting an <code>AppendWriter</code> as follows:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Creating table writer for table {} ..."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">AppUtils</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token constant" style="color:rgb(100, 102, 149)">SENSOR_READINGS_TBL</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">Table</span><span class="token plain"> table </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> connection</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">AppUtils</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getSensorReadingsTablePath</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">AppendWriter</span><span class="token plain"> writer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> table</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">newAppend</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">createWriter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">AppUtils</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">readings</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">forEach</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">reading </span><span class="token operator" style="color:rgb(212, 212, 212)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token class-name" style="color:rgb(78, 201, 176)">GenericRow</span><span class="token plain"> row </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">energyReadingToRow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    writer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">append</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">writer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">flush</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Sensor Readings Written Successfully."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p>At this point we have successfully written 10 sensor readings to our table.</p>
<p>Next, let's write data to the <code>Primary Key Table</code>. This requires getting an <code>UpsertWriter</code> as follows:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Creating table writer for table {} ..."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">AppUtils</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token constant" style="color:rgb(100, 102, 149)">SENSOR_INFORMATION_TBL</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">Table</span><span class="token plain"> sensorInfoTable </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> connection</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">AppUtils</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getSensorInfoTablePath</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">UpsertWriter</span><span class="token plain"> upsertWriter </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> sensorInfoTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">newUpsert</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">createWriter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">AppUtils</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">sensorInfos</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">forEach</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">sensorInfo </span><span class="token operator" style="color:rgb(212, 212, 212)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token class-name" style="color:rgb(78, 201, 176)">GenericRow</span><span class="token plain"> row </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">sensorInfoToRow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    upsertWriter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">upsert</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">upsertWriter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">flush</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p>At this point we have successfully written 10 sensor information records to our table, because
updates will be handled on the primary key and merged.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="scans--lookups">Scans &amp; Lookups<a href="https://fluss.apache.org/blog/fluss-java-client/#scans--lookups" class="hash-link" aria-label="Direct link to Scans &amp; Lookups" title="Direct link to Scans &amp; Lookups">​</a></h2>
<p>Now comes the real-time data enrichment part of our example.
We want to simulate a process where each incoming sensor reading is immediately looked up against the sensor information table to add context (like location and type) to the raw reading.
This is a common pattern in streaming systems, often achieved with lookup joins.</p>
<p>With the Fluss Java client, we can do this by combining a <strong>log scanner on the readings table</strong> with <strong>point lookups on the sensor information table</strong>.</p>
<p>To consume data from a Fluss table, we use a *<em>Scanner</em>.
For a log table, Fluss provides a <strong>LogScanner</strong> that allows us to <strong>subscribe to one or more buckets</strong> and poll for new records.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token class-name" style="color:rgb(78, 201, 176)">LogScanner</span><span class="token plain"> logScanner </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> readingsTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">newScan</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">         </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">createLogScanner</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token class-name" style="color:rgb(78, 201, 176)">Lookuper</span><span class="token plain"> sensorInforLookuper </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> sensorInfoTable</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">newLookup</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">createLookuper</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p>We set up a scanner on the <code>sensor_readings</code> table, and next we need to subscribe to all its buckets, and then poll for any available records:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> numBuckets </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> readingsTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getTableInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getNumBuckets</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain"> numBuckets</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"> i</span><span class="token operator" style="color:rgb(212, 212, 212)">++</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">     </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Subscribing to Bucket {}."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    logScanner</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">subscribeFromBeginning</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre></div></div>
<p>Start polling for records. For each incoming record we will use the <strong>Lookuper</strong> to <code>lookup</code> sensor information from the primary key table,
and creating a <strong>SensorReadingEnriched</strong> record.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Polling for records..."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token class-name" style="color:rgb(78, 201, 176)">ScanRecords</span><span class="token plain"> scanRecords </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> logScanner</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">poll</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">Duration</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">ofSeconds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">TableBucket</span><span class="token plain"> bucket </span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> scanRecords</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">buckets</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">ScanRecord</span><span class="token plain"> record </span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> scanRecords</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">records</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token class-name" style="color:rgb(78, 201, 176)">InternalRow</span><span class="token plain"> row </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> record</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getRow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Received reading from sensor '{}' at '{}'."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getInt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getTimestampNtz</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">toString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Performing lookup to get the information for sensor '{}'. "</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getInt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token class-name" style="color:rgb(78, 201, 176)">LookupResult</span><span class="token plain"> lookupResult </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> sensorInforLookuper</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">lookup</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token plain"> sensorInfo </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> lookupResult</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getRowList</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">stream</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">map</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">r </span><span class="token operator" style="color:rgb(212, 212, 212)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getInt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">toString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">toString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">toString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">ofEpochDay</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getInt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">toString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">parse</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getTimestampNtz</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">toString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> formatter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">findFirst</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Retrieved information for '{}' with id: {}"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">sensorId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token plain"> reading </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getInt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token class-name" style="color:rgb(78, 201, 176)">LocalDateTime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">parse</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getTimestampNtz</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">toString</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> formatter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getDouble</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getDouble</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getDouble</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">getDouble</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReadingEnriched</span><span class="token plain"> readingEnriched </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SensorReadingEnriched</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">sensorId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">timestamp</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">temperature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">humidity</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">pressure</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    reading</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">batteryLevel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">location</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    sensorInfo</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Bucket: {} - {}"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> bucket</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> readingEnriched</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            logger</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"---------------------------------------"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre></div></div>
<p>Let's summarize what's happening here:</p>
<ul>
<li>We create a LogScanner for the <code>sensor_readings</code> table using <em>table.newScan().createLogScanner()</em>.</li>
<li>We subscribe to each bucket of the table from the beginning (offset 0). Subscribing <code>from beginning</code> means we'll read all existing data from the start; alternatively, one could subscribe from the latest position to only get new incoming data or based on other attributes like time. In our case, since we just inserted data, from-beginning will capture those inserts.</li>
<li>We then call <code>poll(Duration)</code> on the scanner to retrieve available records, waiting up to the given timeout (1 second here). This returns a <code>ScanRecords</code> batch containing any records that were present. We iterate over each <code>TableBucket</code> and then over each <code>ScanRecord</code> within that bucket.</li>
<li>For each record, we extract the fields via the InternalRow interface (which provides typed access to each column in the row) and <strong>convert them into a Pojo</strong>.</li>
<li>Next, for each reading, we perform a <strong>lookup</strong> on the <strong>sensor_information</strong> table to get the sensor's info. We construct a key (GenericRow with just the sensor_id) and use <strong>sensorTable.newLookup().createLookuper().lookup(key)</strong>. This performs a point lookup by primary key and returns a <code>LookupResult future</code>; we call <code>.get()</code> to get the result synchronously. If present, we retrieve the InternalRow of the sensor information and <strong>convert it into a Pojo</strong>.</li>
<li>We then combine the data: logging an enriched message that includes the sensor's information alongside the reading values.</li>
</ul>
<p>Fluss's lookup API gives us quick primary-key retrieval from a table, which is exactly what we need to enrich the streaming data.
In a real application, this enrichment could be done on the fly in a streaming job (and indeed <strong>Fluss is designed to support high-QPS lookup joins in real-time pipelines</strong>), but here we're simulating it with client calls for clarity.</p>
<p>If you run the above code found <a href="https://github.com/ververica/ververica-fluss-examples" target="_blank" rel="noopener noreferrer">here</a>, you should see an output like the following:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:13.594 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">DownloadRemoteLog-</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">sensors_db.sensor_readings_tbl</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> c.a.f.c.t.s.l.RemoteLogDownloader</span><span class="token variable" style="color:rgb(156, 220, 254)">$DownloadRemoteLogThread</span><span class="token plain"> - Starting</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:13.599 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Subscribing to Bucket </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:13.599 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Subscribing to Bucket </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:13.600 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Subscribing to Bucket </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:13.600 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Polling </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> records</span><span class="token punctuation" style="color:rgb(212, 212, 212)">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:13.965 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Received reading from sensor </span><span class="token string" style="color:rgb(206, 145, 120)">'3'</span><span class="token plain"> at </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-06-23T09:45'</span><span class="token builtin class-name" style="color:rgb(78, 201, 176)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:13.966 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Performing lookup to get the information </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> sensor </span><span class="token string" style="color:rgb(206, 145, 120)">'3'</span><span class="token builtin class-name" style="color:rgb(78, 201, 176)">.</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.032 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Retrieved information </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'Server Room Sensor'</span><span class="token plain"> with id: </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.033 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Bucket: TableBucket</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">tableId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">bucket</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> - SensorReadingEnriched</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">sensorId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">timestamp</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token plain">-06-23T09:45, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">temperature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">21.8</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">humidity</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">46.2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">pressure</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1012.9</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">batteryLevel</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">86.9</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Server Room Sensor, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Temperature, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">location</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Server Room, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">MAINTENANCE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.045 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - ---------------------------------------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.046 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Received reading from sensor </span><span class="token string" style="color:rgb(206, 145, 120)">'4'</span><span class="token plain"> at </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-06-23T10:00'</span><span class="token builtin class-name" style="color:rgb(78, 201, 176)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.046 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Performing lookup to get the information </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> sensor </span><span class="token string" style="color:rgb(206, 145, 120)">'4'</span><span class="token builtin class-name" style="color:rgb(78, 201, 176)">.</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.128 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Retrieved information </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'Warehouse Sensor'</span><span class="token plain"> with id: </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.128 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Bucket: TableBucket</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">tableId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">bucket</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> - SensorReadingEnriched</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">sensorId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">timestamp</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token plain">-06-23T10:00, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">temperature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">24.0</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">humidity</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">43.8</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">pressure</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1013.5</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">batteryLevel</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">89.2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Warehouse Sensor, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Pressure, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">location</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Warehouse, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">OK</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.129 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - ---------------------------------------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.129 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Received reading from sensor </span><span class="token string" style="color:rgb(206, 145, 120)">'8'</span><span class="token plain"> at </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-06-23T11:00'</span><span class="token builtin class-name" style="color:rgb(78, 201, 176)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.129 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Performing lookup to get the information </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> sensor </span><span class="token string" style="color:rgb(206, 145, 120)">'8'</span><span class="token builtin class-name" style="color:rgb(78, 201, 176)">.</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.229 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Retrieved information </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'Lab Sensor'</span><span class="token plain"> with id: </span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.229 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Bucket: TableBucket</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">tableId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">bucket</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> - SensorReadingEnriched</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">sensorId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">timestamp</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2025</span><span class="token plain">-06-23T11:00, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">temperature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">24.2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">humidity</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">43.5</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">pressure</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1013.6</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">batteryLevel</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">89.5</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Lab Sensor, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Temperature, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">location</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Lab, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">ERROR</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:07:14.229 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - ---------------------------------------</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="column-pruning-scans">Column Pruning Scans<a href="https://fluss.apache.org/blog/fluss-java-client/#column-pruning-scans" class="hash-link" aria-label="Direct link to Column Pruning Scans" title="Direct link to Column Pruning Scans">​</a></h2>
<p>Column pruning lets you fetch only the columns you need, <strong>reducing network overhead and improving read performance</strong>. With Fluss’s Java client, you can specify a subset of columns in your scan:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token class-name" style="color:rgb(78, 201, 176)">LogScanner</span><span class="token plain"> logScanner </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> readingsTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">newScan</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">project</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">of</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"sensorId"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"timestamp"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">createLogScanner</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p>Let's break this down:</p>
<ul>
<li><code>.project(...)</code> instructs the client to request only the specified columns (sensorId,timestamp and temperature) from the server.</li>
<li>Fluss’s columnar storage means non-requested columns (e.g., humidity, etc.) <strong>aren’t transmitted, saving bandwidth and reducing client-side parsing overhead</strong>.</li>
<li>You can combine projection with filters or lookups to further optimize your data access patterns.</li>
</ul>
<p>Example output:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.114 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Subscribing to Bucket </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.114 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Subscribing to Bucket </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.114 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Subscribing to Bucket </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.114 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Polling </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> records</span><span class="token punctuation" style="color:rgb(212, 212, 212)">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.171 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Bucket: TableBucket</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">tableId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">bucket</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> - </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3,2025</span><span class="token plain">-06-23T09:45,21.8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.172 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - ---------------------------------------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.172 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Bucket: TableBucket</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">tableId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">bucket</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> - </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">4,2025</span><span class="token plain">-06-23T10:00,24.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.172 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - ---------------------------------------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.172 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Bucket: TableBucket</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">tableId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">bucket</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> - </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">8,2025</span><span class="token plain">-06-23T11:00,24.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.172 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - ---------------------------------------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">16</span><span class="token plain">:12:35.172 INFO  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> com.ververica.scanner.FlussScanner - Bucket: TableBucket</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">tableId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain">, </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">bucket</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> - </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">10,2025</span><span class="token plain">-06-23T11:30,22.6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre></div></div>
<p>Notice, how only the requested columns are returned from the server.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://fluss.apache.org/blog/fluss-java-client/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In this blog post, we've introduced the Fluss Java Client by guiding you through a full example of creating tables, writing data, and reading/enriching data in real-time.
We covered how to use the <code>Admin</code> client to define a <strong>Primary Key table</strong> (for reference data that can be updated) and a <strong>Log table</strong> (for immutable event streams), and how to use the Fluss client to upsert and append data accordingly.
We also demonstrated reading from a log table using a scanner and performing a lookup on a primary key table to enrich the streaming data on the fly.</p>
<p>This IoT sensor scenario is just one example of Fluss in action and also highlights the <strong>Stream/Table duality</strong> within the same system.
Fluss's ability to handle high-throughput append streams and fast key-based lookups makes it well-suited for real-time analytics use cases like this and many others.
With this foundation, you can explore more advanced features of Fluss to build robust real-time data applications. Happy streaming! 🌊</p>
<p>And before you go 😊 don’t forget to give Fluss 🌊 some ❤️ via ⭐ on <a href="https://github.com/alibaba/fluss" target="_blank" rel="noopener noreferrer">GitHub</a></p>]]></content>
        <author>
            <name>Giannis Polyzos</name>
            <uri>https://github.com/polyzos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tiering Service Deep Dive]]></title>
        <id>https://fluss.apache.org/blog/tiering-service/</id>
        <link href="https://fluss.apache.org/blog/tiering-service/"/>
        <updated>2025-07-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="background">Background<a href="https://fluss.apache.org/blog/tiering-service/#background" class="hash-link" aria-label="Direct link to Background" title="Direct link to Background">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/background-8a1ebc79c438a3deabba060edf8eaa0b.png" width="2036" height="924" class="img_ev3q"></p>
<p>At the core of Fluss’s Lakehouse architecture sits the <strong>Tiering Service:</strong> a smart,
policy-driven data pipeline that seamlessly bridges your real-time Fluss cluster and your cost-efficient lakehouse storage. It continuously ingests fresh events from the fluss cluster, automatically migrating older or less-frequently accessed data into colder storage tiers without interrupting ongoing queries. By balancing hot, warm, and cold storage according to configurable rules, the Tiering Service ensures that recent data remains instantly queryable while historical records are archived economically.</p>
<p>In this blog post we will take a deep dive and explore how Fluss’s Tiering Service <code>orchestrates data movement</code>, <code>preserves consistency</code>, and empowers <code>scalable</code>, <code>high-performance</code> analytics at <code>optimized costs</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flink-tiering-service">Flink Tiering Service<a href="https://fluss.apache.org/blog/tiering-service/#flink-tiering-service" class="hash-link" aria-label="Direct link to Flink Tiering Service" title="Direct link to Flink Tiering Service">​</a></h2>
<p>Fluss tiering service is an Apache Flink job, which keeps moving data from fluss cluster to data lake.
The execution plan is quite straight forward. It has a three operators: a <code>source</code>, a <code>committer</code> and an empty <code>sink writer</code>.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain"> Source: TieringSource -&gt; TieringCommitter -&gt; Sink: Writer</span><br></span></code></pre></div></div>
<ul>
<li><strong>TieringSource</strong>: Reads records from the Fluss tiering table and writes them to the data lake.</li>
<li><strong>TieringCommitter</strong>: Commits each sync batch by advancing offsets in both the lakehouse and the Fluss cluster.</li>
<li><strong>No-Op Sink</strong>: A dummy sink that performs no action.</li>
</ul>
<p>In the sections that follow, we’ll dive into the <strong>TieringSource</strong> and <strong>TieringCommitter</strong> to see exactly how they orchestrate seamless data movement between real-time and historical storage.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tieringsource">TieringSource<a href="https://fluss.apache.org/blog/tiering-service/#tieringsource" class="hash-link" aria-label="Direct link to TieringSource" title="Direct link to TieringSource">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/tiering-source-05383f4fdc58bd69e4a15c38bddf40b7.png" width="2078" height="1084" class="img_ev3q"></p>
<p>The <strong>TieringSource</strong> operator reads records from the Fluss tiering table and writes them into your data lake.
Built on Flink’s Source V2 API (<a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-238:+Introduce+FLIP-27-based+Data+Generator+Source" target="_blank" rel="noopener noreferrer">FLIP-27</a>), it breaks down into two core components: the <strong>TieringSourceEnumerator</strong> and the <strong>TieringSourceReader</strong>.
The high-level workflow is as follows:</p>
<ol>
<li>The <strong>Enumerator</strong> queries the <strong>CoordinatorService</strong> for current tiering table metadata.</li>
<li>Once it receives the table information, the Enumerator generates <code>“splits”</code> (data partitions) and assigns them to the <strong>Reader</strong>.</li>
<li>The <strong>Reader</strong> fetches the actual data for each split.</li>
<li>Finally the <strong>Reader</strong> writes those records into the data lake.</li>
</ol>
<p>In the following sections, we’ll explore how the <strong>TieringSourceEnumerator</strong> and <strong>TieringSourceReader</strong> work under the hood to deliver reliable, scalable ingestion from Fluss into your lakehouse.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tieringsourceenumerator">TieringSourceEnumerator<a href="https://fluss.apache.org/blog/tiering-service/#tieringsourceenumerator" class="hash-link" aria-label="Direct link to TieringSourceEnumerator" title="Direct link to TieringSourceEnumerator">​</a></h3>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/tiering-source-enumerator-93519c48b1c8218d321336fa8e174617.png" width="2030" height="1252" class="img_ev3q"></p>
<p>The <strong>TieringSourceEnumerator</strong> orchestrates split creation and assignment in five key steps:</p>
<ol>
<li><strong>Heartbeat Request</strong>: Uses an RPC client to send a <code>lakeTieringHeartbeatRequest</code> to the Fluss server.</li>
<li><strong>Heartbeat Response</strong>: Receives a <code>lakeTieringHeartbeatResponse</code> that contains the tiering table metadata and sync statuses for <code>completed</code>, <code>failed</code>, and <code>in-progress</code> tables.</li>
<li><strong>Lake Tiering Info</strong>: Forwards the returned <code>lakeTieringInfo</code> to the <code>TieringSplitGenerator</code>.</li>
<li><strong>Split Generation</strong>: The <code>TieringSplitGenerator</code> produces a set of <code>TieringSplits</code>, each representing a data partition to process.</li>
<li><strong>Split Assignment</strong>: Assigns those <code>TieringSplits</code> to <code>TieringSourceReader</code> instances for downstream ingestion into the data lake.</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="rpcclient">RpcClient<a href="https://fluss.apache.org/blog/tiering-service/#rpcclient" class="hash-link" aria-label="Direct link to RpcClient" title="Direct link to RpcClient">​</a></h4>
<p>The <code>RpcClient</code> inside the <code>TieringSourceEnumerator</code> handles all RPC communication with the Fluss CoordinatorService. Its responsibilities include:</p>
<ul>
<li><strong>Sending Heartbeats</strong>: It constructs and sends a <code>LakeTieringHeartbeatRequest</code>, which carries three lists of tables—<code>tiering_tables</code> (in-progress), <code>finished_tables</code>, and <code>failed_tables</code>—along with an optional <code>request_table</code> flag to request new tiering work.</li>
<li><strong>Receiving Responses</strong>: It awaits a <code>LakeTieringHeartbeatResponse</code> that contains:<!-- -->
<ul>
<li><code>coordinator_epoch</code>: the current epoch of the coordinator.</li>
<li><code>tiering_table</code> (optional): a <code>PbLakeTieringTableInfo</code> message (with <code>table_id</code>, <code>table_path</code>, and <code>tiering_epoch</code>) describing the next table to tier.</li>
<li><code>tiering_table_resp</code>, <code>finished_table_resp</code>, and <code>failed_table_resp</code>: lists of heartbeat responses reflecting the status of each table.</li>
</ul>
</li>
<li><strong>Forwarding Metadata</strong>: It parses the returned <code>PbLakeTieringTableInfo</code> and the sync-status responses, then forwards the assembled <code>lakeTieringInfo</code> to the <code>TieringSplitGenerator</code> for split creation.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="tieringsplitgenerator">TieringSplitGenerator<a href="https://fluss.apache.org/blog/tiering-service/#tieringsplitgenerator" class="hash-link" aria-label="Direct link to TieringSplitGenerator" title="Direct link to TieringSplitGenerator">​</a></h4>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/tiering-split-generator-be078e6e03ec3424d75eac0edc7baff6.png" width="2020" height="1560" class="img_ev3q"></p>
<p>The <strong>TieringSplitGenerator</strong> is an important component that orchestrates efficient data synchronization between your real-time Fluss cluster and your lakehouse.
It precisely calculates the data <code>"delta"</code>, i.e what's new or changed in Fluss but not yet committed to the lake and then generates <strong>TieringSplit</strong> tasks for each segment requiring synchronization.</p>
<p>To achieve this, the <code>TieringSplitGenerator</code> leverages the <code>FlussAdminClient</code> to fetch three essential pieces of metadata:</p>
<p><strong>Lake Snapshot</strong></p>
<p>The generator first invokes the lake metadata API to retrieve a <strong>LakeSnapshot</strong> object. This snapshot provides a complete picture of the current state of your data in the lakehouse, including:</p>
<ul>
<li><code>snapshotId:</code> The identifier for the latest committed snapshot in your data lake.</li>
<li><code>tableBucketsOffset:</code> A map that details the log offset in the lakehouse for each <code>TableBucket</code>.</li>
</ul>
<p><strong>Current Bucket Offsets</strong></p>
<p>Next, the <code>TieringSplitGenerator</code> queries the Fluss server to determine the <strong>current log end offset</strong> for each bucket. This effectively captures the high-water mark of incoming data streams in real time within your Fluss cluster.</p>
<p><strong>KV Snapshots (for primary-keyed tables)</strong></p>
<p>For tables that utilize primary keys, the generator also retrieves a <strong>KvSnapshots</strong> record. This record contains vital information for maintaining consistency with key-value stores:</p>
<ul>
<li><code>tableId</code> and an optional <code>partitionId</code>.</li>
<li><code>snapshotIds:</code> The latest snapshot ID specific to each bucket.</li>
<li><code>logOffsets:</code> The exact log position from which to resume reading after that snapshot, ensuring seamless data ingestion.</li>
</ul>
<p>With the <code>LakeSnapshot</code>, the live bucket offsets from the Fluss cluster, and (where applicable) the <code>KvSnapshots</code>, the <code>TieringSplitGenerator</code> performs its core function: it computes which log segments are present in Fluss but have not yet been committed to the lakehouse.</p>
<p>Finally, for each identified segment, it produces a distinct <strong>TieringSplit</strong>. Each <code>TieringSplit</code> precisely defines the specific bucket and the exact offset range that needs to be ingested. This meticulous process ensures incremental, highly efficient synchronization, seamlessly bridging your real-time operational data with your historical, cost-optimized storage.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="tieringsplit">TieringSplit<a href="https://fluss.apache.org/blog/tiering-service/#tieringsplit" class="hash-link" aria-label="Direct link to TieringSplit" title="Direct link to TieringSplit">​</a></h4>
<p>The <strong>TieringSplit</strong> abstraction defines exactly which slice of a table bucket needs to be synchronized. It captures three common fields:</p>
<ul>
<li><strong>tablePath</strong>: the full path to the target table.</li>
<li><strong>tableBucket</strong>: the specific bucket (shard) within that table.</li>
<li><strong>partitionName</strong> (optional): the partition key, if the table is partitioned.</li>
</ul>
<p>There are two concrete split types:</p>
<ol>
<li><strong>TieringLogSplit</strong> (for append-only “log” tables)<!-- -->
<ul>
<li><strong>startingOffset</strong>: the last committed log offset in the lake.</li>
<li><strong>stoppingOffset</strong>: the current end offset in the live Fluss bucket.</li>
<li>This split defines a contiguous range of new log records to ingest.</li>
</ul>
</li>
<li><strong>TieringSnapshotSplit</strong> (for primary-keyed tables)<!-- -->
<ul>
<li><strong>snapshotId</strong>: the identifier of the latest snapshot in Fluss.</li>
<li><strong>logOffsetOfSnapshot</strong>: the log offset at which that snapshot was taken.</li>
<li>This split lets the TieringSourceReader replay all CDC (change-data-capture) events since the snapshot, ensuring up-to-date state.</li>
</ul>
</li>
</ol>
<p>By breaking each table into these well-defined splits, the Tiering Service can incrementally, reliably, and in parallel sync exactly the data that’s missing from your data lake.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tieringsourcereader">TieringSourceReader<a href="https://fluss.apache.org/blog/tiering-service/#tieringsourcereader" class="hash-link" aria-label="Direct link to TieringSourceReader" title="Direct link to TieringSourceReader">​</a></h3>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/tiering-source-reader-2b300d7753ff2b30261ef3aec66f1f66.png" width="2012" height="1460" class="img_ev3q"></p>
<p>The <strong>TieringSourceReader</strong> pulls assigned splits from the enumerator, uses a <code>TieringSplitReader</code> to fetch the corresponding records from the Fluss server, and then writes them into the data lake. Its workflow breaks down as follows:</p>
<ul>
<li><strong>Split Selection:</strong> The reader picks an assigned <code>TieringSplit</code> from its queue.</li>
<li><strong>Reader Dispatch:</strong> Depending on the split type, it instantiates either:<!-- -->
<ul>
<li><strong>LogScanner</strong> for <code>TieringLogSplit</code> (append-only tables)</li>
<li><strong>BoundedSplitReader</strong> for <code>TieringSnapshotSplit</code> (primary-keyed tables)</li>
</ul>
</li>
<li><strong>Data Fetch:</strong> The chosen reader fetches the records defined by the split’s offset or snapshot boundaries from the Fluss server.</li>
<li><strong>Lake Writing"</strong> Retrieved records are handed off to the lake writer, which persists them into the data lake.</li>
</ul>
<p>By cleanly separating split assignment, reader selection, data fetching, and lake writing, the TieringSourceReader ensures scalable, parallel ingestion of streaming and snapshot data into your lakehouse.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="lakewriter--laketieringfactory">LakeWriter &amp; LakeTieringFactory<a href="https://fluss.apache.org/blog/tiering-service/#lakewriter--laketieringfactory" class="hash-link" aria-label="Direct link to LakeWriter &amp; LakeTieringFactory" title="Direct link to LakeWriter &amp; LakeTieringFactory">​</a></h4>
<p>The LakeWriter is responsible for persisting Fluss records into your data lake, and it’s instantiated via a pluggable LakeTieringFactory. This interface defines how Fluss interacts with various lake formats (e.g., Paimon, Iceberg):</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">interface</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LakeTieringFactory</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">	</span><span class="token class-name" style="color:rgb(78, 201, 176)">LakeWriter</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">WriteResult</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">createLakeWriter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">WriterInitContext</span><span class="token plain"> writerInitContext</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">	</span><span class="token class-name" style="color:rgb(78, 201, 176)">SimpleVersionedSerializer</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">WriteResult</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">getWriteResultSerializer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">	</span><span class="token class-name" style="color:rgb(78, 201, 176)">LakeCommitter</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">WriteResult</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token generics"> </span><span class="token generics class-name" style="color:rgb(78, 201, 176)">CommittableT</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">createLakeCommitter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token class-name" style="color:rgb(78, 201, 176)">CommitterInitContext</span><span class="token plain"> committerInitContext</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">	</span><span class="token class-name" style="color:rgb(78, 201, 176)">SimpleVersionedSerializer</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">CommittableT</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">getCommittableSerializer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre></div></div>
<ul>
<li><strong>createLakeWriter(WriterInitContext)</strong>: builds a <code>LakeWriter</code> to convert Fluss rows into the target table format.</li>
<li><strong>getWriteResultSerializer()</strong>: supplies a serializer for the writer’s output.</li>
<li><strong>createLakeCommitter(CommitterInitContext)</strong>: constructs a <code>LakeCommitter</code> to finalize and atomically commit data files.</li>
<li><strong>getCommittableSerializer()</strong>: provides a serializer for committable tokens.```</li>
</ul>
<p>By default, Fluss includes a Paimon-backed tiering factory; Iceberg support is coming soon. Once the <code>TieringSourceReader</code> writes a batch of records through the <code>LakeWriter</code>, it emits the resulting write metadata downstream to the <strong>TieringCommitOperator</strong>, which then commits those changes both in the lakehouse and back to the Fluss cluster.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="stateless">Stateless<a href="https://fluss.apache.org/blog/tiering-service/#stateless" class="hash-link" aria-label="Direct link to Stateless" title="Direct link to Stateless">​</a></h4>
<p>The <code>TieringSourceReader</code> is designed to be completely stateless—it does not checkpoint or store any <code>TieringSplit</code> information itself. Instead, every checkpoint simply returns an empty list, leaving all split-tracking to the <code>TieringSourceEnumerator</code>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token annotation punctuation" style="color:rgb(212, 212, 212)">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">public</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">List</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">TieringSplit</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">snapshotState</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:rgb(86, 156, 214)">long</span><span class="token plain"> checkpointId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)">// Stateless: no splits are held in reader state</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Collections</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">emptyList</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre></div></div>
<p>By delegating split assignment entirely to the Enumerator, the reader remains lightweight and easily scalable, always fetching its next work unit afresh from the coordinator.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tieringcommitter">TieringCommitter<a href="https://fluss.apache.org/blog/tiering-service/#tieringcommitter" class="hash-link" aria-label="Direct link to TieringCommitter" title="Direct link to TieringCommitter">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/tiering-committer-c331413f2e4953539e9df51e711ca4f4.png" width="1930" height="1592" class="img_ev3q"></p>
<p>The <strong>TieringCommitter</strong> operator wraps up each sync cycle by taking the <code>WriteResult</code> outputs from the TieringSourceReader and committing them in two phases:
first to the data lake, then back to Fluss, before emitting status events to the Flink coordinator. It leverages two  components:</p>
<ul>
<li><strong>LakeCommitter</strong>: Provided by the pluggable <code>LakeTieringFactory</code>, this component atomically commits the written files into the lakehouse and returns the new snapshot ID.</li>
<li><strong>FlussTableLakeSnapshotCommitter</strong>: Using that snapshot ID, it updates the Fluss cluster’s tiering table status so that the Fluss server and lakehouse remain in sync.</li>
</ul>
<p>The end-to-end flow is:</p>
<ol>
<li><strong>Collect Write Results</strong> from the TieringSourceReader for the current checkpoint.</li>
<li><strong>Lake Commit</strong> via the <code>LakeCommitter</code>, which finalizes files and advances the lake snapshot.</li>
<li><strong>Fluss Update</strong> using the <code>FlussTableLakeSnapshotCommitter</code>, acknowledging success or failure back to the Fluss CoordinatorService.</li>
<li><strong>Event Emission</strong> of either <code>FinishedTieringEvent</code> (on success or completion) or <code>FailedTieringEvent</code> (on errors) to the Flink <code>OperatorCoordinator</code>.</li>
</ol>
<p>This TieringCommitter operator ensures exactly-once consistent synchronization between your real-time Fluss cluster and your analytical lakehouse.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://fluss.apache.org/blog/tiering-service/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In this deep dive, we thoroughly explored every facet of Fluss's <strong>Tiering Service</strong>.
We began by dissecting the <strong>TieringSource</strong>, understanding the critical roles of its Enumerator, RpcClient, and SplitGenerator. From there, we examined the various split types and the efficiency of the stateless <strong>TieringSourceReader</strong>.</p>
<p>Our journey then led us to the flexible, pluggable integration of the <strong>LakeWriter</strong> and <strong>LakeCommitter</strong>. Finally, we saw how the <strong>TieringCommitter</strong>, with its LakeCommitter and FlussTableLakeSnapshotCommitter, orchestrates <strong>atomic</strong>, <strong>exactly-once commits</strong> across both your data lake and Fluss cluster.</p>
<p>Together, these components form a robust pipeline. This pipeline reliably synchronizes real-time streams with historical snapshots, ensuring <strong>seamless</strong>, <strong>scalable consistency</strong> between your live workloads and analytical storage.</p>]]></content>
        <author>
            <name>GUO Yang</name>
            <uri>https://github.com/gyang94</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Fluss 0.7]]></title>
        <id>https://fluss.apache.org/blog/releases/0.7/</id>
        <link href="https://fluss.apache.org/blog/releases/0.7/"/>
        <updated>2025-06-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Banner" src="https://fluss.apache.org/assets/images/banner-8cc4ea9295caf8358e14adf7a69beb01.png" width="1322" height="632" class="img_ev3q"></p>
<p>🌊 We are excited to announce the official release of <strong>Fluss 0.7</strong>!</p>
<p>This version has undergone extensive improvements in <strong>stability</strong>, <strong>architecture</strong>, <strong>performance optimization</strong>, and <strong>security</strong>, further enhancing its readiness for <strong>production environments</strong>. Over the past three months, we have completed more than <strong>250 commits</strong>, making this release a significant milestone toward becoming a mature, production-grade streaming storage platform.</p>
<p><img decoding="async" loading="lazy" alt="Improvements Diagram" src="https://fluss.apache.org/assets/images/overview-255047ec7648f12c63660b40d1147c86.png" width="1248" height="778" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="stability-enhancements">Stability Enhancements<a href="https://fluss.apache.org/blog/releases/0.7/#stability-enhancements" class="hash-link" aria-label="Direct link to Stability Enhancements" title="Direct link to Stability Enhancements">​</a></h2>
<p>In this release, we have dedicated significant effort to enhancing system stability. By building a comprehensive stability testing framework covering end-to-end processes and multi-scenario fault simulations, combined with large-scale stress testing using real business data, and through rigorous production-level stability validation in Alibaba, we have addressed and resolved over 50 issues. This has significantly improved the stability of Fluss' core modules and the overall robustness of the system. The major improvements include:</p>
<ul>
<li><strong>Online/Offline Node Optimization:</strong> Refactored the ISR (In-Sync Replica) update mechanism and replica synchronization logic and enhanced idempotency guarantees. This significantly improves system stability and reduces the risk of data loss during node failures.</li>
<li><strong>Server Metadata Caching:</strong> Introduced a consistent metadata caching layer on the server side. Clients now fetch metadata from the local server cache instead of ZooKeeper, significantly reducing request latency and pressure on ZooKeeper.</li>
<li><strong>Server Rack-Aware Support:</strong> During replica assignment, the system automatically avoids placing multiple replicas within the same "rack", thereby significantly improving fault tolerance and high availability. This feature is especially beneficial in multi-AZ deployments and large-scale data center disaster recovery scenarios. You can configure the "rack" of the TabletServer via setting <code>tablet-server.rack</code> in <code>server.yaml</code>.</li>
<li><strong>Accelerated Table Creation:</strong> Leveraged batched metadata updates to reduce table initialization time. For example, the time for a table creation with 1024 buckets was reduced from minutes to milliseconds.</li>
<li><strong>Optimized Read/Write Pipelines:</strong>
<ul>
<li>Introduce bucket-id-based shuffle for primary key tables to improve write throughput.</li>
<li>Dynamically estimate the batch size based on incoming traffic to optimize memory usage and throughput.</li>
<li>Optimize the Arrow memory release logic to enhance job stability.</li>
</ul>
</li>
</ul>
<p>These enhancements make Fluss 0.7 ready for most production use cases.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-architecture-of-the-streaming-lakehouse">New Architecture of the Streaming Lakehouse<a href="https://fluss.apache.org/blog/releases/0.7/#new-architecture-of-the-streaming-lakehouse" class="hash-link" aria-label="Direct link to New Architecture of the Streaming Lakehouse" title="Direct link to New Architecture of the Streaming Lakehouse">​</a></h2>
<p>In Fluss 0.5, we first introduced the Streaming Lakehouse feature, with the powerful Union Read ability, we can significantly reduce the cost of streaming storage and improve the data freshness of Lakehouse.</p>
<blockquote>
<p>Note: Union Reads allows querying and combining the results from both Lakehouse (historical) and Fluss (real-time) data.</p>
</blockquote>
<p>However, the initial implementation had architectural limitations affecting scalability and operability in production. In Fluss 0.7, we’ve completely re-architected the Streaming Lakehouse feature to address these challenges.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="elastic-stateless-service">Elastic Stateless Service<a href="https://fluss.apache.org/blog/releases/0.7/#elastic-stateless-service" class="hash-link" aria-label="Direct link to Elastic Stateless Service" title="Direct link to Elastic Stateless Service">​</a></h3>
<p>Previously, the lake tiering service was implemented as a Flink job encapsulating Fluss as a Source and Paimon as a Sink, storing sync offsets state in Flink’s State, this making it a stateful service.
This led to several operational issues:</p>
<ul>
<li><strong>Single Point of Failure:</strong> The lifecycle of each table is bound to a specific Flink job. Once a job fails, the synchronization of all tables hosted by the job will be blocked.</li>
<li><strong>Limited Scalability:</strong> Could only scale vertically (increase job resources), not horizontally (start multiple jobs).</li>
<li><strong>Inflexible Scheduling:</strong> Unable to prioritize tables and dynamically assign to dedicated Flink clusters.</li>
<li><strong>Opaque State:</strong> Flink State being a black box made monitoring and troubleshooting the offset difficult.</li>
</ul>
<p>To address these challenges, we've re-architected the lake tiering service into a truly elastic and stateless component.
The sync offset is now persisted directly within Fluss metadata, with future plans for integration into Paimon v1.2 snapshot properties.
Furthermore, Flink jobs have transitioned from maintaining persistent table subscriptions to a more efficient model where they process one table at a time,
dynamically requesting the next table upon completion of the current one.</p>
<p><img decoding="async" loading="lazy" alt="New Architecture Diagram" src="https://fluss.apache.org/assets/images/new_tiering_service-4509c1a4b51c6821c0fe622cdda534e4.png" width="1980" height="1805" class="img_ev3q"></p>
<p>This optimization significantly reduces the load on Fluss and boosts batch processing efficiency. As a result, cluster operators gain:</p>
<ul>
<li><strong>Enhanced Service Robustness:</strong> Operators can launch multiple Flink jobs to distribute workload and increase overall system resilience.</li>
<li><strong>Flexible Resource Management:</strong> The ability to stop idle jobs at any time allows for immediate reclamation of valuable cluster resources.</li>
<li><strong>Dynamic Task Orchestration:</strong> Sync tasks can now be dynamically scheduled across all active Flink jobs, optimizing resource utilization.</li>
<li><strong>Actionable Offset Visibility:</strong> The offset state is now queryable, providing greater insight and control over data processing.</li>
</ul>
<p>This design ensures end-to-end consistency across all operations.
Furthermore, this stateless design also decouples us from the tight Flink dependency, paving the way for future lightweight execution models, such as running on FaaS (Function as a Service).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="pluggable-lake-format">Pluggable Lake Format<a href="https://fluss.apache.org/blog/releases/0.7/#pluggable-lake-format" class="hash-link" aria-label="Direct link to Pluggable Lake Format" title="Direct link to Pluggable Lake Format">​</a></h3>
<p>The previous implementation had a tight coupling with Apache Paimon, which restricted our ability to integrate with other lake formats, such as Iceberg.
With version 0.7, we have abstracted and modularized all lake format interfaces.
This enhancement enables easy, plugin-style support for Iceberg and other emerging formats.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="native-flink-command-submission">Native Flink Command Submission<a href="https://fluss.apache.org/blog/releases/0.7/#native-flink-command-submission" class="hash-link" aria-label="Direct link to Native Flink Command Submission" title="Direct link to Native Flink Command Submission">​</a></h3>
<p>Previously, users were limited to the <code>lakehouse.sh</code> script for initiating the lake tiering service, which submitted jobs to the Flink cluster.
While convenient, this approach restricted deployment flexibility, particularly when encountering diverse Flink deployment modes and internal product platforms.
Fluss 0.7 now addresses this by supporting <strong>native job submission via standard Flink commands</strong> (<code>flink run</code>).
This enhancement ensures broad compatibility with various deployment modes while significantly lowering learning and integration costs.
The following is an example of how to submit the lake tiering service using the native Flink command:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">flink run /path/to/fluss-flink-tiering-0.7.0.jar </span><span class="token punctuation" style="color:rgb(212, 212, 212)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">--fluss.bootstrap.servers</span><span class="token plain"> localhost:9123 </span><span class="token punctuation" style="color:rgb(212, 212, 212)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">--datalake.format</span><span class="token plain"> paimon </span><span class="token punctuation" style="color:rgb(212, 212, 212)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">--datalake.paimon.metastore</span><span class="token plain"> filesystem </span><span class="token punctuation" style="color:rgb(212, 212, 212)">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">--datalake.paimon.warehouse</span><span class="token plain"> /path/to/warehouse</span><br></span></code></pre></div></div>
<p>See more details in the <a href="https://fluss.apache.org/docs/maintenance/tiered-storage/lakehouse-storage/">Streaming Lakehouse documentation</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="streaming-partition-pruning">Streaming Partition Pruning<a href="https://fluss.apache.org/blog/releases/0.7/#streaming-partition-pruning" class="hash-link" aria-label="Direct link to Streaming Partition Pruning" title="Direct link to Streaming Partition Pruning">​</a></h2>
<p>Partitioning is a foundational technique in modern data warehouses and Lakehouse architectures for optimizing query performance by
logically dividing datasets along meaningful dimensions (e.g., time, region, business line).</p>
<p>Fluss 0.7 introduces <strong>streaming partition pruning</strong>, enabling selective reading of relevant partitions based on query conditions.
For example, if a query filters on <code>nation_key = 'US'</code>, the Fluss Source will only read matching partitions,
significantly reducing network I/O and compute overhead.
Apart from that, we also support the following advanced partition features to make partition pruning adaptable and easy to use:</p>
<ul>
<li><strong>Multi-level Partitioning:</strong> Supports nested partition strategies (e.g., <code>dt=20250617/region=US/business=sale</code>).</li>
<li><strong>Dynamic Partition Creation:</strong> Automatically creates required partitions based on incoming data, no manual pre-creation is required.</li>
<li><strong>Automatic Partition Discovery:</strong> Fluss source adds matched new partitions to the subscription in real-time.</li>
</ul>
<p>Using real business data from <strong>Taobao - the largest online shopping platform in China,</strong> we tested the read and write performance between non-partitioned and partitioned tables (with 20 auto-created partitions). The write results show that the multi-level partition and dynamic partition creation mechanism do not have a significant impact on the write performance.
<img decoding="async" loading="lazy" alt="Write Perf" src="https://fluss.apache.org/assets/images/write_perf-25c062766e117f2c092a79653cf69a85.jpg" width="890" height="554" class="img_ev3q"></p>
<p>At the same time, under the same data scale, we tested the streaming read performance of non-partitioned tables and partitioned tables under three partition conditions:
<strong>unconditional</strong>, <strong>medium matching</strong> (hitting five partitions), and <strong>exact matching</strong> (hitting one partition).
From the results, we can observe that when the partition condition only matches 1/20 of the partitions,
<strong>the network traffic is reduced by about 20x</strong> and the <strong>processing time is reduced by nearly 9x</strong>,
demonstrating the huge performance benefit of partition pruning in streaming reads.</p>
<p><img decoding="async" loading="lazy" alt="Read Perf" src="https://fluss.apache.org/assets/images/read_perf-66abe9aa4ee1bf9ef52dc10c59072c0f.jpg" width="836" height="852" class="img_ev3q"></p>
<p>Streaming partition pruning is the second pushdown feature introduced after streaming column pruning in Fluss.
Looking ahead, we plan to introduce <strong>predicate pushdown with Arrow batch-level I/O pruning</strong> to further enhance query efficiency.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="enterprise-grade-security">Enterprise-Grade Security<a href="https://fluss.apache.org/blog/releases/0.7/#enterprise-grade-security" class="hash-link" aria-label="Direct link to Enterprise-Grade Security" title="Direct link to Enterprise-Grade Security">​</a></h2>
<p>To meet enterprise-grade security requirements, Fluss 0.7 fully supports Authentication and Authorization mechanisms.</p>
<p><strong>Authentication</strong> is the process of confirming the identity of the client.
Fluss introduced a plugin-based authentication with built-in <strong>SASL/PLAIN</strong> support, compatible with <strong>JAAS</strong> (Java Authentication and Authorization Service) configuration for both client and server credentials.</p>
<p><strong>Authorization</strong> controls which resources the identity can access and which operations it can perform after identity confirmation.
Fluss implements fine-grained permission control through the <strong>ACL</strong> (Access Control List) mechanism, supporting multi-level access control at the Cluster, Database, and Table levels.</p>
<p>Additionally, we've integrated Flink SQL's <code>CALL</code> statements to ease ACL permission management for users.
For instance, granting read access to the <code>mydb</code> database for user <code>Tim</code> can now be accomplished with the following command:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">CALL</span><span class="token plain"> admin_catalog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">sys</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_acl</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    resource </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'cluster.mydb'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    permission </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'ALLOW'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    principal </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'User:Tim'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    operation </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'READ'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    host </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'*'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p>For details, please refer to the <a href="https://fluss.apache.org/docs/security/overview/">Security documentation</a> and quickstarts.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flink-datastream-connector">Flink DataStream Connector<a href="https://fluss.apache.org/blog/releases/0.7/#flink-datastream-connector" class="hash-link" aria-label="Direct link to Flink DataStream Connector" title="Direct link to Flink DataStream Connector">​</a></h2>
<p>Fluss 0.7 officially introduces the DataStream Connector, supporting both Source and Sink for reading and writing log and primary key tables. Users can now seamlessly integrate Fluss tables into Flink DataStream pipelines.</p>
<p>Here’s an example of reading data from a Fluss table into a Flink DataStream:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token class-name" style="color:rgb(78, 201, 176)">FlussSource</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">Order</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> source </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">FlussSource</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">Order</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token function" style="color:rgb(220, 220, 170)">builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setBootstrapServers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"localhost:9092"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setDatabase</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"mydb"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setTable</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"orders"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)">// column pruning</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setProjectedFields</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"orderId"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"amount"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setStartingOffsets</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token class-name" style="color:rgb(78, 201, 176)">OffsetsInitializer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">earliest</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">setDeserializationSchema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:rgb(86, 156, 214)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">OrderDeserializationSchema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">build</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token class-name" style="color:rgb(78, 201, 176)">DataStreamSource</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token generics class-name" style="color:rgb(78, 201, 176)">Order</span><span class="token generics punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> stream </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> env</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">fromSource</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    source</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token class-name" style="color:rgb(78, 201, 176)">WatermarkStrategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token function" style="color:rgb(220, 220, 170)">noWatermarks</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"Fluss Source"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p>For usage examples and configuration parameters, see the <a href="https://alibaba.github.io/fluss-docs/docs/engine-flink/datastream/" target="_blank" rel="noopener noreferrer">DataStream Connector documentation</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fluss-java-client">Fluss Java Client<a href="https://fluss.apache.org/blog/releases/0.7/#fluss-java-client" class="hash-link" aria-label="Direct link to Fluss Java Client" title="Direct link to Fluss Java Client">​</a></h2>
<p>In this version, we officially release the Fluss Java Client, a client library designed for developers working with structured stream tables. The client includes two core API modules:</p>
<ul>
<li><strong>Table API:</strong> For table-based data operations, supporting streaming reads/writes, updates, deletions, and point queries.</li>
<li><strong>Admin API:</strong> For metadata management, including cluster management, table lifecycle, and access control.</li>
</ul>
<p>The client supports forward and backward compatibility, ensuring smooth upgrades across Fluss versions. With the Fluss Java Client, developers can build online applications and data ingestion services based on Fluss, as well as enterprise-level components such as Fluss management platforms and operations monitoring systems. For detailed usage instructions, please refer to the official documentation: <a href="https://alibaba.github.io/fluss-docs/docs/apis/java-client/" target="_blank" rel="noopener noreferrer">Fluss Java Client User Guide</a>.</p>
<p>Fluss uses Apache Arrow as its underlying storage format, enabling efficient cross-language extensions. A <strong>Fluss Python Client</strong> is planned for future releases, leveraging the rich ecosystem of <strong>PyArrow</strong> to integrate with popular data analysis tools such as <strong>Pandas</strong> and <strong>DuckDB</strong>.
This will further lower the barrier for real-time data exploration and analytics.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-roadmap">Future Roadmap<a href="https://fluss.apache.org/blog/releases/0.7/#future-roadmap" class="hash-link" aria-label="Direct link to Future Roadmap" title="Direct link to Future Roadmap">​</a></h2>
<p>In the next releases, we will continue to enhance system robustness and operational capabilities and plan to introduce <strong>Rolling Upgrades</strong> and <strong>Cluster Rebalance</strong>.
In addition, with the new pluggable datalake format of the Streaming Lakehouse, we will further expand support for the mainstream datalake table formats, such as an <strong>Apache Iceberg</strong> integration.
Meanwhile, we will explore the possibility of using Fluss in <strong>multimodal AI</strong> use cases, supporting ingestion of multimodal data,
and integrating with <strong><a href="https://github.com/lancedb/lance" target="_blank" rel="noopener noreferrer">Lance</a></strong> format in the Streaming Lakehouse architecture.</p>
<p>Fluss is under active development. Be sure to stay updated on the project, give it a try and if you like it,
don’t forget to give it some ❤️ via ⭐ on <a href="https://github.com/alibaba/fluss" target="_blank" rel="noopener noreferrer">GitHub</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="list-of-contributors">List of contributors<a href="https://fluss.apache.org/blog/releases/0.7/#list-of-contributors" class="hash-link" aria-label="Direct link to List of contributors" title="Direct link to List of contributors">​</a></h2>
<p>The Fluss community would like to express gratitude to all the contributors who made this release possible:</p>
<p>Benchao Li,  CaoZhen,  Feng Wang,  Giannis Polyzos,  HZY,  Hongshun Wang,  Jark Wu,  Junbo wang,  Kerwin,  Leonard Xu,  MehulBatra,  Michael Koepf,  Min Zhao,  Nicholas Jiang,  Radek Grebski,  Rohan Dubey,  Xiaojian Sun,  Yang Guo,  dao-jun,  gkatzioura,  luoyuxia,  majialong,  xiaozhou,  yunhong,  yuxia Luo,  yx9o,  zhangmang,  道君</p>]]></content>
        <author>
            <name>Jark Wu</name>
            <uri>https://github.com/wuchong</uri>
        </author>
        <category label="releases" term="releases"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Understanding Partial Updates]]></title>
        <id>https://fluss.apache.org/blog/partial-updates/</id>
        <link href="https://fluss.apache.org/blog/partial-updates/"/>
        <updated>2025-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Banner" src="https://fluss.apache.org/assets/images/banner-a09e6bac14dc2bee3dbc698347cb2d7f.png" width="1348" height="958" class="img_ev3q"></p>
<p>Traditional streaming data pipelines often need to join many tables or streams on a primary key to create a wide view.
For example, imagine you’re building a real-time recommendation engine for an e-commerce platform.
To serve highly personalized recommendations, your system needs a complete 360° view of each user, including:
<em>user preferences</em>, <em>past purchases</em>, <em>clickstream behavior</em>, <em>cart activity</em>, <em>product reviews</em>, <em>support tickets</em>, <em>ad impressions</em>, and <em>loyalty status</em>.</p>
<p>That’s at least <strong>8 different data sources</strong>, each producing updates independently.</p>
<p>Joining multiple data streams at scale, although it works with Apache Flink it can be really challenging and resource-intensive.
More specifically, it can lead to:</p>
<ul>
<li><strong>Really large state sizes in Flink:</strong> as it needs to buffer all incoming events until they can be joined. In many case states need to be kept around for a long period of time if not indefinitely.</li>
<li><strong>Deal with checkpoints overhead and backpressure:</strong> as the join operation and large state uploading can create a bottleneck in the pipeline.</li>
<li><strong>States are not easy to inspect and debug:</strong> as they are often large and complex. This can make it difficult to understand what is happening in the pipeline and why certain events are not being processed correctly.</li>
<li><strong>State TTL can lead to inconsistent results:</strong> as events may be dropped before they can be joined. This can lead to data loss and incorrect results in the final output.</li>
</ul>
<p>Overall, this approach not only consumes a lot of memory and CPU, but also complicates the job design and maintenance.</p>
<p><img decoding="async" loading="lazy" alt="Streaming Joins" src="https://fluss.apache.org/assets/images/streaming_join-761699227c5633f3575e2036b9e2ac61.png" width="1375" height="550" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="partial-updates-a-different-approach-with-fluss">Partial Updates: A Different Approach with Fluss<a href="https://fluss.apache.org/blog/partial-updates/#partial-updates-a-different-approach-with-fluss" class="hash-link" aria-label="Direct link to Partial Updates: A Different Approach with Fluss" title="Direct link to Partial Updates: A Different Approach with Fluss">​</a></h3>
<p>Fluss introduces a more elegant solution: <strong>partial updates</strong> on a primary key table.</p>
<p>Instead of performing multi-way joins in the streaming job, Fluss allows each data stream source to independently update only its relevant columns into a shared wide table identified by the primary key.
In Fluss, you can define a wide table (for example, a user_profile table based on a <code>user_id</code>) that contains all possible fields from all sources.
Each source stream then writes partial rows – only the fields it knows about – into this table.</p>
<p><img decoding="async" loading="lazy" alt="Partial Update" src="https://fluss.apache.org/assets/images/partial_update-d529bf24211a76b31444bc7918872d59.png" width="1488" height="669" class="img_ev3q"></p>
<p>Fluss’s storage engine automatically merges these partial updates together based on the primary key.
Essentially, Fluss maintains the latest combined value for each key, so you don’t have to manage large join states in Flink.</p>
<p>Under the hood, when a new partial update for a key arrives, Fluss will look up the existing record for that primary key, update the specific columns provided, and leave other columns unchanged.
The result is written back as the new version of the record.
This happens in <em>real-time</em>, so the table is <strong>always up-to-date</strong> with the latest information from all streams.</p>
<p>Next, let's try and better understand how this works in practice with a concrete example.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-building-a-unified-wide-table">Example: Building a Unified Wide Table<a href="https://fluss.apache.org/blog/partial-updates/#example-building-a-unified-wide-table" class="hash-link" aria-label="Direct link to Example: Building a Unified Wide Table" title="Direct link to Example: Building a Unified Wide Table">​</a></h3>
<blockquote>
<p>You can find the full source code on github <a href="https://github.com/ververica/ververica-fluss-examples/tree/main/partial_updates" target="_blank" rel="noopener noreferrer">here</a>.</p>
</blockquote>
<p>Start by cloning the repository, run <code>docker compose up</code> to spin up the development enviroment and finally grab a terminal
into the <code>jobmanager</code> and start the Flink SQL cli, by running the following command:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">./bin/sql-client.sh</span><br></span></code></pre></div></div>
<p>Great so far ! 👍</p>
<p><strong>Step 1:</strong> The first thing we need to do is to create a Flink catalog that will be used to store the tables we are going to create.
Let's create a catalog called <code>fluss_catalog</code> and use this catalog.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">CREATE</span><span class="token plain"> CATALOG fluss_catalog </span><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">'type'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'fluss'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">'bootstrap.servers'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'coordinator-server:9123'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">USE</span><span class="token plain"> CATALOG fluss_catalog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p><strong>Step 2:</strong> Then let's create <code>3 tables</code> to represent the different data sources that will be used to build the recommendations wide table.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">-- Recommendations – model scores</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TABLE</span><span class="token plain"> recommendations </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    user_id  STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    item_id  STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    rec_score </span><span class="token keyword" style="color:rgb(86, 156, 214)">DOUBLE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    rec_ts   </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">KEY</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">NOT</span><span class="token plain"> ENFORCED</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'bucket.num'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'3'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'table.datalake.enabled'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'true'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- Impressions – how often we showed something</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TABLE</span><span class="token plain"> impressions </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    user_id STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    item_id STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    imp_cnt </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    imp_ts  </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">KEY</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">NOT</span><span class="token plain"> ENFORCED</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'bucket.num'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'3'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'table.datalake.enabled'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'true'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- Clicks – user engagement</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TABLE</span><span class="token plain"> clicks </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    user_id  STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    item_id  STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    click_cnt </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    clk_ts    </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">KEY</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">NOT</span><span class="token plain"> ENFORCED</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'bucket.num'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'3'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'table.datalake.enabled'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'true'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TABLE</span><span class="token plain"> user_rec_wide </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    user_id   STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    item_id   STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    rec_score </span><span class="token keyword" style="color:rgb(86, 156, 214)">DOUBLE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">   </span><span class="token comment" style="color:rgb(106, 153, 85)">-- updated by recs stream</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    imp_cnt   </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">      </span><span class="token comment" style="color:rgb(106, 153, 85)">-- updated by impressions stream</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    click_cnt </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">      </span><span class="token comment" style="color:rgb(106, 153, 85)">-- updated by clicks stream</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">KEY</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">NOT</span><span class="token plain"> ENFORCED</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'bucket.num'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'3'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'table.datalake.enabled'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'true'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p><strong>Step 3:</strong> Of course, we will need some sample data to work with , so let's go on and insert some records into the tables. 💻</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">-- Recommendations – model scores</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> recommendations </span><span class="token keyword" style="color:rgb(86, 156, 214)">VALUES</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_101'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_501'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:15:02'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_101'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_502'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:15:05'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_102'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_503'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:16:00'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_103'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_501'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:16:20'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_104'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_504'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:16:45'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">-- Impressions – how often each (user,item) was shown</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> impressions </span><span class="token keyword" style="color:rgb(86, 156, 214)">VALUES</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_101'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_501'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:17:10'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_101'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_502'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:17:15'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_102'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_503'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:18:22'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_103'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_501'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:18:30'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_104'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_504'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:18:55'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">-- Clicks – user engagement</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> clicks </span><span class="token keyword" style="color:rgb(86, 156, 214)">VALUES</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_101'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_501'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:19:00'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_101'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_502'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:19:07'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_102'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_503'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:19:12'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_103'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_501'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:19:20'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'user_104'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string" style="color:rgb(206, 145, 120)">'prod_504'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TIMESTAMP</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'2025-05-16 09:19:25'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<blockquote>
<p><strong>Note:</strong> 🚨 So far the jobs we run were bounded jobs, so they will finish after inserting the records. Moving forward we will run some streaming jobs.
So keep in mind that each job runs with a <code>parallelism of 3</code> and our environment is set up <code>with 10 slots total</code>.
So make sure to keep an eye to the Flink Web UI to see how many slots are used and how many are available and stop some jobs when are no longer needed to free up resourecs.</p>
</blockquote>
<p><strong>Step 4:</strong> At this point let's open up a separate terminal and start the Flink SQL CLI.
In this new terminal, make sure to run set the <code>result-mode</code>:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">SET </span><span class="token string" style="color:rgb(206, 145, 120)">'sql-client.execution.result-mode'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'tableau'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p>and then run:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> user_rec_wide</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p>to observe the output of the table, as we insert <code>partially</code> records into the it from the different sources.</p>
<p><strong>Step 5:</strong> Let's insert the records from the <code>recommendations</code> table into the <code>user_rec_wide</code> table.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">-- Apply recommendation scores</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> user_rec_wide </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> rec_score</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    rec_score</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> recommendations</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p><strong>Output:</strong> Notice, how only the related columns are updated in the <code>user_rec_wide</code> table and the rest of the columns are <code>NULL</code>.</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">Flink SQL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> SELECT * FROM user_rec_wide</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">+----+--------------------------------+--------------------------------+--------------------------------+-------------+-------------+</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">op</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                        user_id </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                        item_id </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                      rec_score </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">     imp_cnt </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">   click_cnt </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">+----+--------------------------------+--------------------------------+--------------------------------+-------------+-------------+</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><br></span></code></pre></div></div>
<p><strong>Step 5:</strong> Next, let's insert the records from the <code>impressions</code> table into the <code>user_rec_wide</code> table.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">-- Apply impression counts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> user_rec_wide </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> imp_cnt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    imp_cnt</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> impressions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p><strong>Output:</strong> Notice how the <code>impressions</code> records are inserted into the <code>user_rec_wide</code> table and the <code>imp_cnt</code> column is updated.</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">Flink SQL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> SELECT * FROM user_rec_wide</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">+----+--------------------------------+--------------------------------+--------------------------------+-------------+-------------+</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">op</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                        user_id </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                        item_id </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                      rec_score </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">     imp_cnt </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">   click_cnt </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">+----+--------------------------------+--------------------------------+--------------------------------+-------------+-------------+</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><br></span></code></pre></div></div>
<p><strong>Step 6:</strong> Finally, let's insert the records from the <code>clicks</code> table into the <code>user_rec_wide</code> table.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">-- Apply click counts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> user_rec_wide </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> click_cnt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    user_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    item_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    click_cnt</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> clicks</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre></div></div>
<p><strong>Output:</strong> Notice how the <code>clicks</code> records are inserted into the <code>user_rec_wide</code> table and the <code>click_cnt</code> column is updated.</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">Flink SQL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> SELECT * FROM user_rec_wide</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">+----+--------------------------------+--------------------------------+--------------------------------+-------------+-------------+</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">op</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                        user_id </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                        item_id </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                      rec_score </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">     imp_cnt </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">   click_cnt </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">+----+--------------------------------+--------------------------------+--------------------------------+-------------+-------------+</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +I </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-U</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain">NULL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> +U </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                       prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">                           </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">           </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><br></span></code></pre></div></div>
<p><strong>Reminder:</strong> ‼️As mentioned before make sure to stop the jobs that are no longer needed to free up resources.</p>
<p>Now let's switch to <code>batch</code> mode and query the current snapshot of the <code>user_rec_wide</code> table.</p>
<p>But before that, let's start the <a href="https://alibaba.github.io/fluss-docs/docs/maintenance/tiered-storage/lakehouse-storage/#start-the-datalake-tiering-service" target="_blank" rel="noopener noreferrer">Tiering Service</a> that allows offloading the tables as <code>Lakehouse</code> tables.</p>
<p><strong>Step 7:</strong> Open a new terminal 💻 in the <code>Coordinator Server</code> and run the following command to start the <code>Tiering Service</code>:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">./bin/lakehouse.sh </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-D</span><span class="token plain"> </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">flink.rest.address</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">jobmanager </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-D</span><span class="token plain"> </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">flink.rest.port</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">8081</span><span class="token plain"> </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-D</span><span class="token plain"> </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">flink.execution.checkpointing.interval</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">30s </span><span class="token parameter variable" style="color:rgb(156, 220, 254)">-D</span><span class="token plain"> </span><span class="token assign-left variable" style="color:rgb(156, 220, 254)">flink.parallelism.default</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><br></span></code></pre></div></div>
<p>The configured checkpoint is <code>flink.execution.checkpointing.interval=30s</code> so wait a bit until the first checkpoint is created
and data gets offloading to the <code>Lakehouse</code> tables.</p>
<p><strong>Step 8:</strong> Finally let's switch to <code>batch</code> mode and query the current snapshot of the <code>user_rec_wide</code> table.</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">SET </span><span class="token string" style="color:rgb(206, 145, 120)">'execution.runtime-mode'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'batch'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Flink SQL</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> SELECT * FROM user_rec_wide</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">+----------+----------+-----------+---------+-----------+</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">  user_id </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">  item_id </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> rec_score </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> imp_cnt </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> click_cnt </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">+----------+----------+-----------+---------+-----------+</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> user_102 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> prod_503 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token number" style="color:rgb(181, 206, 168)">0.83</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">       </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">         </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> user_103 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token number" style="color:rgb(181, 206, 168)">0.67</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">       </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">         </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> prod_501 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token number" style="color:rgb(181, 206, 168)">0.92</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">       </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">         </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> user_101 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> prod_502 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token number" style="color:rgb(181, 206, 168)">0.78</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">       </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">         </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> user_104 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> prod_504 </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">      </span><span class="token number" style="color:rgb(181, 206, 168)">0.88</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">       </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain">         </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">+----------+----------+-----------+---------+-----------+</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token plain"> rows </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> </span><span class="token builtin class-name" style="color:rgb(78, 201, 176)">set</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2.63</span><span class="token plain"> seconds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre></div></div>
<p>🎉 That's it! You have successfully created a unified wide table using partial updates in Fluss.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://fluss.apache.org/blog/partial-updates/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>Partial updates in Fluss enable an alternative approach in how we design streaming data pipelines for enriching or joining data.</p>
<p>When all your sources share a primary key - otherwise you can mix &amp; match <a href="https://alibaba.github.io/fluss-docs/docs/engine-flink/lookups/#lookup" target="_blank" rel="noopener noreferrer">streaming lookup joins</a> - you can turn the problem on its head: update a unified table incrementally, rather than joining streams on the fly.</p>
<p>The result is a more scalable, maintainable, and efficient pipeline.
Engineers can spend less time wrestling with Flink’s state, checkpoints and join mechanics, and more time delivering fresh, integrated data to power real-time analytics and applications.
With Fluss handling the merge logic, achieving a single, up-to-date view from multiple disparate streams becomes way more elegant. 😁</p>
<p>And before you go 😊 don’t forget to give Fluss 🌊 some ❤️ via ⭐ on <a href="https://github.com/alibaba/fluss" target="_blank" rel="noopener noreferrer">GitHub</a></p>]]></content>
        <author>
            <name>Giannis Polyzos</name>
            <uri>https://github.com/polyzos</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Story of Fluss Logo]]></title>
        <id>https://fluss.apache.org/blog/unveil-fluss-logo/</id>
        <link href="https://fluss.apache.org/blog/unveil-fluss-logo/"/>
        <updated>2025-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/colored_logo-570a85568f48c50f3ce9cdcfc57c8670.png" width="1614" height="686" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-the-little-otter">Introducing the Little Otter<a href="https://fluss.apache.org/blog/unveil-fluss-logo/#introducing-the-little-otter" class="hash-link" aria-label="Direct link to Introducing the Little Otter" title="Direct link to Introducing the Little Otter">​</a></h2>
<p>Today is <a href="https://www.otter.org/world-otter-day" target="_blank" rel="noopener noreferrer">World Otter Day</a>, and we are thrilled to introduce the little otter to the Fluss community! 🎉</p>
<p>Since open-sourced half a year ago, many community members and friends have asked us:
"When will Fluss get a logo?" After more than a month of careful design work and over 30 iterations, we’re excited to finally unveil the official Fluss logo — a surfing otter! 🦦🌊</p>
<p>I don't want to interpret the symbolic meaning behind the Logo in a rigid way. Instead, I’d like to share the story behind its design — how we defined the direction and iterated step by step toward the final version. This process involved numerous subjective decisions made by the team. You might prefer one of the discarded versions, or disagree with some of the design choices. However, we want to share the journey with our community, and we hope it can also serve as a reference or inspiration for other open-source projects when designing their logos.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="logo-symbolism-what-do-we-want-to-convey">Logo symbolism: what do we want to convey?<a href="https://fluss.apache.org/blog/unveil-fluss-logo/#logo-symbolism-what-do-we-want-to-convey" class="hash-link" aria-label="Direct link to Logo symbolism: what do we want to convey?" title="Direct link to Logo symbolism: what do we want to convey?">​</a></h2>
<p><a href="https://github.com/alibaba/fluss" target="_blank" rel="noopener noreferrer">Fluss</a> is an open-source streaming storage system designed for analytical workloads, with the goal of serving as a real-time data layer for Lakehouse architectures. Therefore, <em><strong>fluidity</strong></em> is the first key message we want to convey.</p>
<p>Secondly, Fluss’s vision is to <strong>"Bring better analytics to data streams, and bring better freshness to data Lakehouses"</strong>. This requires the ability to adapt to multiple data lake formats and support a variety of query engines and compute engines. So, <em><strong>adaptability</strong></em> is the second core idea we want to convey.</p>
<p>Additionally, as an open-source project planning to be donated to the Apache Software Foundation, building an open, diverse, and collaborative community has always been one of our core goals. In line with this value, we wanted the brand to express <em><strong>friendliness</strong></em>, which ultimately led us to choose animal as the logo design direction.</p>
<p>We have also considered using abstract graphics for logo design. However, we noticed that many open-source projects that start with abstract logos, eventually introduce animal mascots to convey the friendliness of the community. These mascots not only play an important role in community outreach but also often replace the main logo in many contexts, becoming more representative visual symbols — such as Go’s gopher, Rust’s crab, and Airbyte’s octopus. Animal images are easier to get closer to users and easier to spread and extend. For example, the small squirrel of the Flink community, not only becomes a symbol of the project but also inspires a wide range of community gifts.</p>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/image1-6acb85f09ad799d93582a37896aabf30.png" width="2768" height="1604" class="img_ev3q"></p>
<p>Therefore, we made clear the direction in the early stage of Fluss Logo design: use an Animal image to convey our concept of <strong>fluidity</strong>, <strong>adaptability</strong>, and <strong>friendliness</strong>. The project name "Fluss" comes from the German word for "river" (Fluss), and we also hope that this animal has a close relationship with the river. Combined with these characteristics, the first animal that comes to our mind is the <strong>otter</strong>. The otter is an animal that lives in rivers and is known for its flexible swimming posture and strong adaptability. At the same time, because of its smart and lovely appearance, it is widely used in many kinds of dolls and cartoon images, is a symbol of affinity. This fits exactly the idea Fluss conveys.</p>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/image2-b9a57e1c35eb09c32fa4fcd07406ceeb.png" width="2310" height="1242" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="design-iterations-for-more-than-30-versions">Design iterations for more than 30 versions<a href="https://fluss.apache.org/blog/unveil-fluss-logo/#design-iterations-for-more-than-30-versions" class="hash-link" aria-label="Direct link to Design iterations for more than 30 versions" title="Direct link to Design iterations for more than 30 versions">​</a></h2>
<p>After clarifying the design direction and core values of Fluss Logo, we began to communicate with the design team in depth and launched multiple rounds of iteration. However, in the early versions of the design, we still couldn’t find the right feel — something was missing: the fluidity.</p>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/image3-37c9a30c044c5afbc6e35fa21c1793bc.png" width="1930" height="1014" class="img_ev3q"></p>
<p>Therefore, we used ChatGPT to find inspiration, and tried a variety of prompt words, and this picture with a surfing wave quickly caught our eyes: dynamic, energy, speed, and flow, which is what we want! Although this otter looks like a Jerry rat... our design team quickly got our idea.</p>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/image4-c4082ae4730f49472a0414543ab5075a.png" width="298" height="294" class="img_ev3q"></p>
<p>Based on the core elements of “otter” + “surfing”, we started a new round of design, and we iterated more than 20 versions based on this and finally evolved to the version you see today.</p>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/image5-7b6a1c8656ea141b803b8787e89d75df.png" width="2626" height="1204" class="img_ev3q"></p>
<p>Subsequently, we also made many variations of the logo to adapt to different environments and background colors.</p>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/image6-ec1c384b777aef0f617d3fcb08a5e39e.png" width="1900" height="1048" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-feedback-from-community-users">Get feedback from community users<a href="https://fluss.apache.org/blog/unveil-fluss-logo/#get-feedback-from-community-users" class="hash-link" aria-label="Direct link to Get feedback from community users" title="Direct link to Get feedback from community users">​</a></h2>
<p>Designing a logo is a highly subjective process. But for an open-source project, the goal isn't to please the founding team — it's to resonate with the community. That’s why we've always valued community feedback and used it to guide our iterations.</p>
<p>Some of the community feedback I loved very much:</p>
<ul>
<li>"The Fluss otter seems to be a sibling to Flink's squirrel."</li>
<li>"I see Paimon in it!"</li>
<li>"It's soooo cute!"</li>
</ul>
<p>Give it some ❤️ via ⭐ on GitHub if you like it as well!
<a href="https://github.com/alibaba/fluss" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/fluss</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="community-egg">Community Egg<a href="https://fluss.apache.org/blog/unveil-fluss-logo/#community-egg" class="hash-link" aria-label="Direct link to Community Egg" title="Direct link to Community Egg">​</a></h2>
<p>At the time of the Fluss logo release, we also submitted an <a href="https://lists.apache.org/thread/osg23opm9x95xm318160808r984k0wk9" target="_blank" rel="noopener noreferrer">incubation proposal</a> to the Apache Software Foundation, thanks to the strong support from our incubation mentors Yu Li, tison, Jingsong Lee, Becket Qin, and Jean-Baptiste. We're confident that Fluss will soon become one of the Apache projects.</p>
<p>In parallel, we’ve designed and launched a series of Fluss community gifts, including stickers, t-shirts, and coffee cups. These items will be available at upcoming community events — stay tuned and pick your swags!</p>
<p><img decoding="async" loading="lazy" src="https://fluss.apache.org/assets/images/image7-246c5eae97745ed3ae9872e84a86b134.png" width="1130" height="633" class="img_ev3q"></p>]]></content>
        <author>
            <name>Jark Wu</name>
            <uri>https://github.com/wuchong</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Fluss 0.6]]></title>
        <id>https://fluss.apache.org/blog/releases/0.6/</id>
        <link href="https://fluss.apache.org/blog/releases/0.6/"/>
        <updated>2025-03-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>The Fluss community is pleased to announce the official release of <strong>Fluss 0.6.0</strong>. This version has undergone over
three months of intensive development, bringing together the expertise and efforts of 45 contributors worldwide,
with more than 200 code commits completed. Our heartfelt thanks go out to every contributor for their invaluable support!</p>
<p><img decoding="async" loading="lazy" alt="Release Announcement" src="https://fluss.apache.org/assets/images/announce-9ab924e071ec69fe7af8765954f9e966.png" width="1224" height="440" class="img_ev3q"></p>
<p>This release introduces several exciting features:</p>
<ul>
<li><strong>Column Compression</strong>: Reduces storage space by up to <strong>6x</strong> while preserving column pruning performance!</li>
<li><strong>Merge Engine</strong>: Introduces flexible merge strategies for primary key data, addressing diverse real-time processing needs.</li>
<li><strong>Prefix Lookup</strong>: Delta Join functionality is now ready on the Fluss side!</li>
</ul>
<p>These new features not only significantly enhance the functionality of Fluss but also represent a solid step
forward in our journey toward building the next-generation analytical stream storage solution.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="column-compression">Column Compression<a href="https://fluss.apache.org/blog/releases/0.6/#column-compression" class="hash-link" aria-label="Direct link to Column Compression" title="Direct link to Column Compression">​</a></h2>
<p>Fluss uses the <a href="https://arrow.apache.org/" target="_blank" rel="noopener noreferrer">Apache Arrow</a> columnar format for it's underlying log file storage, fully leveraging Arrow's streaming
columnar capabilities to achieve highly efficient streaming reads and column pruning. Column pruning in Fluss is performed on the server side,
with end-to-end zero-copy optimization that allows the required column data to be sent directly to the network without
loading it into memory from disk. This design not only significantly improves performance but also drastically reduces
network I/O costs and resource overhead. In previous <a href="https://fluss.apache.org/blog/fluss-intro/#columnar-stream">benchmark tests</a>,
when 90% of the columns were pruned, Fluss achieved a 10x increase in read throughput, demonstrating its exceptional
performance in streaming data processing and transmission.</p>
<p>While column pruning effectively reduces network I/O costs, disk storage costs remain high. To address this,
we have introduced <strong>column compression</strong> in this version, supporting two highly efficient compression algorithms: <strong>ZSTD</strong> and <strong>LZ4</strong>.
These algorithms significantly reduce data storage requirements, thereby lowering storage costs substantially.
Since both compression and decompression are performed on the client side, the amount of data transmitted over the network is reduced,
further decreasing network I/O costs. Notably, compression is applied independently to each column, ensuring that the original column pruning performance is preserved and that streaming read efficiency remains unaffected.</p>
<p>To validate the actual effectiveness of this feature, we conducted benchmark tests using a typical business scenario from Alibaba Taobao.
In the tests, we used datasets of the same scale and Flink jobs with identical resources, writing to Fluss with and without ZSTD compression,
and compared the write throughput. Subsequently, we read data from the table and tested the read throughput.
The results showed that column compression not only reduced storage space by approximately 6x but also improved read and write throughput.</p>
<p><img decoding="async" loading="lazy" alt="Compression Benchmark" src="https://fluss.apache.org/assets/images/compression1-0b666a1467321b28376db725380eda3c.jpg" width="962" height="572" class="img_ev3q"></p>
<p>However, enabling compression had no noticeable impact on Flink's read/write CPU and memory usage.</p>
<p><img decoding="async" loading="lazy" alt="Compression Benchmark" src="https://fluss.apache.org/assets/images/compression2-c0feecf4a8fbff819c1ad37ce03ca6e9.jpg" width="1180" height="542" class="img_ev3q"></p>
<p>The performance of column pruning on compressed data was also tested. The results show that as the number of pruned columns increases,
a multiple-fold performance improvement is still achieved, maintaining the original column pruning efficiency.</p>
<p><img decoding="async" loading="lazy" alt="Compression Benchmark" src="https://fluss.apache.org/assets/images/compression3-1f5de9eec6dd66394a793f26395a8f49.jpg" width="1196" height="624" class="img_ev3q"></p>
<p>Given the significant cost savings and performance improvements achieved by column compression in general use cases,
ZSTD compression is enabled by default for log tables in Fluss 0.6. Users can disable compression by
setting the parameter <code>'table.log.arrow.compression.type'='NONE'</code> on the table.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="merge-engine">Merge Engine<a href="https://fluss.apache.org/blog/releases/0.6/#merge-engine" class="hash-link" aria-label="Direct link to Merge Engine" title="Direct link to Merge Engine">​</a></h2>
<p>In this version, Fluss introduces a new Merge Engine feature for primary key tables to flexibly support merging strategies for data with the same primary key.
The default Merge Engine strategy for primary key tables is to retain the latest record for each primary key.
Users can also choose alternative Merge Engines, including the currently supported <strong>FirstRow Merge Engine</strong> and <strong>Versioned Merge Engine</strong>.
Support for the <strong>Aggregate Merge Engine</strong> is planned for future releases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="firstrow-merge-engine">FirstRow Merge Engine<a href="https://fluss.apache.org/blog/releases/0.6/#firstrow-merge-engine" class="hash-link" aria-label="Direct link to FirstRow Merge Engine" title="Direct link to FirstRow Merge Engine">​</a></h3>
<p>By setting the table property <code>'table.merge-engine' = 'first_row'</code>, users can retain the first record for each primary key.
When this configuration is enabled, the primary key table will generate an append-only changelog. This allows downstream
Flink jobs subscribing to the table to receive an append-only stream, enabling the use of operators that do not support retraction messages,
such as Window Aggregations and Interval Joins. This feature is commonly used as a replacement for log deduplication in streaming processing,
effectively reducing costs and system complexity.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">-- create first_row primary key table</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TABLE</span><span class="token plain"> T </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    k  </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    v1 </span><span class="token keyword" style="color:rgb(86, 156, 214)">DOUBLE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    v2 STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">KEY</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">NOT</span><span class="token plain"> ENFORCED</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">'table.merge-engine'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'first_row'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> T </span><span class="token keyword" style="color:rgb(86, 156, 214)">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'t1'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> T </span><span class="token keyword" style="color:rgb(86, 156, 214)">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'t2'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> T </span><span class="token keyword" style="color:rgb(86, 156, 214)">WHERE</span><span class="token plain"> k </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- Output</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- +---+-----+------+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- | k | v1  | v2   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- +---+-----+------+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- | 1 | 2.0 | t1   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- +---+-----+------+</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="versioned-merge-engine">Versioned Merge Engine<a href="https://fluss.apache.org/blog/releases/0.6/#versioned-merge-engine" class="hash-link" aria-label="Direct link to Versioned Merge Engine" title="Direct link to Versioned Merge Engine">​</a></h3>
<p>The Versioned Merge Engine supports data updates based on version numbers (or event timestamps). It ensures that only the record
with the highest version number (or event timestamp) for each primary key is retained. This mechanism is particularly useful for
deduplicating or merging out-of-order data while guaranteeing eventual consistency with the upstream data source.
In Flink streaming processing, this feature can be used as a replacement for <code>Rank</code> or <code>Deduplication</code> operations, simplifying workflows and reducing costs effectively.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)">-- create a versioned primary key table, `ts` as the version column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TABLE</span><span class="token plain"> VERSIONED </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    a </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">NOT</span><span class="token plain"> </span><span class="token boolean">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">KEY</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">NOT</span><span class="token plain"> ENFORCED</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    b STRING</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    ts </span><span class="token keyword" style="color:rgb(86, 156, 214)">BIGINT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">'table.merge-engine'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'versioned'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">'table.merge-engine.versioned.ver-column'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'ts'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> VERSIONED </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'v1'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- insert a record with ts &lt; 1000, ignored</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> VERSIONED </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'v2'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">999</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> VERSIONED </span><span class="token keyword" style="color:rgb(86, 156, 214)">WHERE</span><span class="token plain"> a </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- Output</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- +---+-----+------+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- | a | b   | ts   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- +---+-----+------+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- | 1 | v1  | 1000 |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- +---+-----+------+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- insert a record with ts &gt; 1000, updated</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">INTO</span><span class="token plain"> VERSIONED </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'v3'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> VERSIONED </span><span class="token keyword" style="color:rgb(86, 156, 214)">WHERE</span><span class="token plain"> a </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- Output</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- +---+-----+------+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- | a | b   | ts   |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- +---+-----+------+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- | 1 | v3  | 2000 |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- +---+-----+------+</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="prefix-lookup-for-delta-join">Prefix Lookup for Delta Join<a href="https://fluss.apache.org/blog/releases/0.6/#prefix-lookup-for-delta-join" class="hash-link" aria-label="Direct link to Prefix Lookup for Delta Join" title="Direct link to Prefix Lookup for Delta Join">​</a></h2>
<p>In the scenario of building wide tables with Flink, optimizing Stream-Stream Join using Delta Join is one of the primary use cases for Fluss.
We have also contributed this functionality to version 0.6. Delta Join can be simply understood as a "bilateral driven lookup join", that is:
when data arrives from the left stream, the right table is queried using the join key; when data arrives from the right stream, the left table is queried using the join key.
This approach eliminates join state like Lookup Join, while preserving the semantics of a Stream-Stream Join (any updates on either side triggers an update to the join result).
Delta Join addresses challenges such as high cost, unstable job, checkpoint timeout, slow restart recovery, etc., in the traditional Stream-Stream Join.</p>
<p><img decoding="async" loading="lazy" alt="Delta Join" src="https://fluss.apache.org/assets/images/delta-join-ad3cf73fc7f3f01e306ad02fd765d26d.jpg" width="2024" height="884" class="img_ev3q"></p>
<p>Overall, Delta Join relies on three core functionalities:</p>
<ul>
<li><strong>CDC Stream Read for Source Table</strong>: The foundational capability of Fluss.</li>
<li><strong>Lookup on Join Keys for Source Table</strong>: Introduced in Fluss 0.6 with Prefix Lookup support.</li>
<li><strong>Delta Join Operator in Flink SQL</strong>: Proposed in <a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-486%3A+Introduce+A+New+DeltaJoin" target="_blank" rel="noopener noreferrer">FLIP-486</a>, planned for Flink 2.1.</li>
</ul>
<p>Once FLIP-486 is completed, users will be able to achieve Delta Join using the following SQL in conjunction with Fluss's Prefix Lookup functionality:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TABLE</span><span class="token plain"> fluss_left_table </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  a1 </span><span class="token keyword" style="color:rgb(86, 156, 214)">BIGINT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  b1 </span><span class="token keyword" style="color:rgb(86, 156, 214)">BIGINT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  c1 </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  d1 </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token keyword" style="color:rgb(86, 156, 214)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">KEY</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">c1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">d1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">a1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">NOT</span><span class="token plain"> ENFORCED  </span><span class="token comment" style="color:rgb(106, 153, 85)">-- bucket key as a prefix of primary key</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token string" style="color:rgb(206, 145, 120)">'bucket.key'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'c1,d1'</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)">-- define bucket key</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">TABLE</span><span class="token plain"> fluss_right_table </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  a2 </span><span class="token keyword" style="color:rgb(86, 156, 214)">BIGINT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  b2 </span><span class="token keyword" style="color:rgb(86, 156, 214)">BIGINT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  c2 </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  d2 </span><span class="token keyword" style="color:rgb(86, 156, 214)">INT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token keyword" style="color:rgb(86, 156, 214)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">KEY</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">c2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">d2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">a2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">NOT</span><span class="token plain"> ENFORCED  </span><span class="token comment" style="color:rgb(106, 153, 85)">-- bucket key as a prefix of primary key</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token string" style="color:rgb(206, 145, 120)">'bucket.key'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'c2,d2'</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)">-- define bucket key</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- it will be optimized to delta join, where the join key is the bucket key of the two tables</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> fluss_left_table </span><span class="token keyword" style="color:rgb(86, 156, 214)">INNER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">JOIN</span><span class="token plain"> fluss_right_table</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token keyword" style="color:rgb(86, 156, 214)">ON</span><span class="token plain"> c1 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> c2 </span><span class="token operator" style="color:rgb(212, 212, 212)">AND</span><span class="token plain"> d1 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> d2</span><br></span></code></pre></div></div>
<p>Flink performs lookups on Fluss tables using the Join Key, which serves as the Bucket Key for the Fluss table.
This allows it to leverage the prefix index of the primary key in the Fluss table, enabling highly efficient lookup queries.
This feature in Fluss is referred to as Prefix Lookup. Currently, Prefix Lookup can also be used to perform one-to-many lookup queries.
For more details, please refer to the <a href="https://fluss.apache.org/docs/engine-flink/lookups/#prefix-lookup">Prefix Lookup</a> documentation.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="stability--performance-improvements">Stability &amp; Performance Improvements<a href="https://fluss.apache.org/blog/releases/0.6/#stability--performance-improvements" class="hash-link" aria-label="Direct link to Stability &amp; Performance Improvements" title="Direct link to Stability &amp; Performance Improvements">​</a></h2>
<p>In this version, we have focused on enhancing the stability and performance of the system, resolving over 50 issues and improvements,
and conducting in-depth optimizations on core modules. For example:</p>
<ul>
<li>Server-side Optimization : By introducing a delayed response mechanism, CPU consumption in low-traffic scenarios has been significantly reduced, thereby improving resource utilization efficiency.</li>
<li>Client-side Optimization : A unified memory management mechanism has been implemented to effectively prevent Out-of-Memory (OOM) issues in high-traffic scenarios while reducing the impact of garbage collection (GC) on system performance.</li>
</ul>
<p>These improvements have significantly enhanced Fluss's reliability and performance in high-concurrency, large-data-volume scenarios, enabling it to handle analytical stream storage workload more efficiently.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="lakehouse-storage">Lakehouse Storage<a href="https://fluss.apache.org/blog/releases/0.6/#lakehouse-storage" class="hash-link" aria-label="Direct link to Lakehouse Storage" title="Direct link to Lakehouse Storage">​</a></h2>
<p>In previous versions, if a table in Fluss needed to enable the Lakehouse storage capability, it had to be enabled when table is created.
Otherwise, enabling this feature later would require deleting and recreating the table. This limitation arose because enabling Lakehouse storage changes the key encoding format and bucket sharding strategy, making existing tables incompatible with the new configuration.</p>
<p>In this version, we resolve this by detecting the cluster's default data lake format and adopting its key encoding and bucketing strategy,
allowing Lakehouse storage to be enabled dynamically after table creation. This eliminates the need for table recreation, improving usability.
Additionally, Paimon dependency is upgraded to version 1.0.1 in this release.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flink-integration">Flink Integration<a href="https://fluss.apache.org/blog/releases/0.6/#flink-integration" class="hash-link" aria-label="Direct link to Flink Integration" title="Direct link to Flink Integration">​</a></h2>
<p>This version introduces the following enhancements to the Flink connector:</p>
<ol>
<li><strong>Sink Support for Ignoring Retractions:</strong>
Both Primary Key Tables and Log Tables now support the <code>'sink.ignore-delete'</code> parameter in their Sink implementations. This enables better compatibility with scenarios involving retraction messages, meeting the demands of more complex streaming data processing.</li>
<li><strong>Enhanced Partition Table Operations:</strong>
Partitioned tables now support <code>ALTER TABLE ADD/DROP PARTITION</code> and <code>SHOW PARTITIONS</code> operations, further improving the flexibility and usability of partition management.</li>
<li><strong>Sink Interface Upgrade:</strong>
The <code>SinkFunction</code> has been upgraded to the <code>SinkV2</code> interface, laying the groundwork for full compatibility with Flink 2.0 in the next version. This ensures the system's scalability and compatibility in future releases.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgrade-notes">Upgrade Notes<a href="https://fluss.apache.org/blog/releases/0.6/#upgrade-notes" class="hash-link" aria-label="Direct link to Upgrade Notes" title="Direct link to Upgrade Notes">​</a></h2>
<p>The Fluss community try to ensure compatibility during upgrades. However, upgrading from Fluss 0.5 to 0.6 is an incompatible upgrade.
Starting with version 0.6, we will officially provide backward compatibility to ensure smoother and more reliable upgrades in future releases.
Therefore, version 0.6 is the recommended version for adoption and ecosystem integration.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-plan">Future Plan<a href="https://fluss.apache.org/blog/releases/0.6/#future-plan" class="hash-link" aria-label="Direct link to Future Plan" title="Direct link to Future Plan">​</a></h2>
<p>In the next version, we will focus on the development of the following core features:</p>
<ol>
<li>
<p><strong>New Lake-Stream Integrated Architecture:</strong>
A completely new architecture designed for large-scale production environments, featuring plug-in support for mainstream lake formats such as Iceberg and Hudi. This addresses key pain points in Tiering Service performance, scalability, and operational efficiency, providing a more reliable Lakehouse integrated solution for enterprise use cases.</p>
</li>
<li>
<p><strong>Authentication and Authorization:</strong>
Introducing plugin-based authentication and fine-grained access control to meet the stringent data security requirements of enterprises.</p>
</li>
<li>
<p><strong>Kafka Compatibility:</strong>
Compatibility with the Kafka network protocol, enabling seamless integration with the Kafka ecosystem.</p>
</li>
</ol>
<p>For more details about the next release roadmap, please visit the community <a href="https://github.com/alibaba/fluss/discussions/556" target="_blank" rel="noopener noreferrer">discussion page</a>. Your suggestions and contributions are highly welcomed!</p>
<p>Fluss is under active development. Be sure to stay updated on the project, give it a try and if you like it, don’t forget to give it some ❤️ via ⭐ on <a href="https://github.com/alibaba/fluss" target="_blank" rel="noopener noreferrer">GitHub</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="list-of-contributors">List of Contributors<a href="https://fluss.apache.org/blog/releases/0.6/#list-of-contributors" class="hash-link" aria-label="Direct link to List of Contributors" title="Direct link to List of Contributors">​</a></h2>
<p>The Fluss community would like to express gratitude to all the 45 contributors who made this release possible:</p>
<p>Benchao Li, ForwardXu, Gang Yang, Georgios Andrianakis, Giannis Polyzos, Hongshun Wang, Jark Wu, Kerwin, Leonard Xu, LiJingwei, Liu Xiao, MehulBatra, Michael Koepf, Nicholas Jiang, Ron, RunningDB, Sagar Sumit, SeungMin, Shuo Cheng, Stan, SteNicholas, Tyrantlucifer, Vipamp, WangS-C, WenjunMin, Wenston Xin, Xiaojian Sun, Yang Guo, Yubin Li, Yuepeng Pan, Zmm, benjobs, gongzhongqiang, gyang94, jon-qj, luoyuxia, moses, psxjoy, wangwj, wudi, xiaozhou, yunhong, yuxia Luo, 码界探索, 道君</p>]]></content>
        <author>
            <name>Jark Wu</name>
            <uri>https://github.com/wuchong</uri>
        </author>
        <category label="releases" term="releases"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Towards A Unified Streaming & Lakehouse Architecture]]></title>
        <id>https://fluss.apache.org/blog/unified-streaming-lakehouse/</id>
        <link href="https://fluss.apache.org/blog/unified-streaming-lakehouse/"/>
        <updated>2025-01-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>The unification of Lakehouse and streaming storage represents a major trend in the future development of modern data lakes and streaming storage systems. Designed specifically for real-time analytics, Fluss has embraced a unified Streaming and Lakehouse architecture from its inception, enabling seamless integration into existing Lakehouse architectures.</p>
<p>Fluss is designed to address the demands of real-time analytics with the following key capabilities:</p>
<ul>
<li><strong>Real-Time Stream Reading and Writing:</strong> Supports millisecond-level end-to-end latency.</li>
<li><strong>Columnar Stream:</strong> Optimizes storage and query efficiency.</li>
<li><strong>Streaming Updates:</strong> Enables low-latency updates to data streams.</li>
<li><strong>Changelog Generation:</strong> Supports changelog generation and consumption.</li>
<li><strong>Real-Time Lookup Queries:</strong> Facilitates instant lookup queries on primary keys.</li>
<li><strong>Streaming &amp; Lakehouse Unification:</strong> Seamlessly integrates streaming and lakehouse storage for unified data processing.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="fluss-unified-streaming--lakehouse-architecture">Fluss Unified Streaming &amp; Lakehouse Architecture<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#fluss-unified-streaming--lakehouse-architecture" class="hash-link" aria-label="Direct link to Fluss Unified Streaming &amp; Lakehouse Architecture" title="Direct link to Fluss Unified Streaming &amp; Lakehouse Architecture">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Unification Solutions" src="https://fluss.apache.org/assets/images/img1-163f1412a1ed7b661686302df5bf9edb.png" width="1866" height="635" class="img_ev3q">
The Fluss architecture is designed to provide millisecond-level end-to-end latency, ensuring high-performance real-time data writing and reading. A core component of this architecture is the <strong>Tiering Service</strong>, which continuously offloads data in Fluss into a standard lakehouse format, such as <code>Apache Paimon</code> or <code>Apache Iceberg</code>. This tiering ensures that external query engines can directly analyze data in the Lakehouse format, enabling efficient batch and real-time analytics.
In this architecture:</p>
<ul>
<li><strong>Latest Data in Fluss:</strong> Fluss stores the most recent, high-fidelity data for real-time analytics.</li>
<li><strong>Historical Data in Paimon:</strong> Older data is compacted and stored in Apache Paimon for large-scale historical analysis.</li>
</ul>
<p>By leveraging Apache Flink, the integration of Fluss and Paimon supports Union Reads, which combine real-time data in Fluss with historical data in Paimon. This enables analytical queries with second-level freshness, allowing businesses to benefit from up-to-date insights while maintaining access to extensive historical datasets.</p>
<p>The Streaming/Lakehouse unification design of Fluss provides:</p>
<ul>
<li><strong>Unified Architecture:</strong> Simplifies the Lakehouse ecosystem by combining the strengths of streaming and Lakehouse storage.</li>
<li><strong>Enhanced Real-Time Capabilities:</strong> Millisecond-level latency ensures data is always fresh for critical use cases.</li>
<li><strong>Seamless Compatibility:</strong> Native support for standard lakehouse formats ensures interoperability with existing analytics engines.</li>
<li><strong>Optimized Data Management:</strong> Combines real-time and historical data seamlessly for comprehensive analytics workflows.</li>
</ul>
<p>Fluss is <strong>a next-generation approach to streaming storage, purpose-built to complement Lakehouse architectures</strong> and drive the adoption of a streaming and Lakehouse unification across industries.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unified-metadata">Unified metadata<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#unified-metadata" class="hash-link" aria-label="Direct link to Unified metadata" title="Direct link to Unified metadata">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Unification Solutions" src="https://fluss.apache.org/assets/images/img2-86b0eb7b0f26884f8ead16dc4a8db648.png" width="1842" height="732" class="img_ev3q"></p>
<p>In traditional architectures, streaming storage systems like Kafka and Lakehouse storage solutions like Apache Paimon operated as distinct entities, each maintaining its own metadata. For computing engines such as Apache Flink, this separation presented two significant challenges:</p>
<ol>
<li><strong>Dual Catalogs:</strong> Users were required to create and manage two separate catalogs—one for streaming storage and another for lake storage.</li>
<li><strong>Manual Switching:</strong> Accessing data involved manually switching between catalogs to determine whether to query stream storage or lake storage, resulting in operational complexity and inefficiencies.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unified-access-in-fluss">Unified Access in Fluss<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#unified-access-in-fluss" class="hash-link" aria-label="Direct link to Unified Access in Fluss" title="Direct link to Unified Access in Fluss">​</a></h3>
<p>In the Fluss, although Fluss and Paimon still maintain independent metadata, they expose a unified catalog and a single table abstraction to the computing engine, such as Apache Flink. This unified approach offers several key advantages:</p>
<ul>
<li><strong>Simplified Data Access:</strong> Users can seamlessly access both Lakehouse storage (Paimon) and streaming storage (Fluss) through a single catalog, eliminating the need to manage or switch between separate catalogs.</li>
<li><strong>Integrated Querying:</strong> The unified table abstraction allows direct access to real-time data in Fluss and historical data in Paimon. For scenarios requiring both, users can leverage <code>Union Reads</code>, combining data from Fluss and Paimon to enable comprehensive analytics with second-level data freshness.</li>
<li><strong>Operational Efficiency:</strong> By presenting a cohesive interface, the architecture reduces operational complexity, making it easier for users to work with real-time and historical data within a single workflow.</li>
</ul>
<p>This unified approach streamlines the interaction between computing engines and storage layers, enhancing both usability and productivity while supporting the high-performance demands of modern analytics workflows.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="alignment-of-data-distribution">Alignment of Data Distribution<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#alignment-of-data-distribution" class="hash-link" aria-label="Direct link to Alignment of Data Distribution" title="Direct link to Alignment of Data Distribution">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Unification Solutions" src="https://fluss.apache.org/assets/images/img3-d0ea956fb83807118c4d522bdd7b30f4.png" width="1777" height="856" class="img_ev3q"></p>
<p>In the Fluss, the data distribution between Fluss and Lakehouse storage (e.g., Apache Paimon) is strictly aligned. Fluss supports partitioned tables and buckets, and its bucketing algorithm is fully consistent with Paimon’s. This ensures that a given piece of data is always allocated to the same bucket in both systems, creating a one-to-one correspondence between Fluss buckets and Paimon buckets.
This strong consistency in data distribution provides two significant benefits:</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-elimination-of-shuffle-overhead-during-tiering">1. Elimination of Shuffle Overhead During Tiering<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#1-elimination-of-shuffle-overhead-during-tiering" class="hash-link" aria-label="Direct link to 1. Elimination of Shuffle Overhead During Tiering" title="Direct link to 1. Elimination of Shuffle Overhead During Tiering">​</a></h4>
<p>When tiering data from Fluss into Paimon format:</p>
<ul>
<li>A Fluss bucket (e.g., bucket1) can be tiered directly into the corresponding Paimon bucket (bucket1).</li>
<li>There is no need to read data from a Fluss bucket, calculate which Paimon bucket each piece of data belongs to, and then write it to the appropriate Paimon bucket.</li>
</ul>
<p>By bypassing this intermediate redistribution step, the architecture avoids costly shuffle overhead, significantly improving compaction efficiency.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-prevention-of-data-inconsistencies">2. Prevention of Data Inconsistencies<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#2-prevention-of-data-inconsistencies" class="hash-link" aria-label="Direct link to 2. Prevention of Data Inconsistencies" title="Direct link to 2. Prevention of Data Inconsistencies">​</a></h4>
<p>Data consistency is maintained through the use of an identical bucketing algorithm in both Fluss and Paimon. This algorithm calculates the bucket assignment for each piece of data as follows:</p>
<blockquote>
<p>bucket_id = hash(row) % bucket_num</p>
</blockquote>
<p>By employing the same hash function and algorithm, Fluss and Paimon ensure consistent bucket assignment. If differing algorithms were used, inconsistencies would arise. For example:</p>
<ul>
<li>For a primary key table, a data row a might be assigned to bucket1 in Fluss but to bucket2 in Paimon.</li>
<li>During tiering, if rows were mistakenly placed in bucket1 in Paimon (per Fluss’s assignment), users would fail to locate the data in Paimon due to the mismatch.</li>
</ul>
<p>By maintaining strong alignment in data distribution, the architecture eliminates this risk, ensuring data consistency across Fluss and Paimon while simplifying compaction workflows. This alignment underscores the robustness and efficiency of the Fluss unification design.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="streaming-reading-more-efficient-data-tracing">Streaming Reading: More Efficient Data Tracing<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#streaming-reading-more-efficient-data-tracing" class="hash-link" aria-label="Direct link to Streaming Reading: More Efficient Data Tracing" title="Direct link to Streaming Reading: More Efficient Data Tracing">​</a></h3>
<p>In the Fluss, historical data resides in Lakehouse storage, while real-time data is maintained in Fluss. During streaming reads, this architecture enables a seamless combination of historical and real-time data access:</p>
<ul>
<li><strong>Historical Data Access:</strong> Fluss retrieves historical data directly from the Lakehouse storage, leveraging its inherent advantages, such as:<!-- -->
<ul>
<li><strong>Efficient Filter Pushdown:</strong> Enables query engines to apply filtering conditions at the storage layer, reducing the amount of data read and improving performance.</li>
<li><strong>Column Pruning:</strong> Allows retrieval of only the necessary columns, optimizing data transfer and query efficiency.</li>
<li><strong>High Compression Ratios:</strong> Minimizes storage overhead while maintaining fast retrieval speeds.</li>
</ul>
</li>
<li><strong>Real-Time Data Access:</strong> Fluss concurrently reads the latest real-time data from its own storage, ensuring up-to-the-millisecond freshness.</li>
</ul>
<p>By combining the strengths of Lakehouse storage for efficient historical data retrieval and Fluss for real-time streaming data, this architecture delivers a highly performant and scalable solution for streaming read scenarios. This integration ensures that users benefit from low-latency data freshness and optimized query performance across both historical and real-time datasets.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="batch-reading-data-freshness-in-seconds">Batch Reading: Data Freshness in Seconds<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#batch-reading-data-freshness-in-seconds" class="hash-link" aria-label="Direct link to Batch Reading: Data Freshness in Seconds" title="Direct link to Batch Reading: Data Freshness in Seconds">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Unification Solutions" src="https://fluss.apache.org/assets/images/img4-06aab50ae6bb5a5df5cc0e2658815c1f.png" width="1770" height="747" class="img_ev3q"></p>
<p>Historical data is stored in the Lakehouse, and real-time data is stored in Fluss. In batch reading scenarios, computing engines (such as Flink) can perform union reading of data in Fluss and lake storage to achieve analysis of data freshness in seconds.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-flink-and-fluss">Apache Flink and Fluss<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#apache-flink-and-fluss" class="hash-link" aria-label="Direct link to Apache Flink and Fluss" title="Direct link to Apache Flink and Fluss">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Unification Solutions" src="https://fluss.apache.org/assets/images/img5-36f56d95c22f50252c6a5caedbfed1d4.png" width="1761" height="730" class="img_ev3q">
Fluss exposes a unified API to Flink users, allowing them to choose whether to use union reads or read-only reads on the Lakehouse, using the following SQL:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> orders</span><br></span></code></pre></div></div>
<p>This reads the complete data of the orders table and Flink will union read the data in Fluss and the Lakehouse.
If the user only needs to read data on the data lake, you can add the <code>$lake</code> suffix after the table to be read. The SQL is as follows</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- analytical queries</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">COUNT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">MAX</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">t</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">SUM</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">amount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> orders$lake</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">-- query system tables</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> orders$lake$snapshots</span><br></span></code></pre></div></div>
<p>For scenarios where data on a data lake is read-only, Fluss inherits all the optimizations and capabilities of the lake format as a Flink source, such as runtime filters, system table queries, and time travel.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="benefits-of-the-unified-architecture">Benefits Of The Unified Architecture<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#benefits-of-the-unified-architecture" class="hash-link" aria-label="Direct link to Benefits Of The Unified Architecture" title="Direct link to Benefits Of The Unified Architecture">​</a></h2>
<p>Next, using Apache Paimon as an example, we will illustrate the advantages of using Fluss to build a unified architecture. We will highlight how Fluss enhances the capabilities of Paimon, creating a unified solution that combines the strengths of both systems for efficient real-time and historical data processing.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="second-level-timeliness">Second-level Timeliness<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#second-level-timeliness" class="hash-link" aria-label="Direct link to Second-level Timeliness" title="Direct link to Second-level Timeliness">​</a></h3>
<p>In Apache Paimon, data visibility is traditionally determined by the Flink checkpoint interval, which typically operates at one minute-level granularity. However, by integrating Fluss with Paimon to build unfiied architecture, this dependency is eliminated.</p>
<p>With this unification, data becomes visible immediately upon entering Fluss, significantly improving data timeliness to second-level latency. This enhancement ensures that real-time insights can be derived more quickly, meeting the demands of time-sensitive applications while maintaining seamless access to both historical and real-time data.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="consistent-data-freshness-across-all-layers">Consistent Data Freshness Across All Layers<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#consistent-data-freshness-across-all-layers" class="hash-link" aria-label="Direct link to Consistent Data Freshness Across All Layers" title="Direct link to Consistent Data Freshness Across All Layers">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Unification Solutions" src="https://fluss.apache.org/assets/images/img6-5fdec641b3032d1c0f236cf990d914da.png" width="1570" height="782" class="img_ev3q">
In the process of building a data warehouse, it is common to organize and manage data by layering, such as Bronze, Silver and Gold following the medallion architecture. As data flows through these layers, maintaining data freshness becomes a critical consideration.</p>
<p>When Paimon is used as the sole storage solution for each layer, data visibility depends on the Flink checkpoint interval. This introduces cumulative delays:</p>
<ul>
<li>The changelog for a given layer becomes visible only after the completion of a Flink checkpoint.</li>
<li>As this changelog propagates to subsequent layers, the data freshness delay increases with each checkpoint interval.</li>
</ul>
<p>For example, with a Flink checkpoint interval of 1 minute:</p>
<ul>
<li>The Bronze layer experiences 1-minute delay.</li>
<li>The Silver layer adds another 1-minute delay, totaling 2 minutes.</li>
<li>The Gold layer adds yet another 1-minute delay, resulting in a cumulative 3-minute delay.</li>
</ul>
<p>With Fluss and Paimon though we get:</p>
<ul>
<li><strong>Immediate Data Visibility:</strong> Data in Fluss becomes visible immediately upon ingestion, without waiting for a Flink checkpoint to complete. The changelog is instantly transferred to the next layer.</li>
<li><strong>Consistent Data Freshness:</strong> The data freshness across all layers is consistent and measured in seconds, eliminating cumulative delays.</li>
</ul>
<p>Additionally, if the Fluss Tiering Service is configured with a tiering cycle of 1 minute, the data delay for Paimon storage at each layer is limited to 1 minute, regardless of the number of layers. This ensures:</p>
<ul>
<li><strong>Real-Time Data Processing:</strong> Layers can propagate and process data with minimal delay.</li>
<li><strong>Optimized Streaming &amp; Lakehouse Unification:</strong> The architecture balances the strengths of real-time and batch-oriented storage.</li>
</ul>
<p>This integration significantly improves the performance and usability of layered data warehouses, enabling faster insights and better responsiveness to real-time demands.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="more-efficient-and-higher-throughput-changelog-generation">More efficient and higher throughput changelog generation<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#more-efficient-and-higher-throughput-changelog-generation" class="hash-link" aria-label="Direct link to More efficient and higher throughput changelog generation" title="Direct link to More efficient and higher throughput changelog generation">​</a></h3>
<p>In Apache Paimon, there are currently two commonly used methods for generating changelogs (excluding the Input Producer, which requires more stringent data source requirements and is not considered here):</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="lookup-changelog-producer">Lookup Changelog Producer<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#lookup-changelog-producer" class="hash-link" aria-label="Direct link to Lookup Changelog Producer" title="Direct link to Lookup Changelog Producer">​</a></h4>
<ul>
<li><strong>Advantages:</strong> Offers high timeliness for generating changelogs.</li>
<li><strong>Challenges:</strong> Consumes significant computational resources, leading to higher operational costs.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="full-compaction-producer">Full Compaction Producer:<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#full-compaction-producer" class="hash-link" aria-label="Direct link to Full Compaction Producer:" title="Direct link to Full Compaction Producer:">​</a></h4>
<ul>
<li><strong>Advantages:</strong> Does not require additional resource consumption, as changelogs are generated during the Full Compaction process.</li>
<li><strong>Challenges:</strong> Suffers from poor timeliness, as changelog generation is delayed until a Full Compaction is triggered, which typically occurs after several checkpoints.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="fluss-and-paimon-optimizing-changelog-generation">Fluss and Paimon: Optimizing Changelog Generation<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#fluss-and-paimon-optimizing-changelog-generation" class="hash-link" aria-label="Direct link to Fluss and Paimon: Optimizing Changelog Generation" title="Direct link to Fluss and Paimon: Optimizing Changelog Generation">​</a></h4>
<p>The Fluss and Paimon architecture strikes a balance between timeliness and performance in changelog generation:</p>
<ul>
<li><strong>Changelog Timeliness:</strong> Fluss generates changelogs in seconds, ensuring near real-time visibility of data changes.</li>
<li><strong>Efficient Conversion:</strong> The Fluss Tiering Service efficiently writes Fluss changelogs directly into the Paimon changelog format. This conversion process is highly optimized, avoiding resource-intensive operations such as lookups. Instead, it relies on direct read-and-write operations, significantly reducing overhead.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="key-benefits-of-fluss-and-paimon-changelog-generation">Key Benefits of Fluss and Paimon Changelog Generation<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#key-benefits-of-fluss-and-paimon-changelog-generation" class="hash-link" aria-label="Direct link to Key Benefits of Fluss and Paimon Changelog Generation" title="Direct link to Key Benefits of Fluss and Paimon Changelog Generation">​</a></h4>
<ol>
<li><strong>Improved Timeliness:</strong> Near real-time changelog generation ensures data freshness and faster insights.</li>
<li><strong>Resource Efficiency:</strong> By eliminating the need for computationally expensive operations, the architecture reduces resource consumption while maintaining high performance.</li>
<li><strong>Seamless Integration:</strong> The direct compatibility between Fluss changelogs and Paimon changelog formats simplifies the process, enhancing system efficiency and reducing operational complexity.</li>
</ol>
<p>This architecture provides an elegant solution for use cases that demand both low-latency data updates and optimized resource utilization, making it a robust choice for modern data processing needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="enabling-multi-writer-support-for-paimon-partial-updates">Enabling Multi-Writer Support for Paimon Partial Updates<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#enabling-multi-writer-support-for-paimon-partial-updates" class="hash-link" aria-label="Direct link to Enabling Multi-Writer Support for Paimon Partial Updates" title="Direct link to Enabling Multi-Writer Support for Paimon Partial Updates">​</a></h3>
<p>Partial updates are a critical feature in Apache Paimon, particularly for managing large, wide tables. However, in the current Paimon architecture, performing partial updates on wide tables presents significant challenges:</p>
<ul>
<li><strong>Single Writer Limitation:</strong> To ensure consistency, all partial updates to a table must be consolidated into a single SQL job. This requires using a UNION statement to combine all partial update operations into a single pipeline, ensuring only one writer is responsible for updating the table.</li>
<li><strong>Operational Complexity:</strong> Consolidating all updates into one job makes it difficult to manage and tune individual update operations, leading to challenges in scalability and flexibility.</li>
</ul>
<p>With Fluss and Paimon integration these limitations are eliminated</p>
<p><img decoding="async" loading="lazy" alt="Unification Solutions" src="https://fluss.apache.org/assets/images/img7-8b8e86a6e036ca0f37b6d53f8fc5ae77.png" width="1833" height="783" class="img_ev3q"></p>
<ul>
<li><strong>Intermediate Synchronization via Fluss:</strong> All updates pass through Fluss, which serves as an intermediary layer to synchronize changes with Paimon.</li>
<li><strong>Support for Concurrent Updates:</strong> Fluss enables concurrent updates from multiple SQL jobs, removing the need to consolidate updates into a single job.</li>
<li><strong>Fine-Grained Job Management:</strong> With the ability to execute multiple independent SQL jobs for updating any number of columns in a wide table, users can perform job-level tuning and management, improving operational efficiency and flexibility.</li>
</ul>
<p>This enables organizations to unlock several key advantages:</p>
<ul>
<li><strong>High Real-Time Performance:</strong> Lakehouse storage achieves second-level data freshness, meeting the demands of real-time data applications.</li>
<li><strong>Unified Streaming and Lakehouse Processing:</strong> Data is written once into the architecture and can seamlessly support both batch and streaming use cases, reducing duplication of effort.</li>
<li><strong>Lower Operational Costs:</strong> Simplified maintenance and reduced complexity of partial updates, lower storage costs by minimizing data duplication and reduced computational costs by eliminating redundant processing pipelines.</li>
</ul>
<p>The Fluss and Paimon architecture offers a robust solution for managing partial updates in wide tables while delivering significant improvements in performance, scalability, and operational efficiency.</p>
<p>All the above highlight the power of a unified streaming and Lakehouse architecture in modern data systems, ensuring real-time capabilities with streamlined workflows.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-plans">Future plans<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#future-plans" class="hash-link" aria-label="Direct link to Future plans" title="Direct link to Future plans">​</a></h2>
<p>The Fluss community is actively working to enhance the streaming and Lakehouse unification capabilities, focusing on the following key areas.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="expanding-union-read-ecosystem">Expanding Union Read Ecosystem<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#expanding-union-read-ecosystem" class="hash-link" aria-label="Direct link to Expanding Union Read Ecosystem" title="Direct link to Expanding Union Read Ecosystem">​</a></h3>
<p>Currently, Union Read functionality is integrated with Apache Flink, enabling seamless querying of real-time and historical data. Moving forward, the community plans to extend this capability to support additional query engines, such as Apache Spark and StarRocks, further broadening its ecosystem compatibility and adoption.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="diversifying-lake-storage-formats">Diversifying Lake Storage Formats<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#diversifying-lake-storage-formats" class="hash-link" aria-label="Direct link to Diversifying Lake Storage Formats" title="Direct link to Diversifying Lake Storage Formats">​</a></h3>
<p>At present, Fluss supports Apache Paimon as its primary lake storage. To meet diverse user requirements, the community aims to add support for more lake formats, including <strong>Apache Iceberg</strong> and <strong>Apache Hudi</strong>, thereby providing flexibility and interoperability with a wider range of Lakehouse ecosystems.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="optimizing-arrow-to-parquet-conversion">Optimizing Arrow-to-Parquet Conversion<a href="https://fluss.apache.org/blog/unified-streaming-lakehouse/#optimizing-arrow-to-parquet-conversion" class="hash-link" aria-label="Direct link to Optimizing Arrow-to-Parquet Conversion" title="Direct link to Optimizing Arrow-to-Parquet Conversion">​</a></h3>
<p>Fluss leverages Apache Arrow as its storage format, while many Lakehouse formats, such as Paimon, Iceberg, and Hudi, utilize parquet for storage. The Apache Arrow community has developed a mature and efficient solution for converting Arrow data to Parquet. In the future, Fluss will integrate these advancements to enable high-performance Arrow-to-Parquet conversions, significantly reducing the computational overhead of the tiering service and enhancing overall efficiency.</p>]]></content>
        <author>
            <name>Luo Yuxia</name>
            <uri>https://github.com/luoyuxia</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Fluss: Streaming Storage for Real-Time Analytics]]></title>
        <id>https://fluss.apache.org/blog/fluss-intro/</id>
        <link href="https://fluss.apache.org/blog/fluss-intro/"/>
        <updated>2024-12-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>We have discussed the challenges of using Kafka for real-time analytics in our previous <a href="https://fluss.apache.org/blog/why-fluss/">blog post</a>.
Today, we are excited to introduce Fluss, a cutting-edge streaming storage system designed to power real-time analytics.
We are going to explore Fluss's architecture, design principles, key features, and how it addresses the challenges of using Kafka for real-time analytics.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-features-of-fluss">Key Features of Fluss<a href="https://fluss.apache.org/blog/fluss-intro/#key-features-of-fluss" class="hash-link" aria-label="Direct link to Key Features of Fluss" title="Direct link to Key Features of Fluss">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="columnar-stream">Columnar Stream<a href="https://fluss.apache.org/blog/fluss-intro/#columnar-stream" class="hash-link" aria-label="Direct link to Columnar Stream" title="Direct link to Columnar Stream">​</a></h3>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img1-591c05a64a0e27a33a3ce5776391d92d.jpg" width="3634" height="1188" class="img_ev3q">
Fluss is, as anticipated, a columnar-based streaming storage, leveraging the <a href="https://arrow.apache.org/docs/python/ipc.html" target="_blank" rel="noopener noreferrer">Apache Arrow IPC Streaming Format</a> for its underlying file storage.
This enables Fluss to achieve highly efficient column pruning while maintaining millisecond-level streaming reads and writes capabilities.</p>
<p>The performance benefits of Fluss are evident in its benchmarks against Kafka. In the comparison, the horizontal axis represents the number of columns read, while the vertical axis shows the read throughput. The results clearly demonstrate that Fluss's read performance scales proportionally with the reduction in columns read. For example, when the number of columns is reduced by 90%, Fluss achieves a 10x increase in read throughput.</p>
<p>A key advantage of Fluss is that column pruning is performed server-side and only the needed column data will be transferred to client-side. This architectural design not only enhances performance but also reduces network costs and resource consumption, making Fluss a highly efficient solution for real-time streaming analytics.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="real-time-updates-and-changelog">Real-Time Updates and Changelog<a href="https://fluss.apache.org/blog/fluss-intro/#real-time-updates-and-changelog" class="hash-link" aria-label="Direct link to Real-Time Updates and Changelog" title="Direct link to Real-Time Updates and Changelog">​</a></h3>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img2-846063bd092bc571aad305ae7253a190.jpg" width="3484" height="1146" class="img_ev3q">
Real-time updates and Changelog are very important features required by streaming analytics and Flink.
At its core, Fluss streaming storage is built on a Log Tablet, with a key-value (KV) index constructed over the Log.
The relationship between the Log and KV mirrors the concept of stream-table duality:
updates to the KV generate a changelog that is written to the Log. In the event of a failure, data from the Log is used to recover the KV.</p>
<p>The KV index is implemented as a Log-Structured Merge (LSM) tree to support large-scale real-time updates,
and also support partial-update which can be used to build wide tables very efficiently. In addition, the changelog
generated by KV can be read directly by Flink without additional deduplication cost, which saves a lot of computing resources.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="queryable">Queryable<a href="https://fluss.apache.org/blog/fluss-intro/#queryable" class="hash-link" aria-label="Direct link to Queryable" title="Direct link to Queryable">​</a></h3>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img3-f76df2882b217d4aa58efba2edae07d8.jpg" width="3468" height="1148" class="img_ev3q">
The built-in KV indexes enable high-performance primary key lookups, making Fluss suitable for real-time processing tasks such as dimension table joins. Users can also perform direct data exploration with Fluss, including queries with operations like LIMIT and COUNT, to make debugging data in Fluss very easy.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unification-of-stream-and-lakehouse">Unification of Stream and Lakehouse<a href="https://fluss.apache.org/blog/fluss-intro/#unification-of-stream-and-lakehouse" class="hash-link" aria-label="Direct link to Unification of Stream and Lakehouse" title="Direct link to Unification of Stream and Lakehouse">​</a></h3>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img4-80846362d40e3239bfcd92216276b72d.jpg" width="3698" height="1218" class="img_ev3q">
One of Fluss's standout features is the unification of stream and Lakehouse. In traditional Lambda architecture, you have to duplicate data in both real-time layer and batch layer. While Fluss eliminates this redundancy by unifying "data stored in stream" and "data stored in lake". This unification ensures consistent data and metadata while reducing storage costs and simplifying data workflows.</p>
<p>At its core, Fluss incorporates a <code>compaction service</code> that ensures seamless integration between stream and lake storage. This service automatically and continuously converts Fluss data into the data lake format.
A key feature here is called "Shared Data". The Lakehouse storage serves as the historical data layer for the streaming storage, which is optimized for storing long-term data with minute-level latencies. On the other hand, streaming storage serves as the real-time data layer for Lakehouse storage, which is optimized for storing short-term data with millisecond-level latencies.
The data is shared with each other, and is exposed as a single table.
For streaming queries on the table, it firstly uses the Lakehouse storage as historical data to have efficient catch-up read performance, and then seamlessly transitions to the streaming storage for real-time data, ensuring no duplicate data is read.
For batch queries on the table, streaming storage supplements real-time data for Lakehouse storage, enabling second-level freshness for Lakehouse analytics.
This capability, termed <strong>Union Read</strong>, allows both layers to work in tandem for highly efficient and accurate data access.</p>
<p>In addition, the automatically converted data lake tables fully adhere to open table format protocols, ensuring compatibility with existing query engines such as Apache Spark, StarRocks, and Trino.
These engines can directly query data on Lakehouse storage, seamlessly integrating it into users' existing Lakehouse architectures.</p>
<p>Fluss has already completed integration with Apache Paimon, and integration with Apache Iceberg is underway. This commitment to compatibility ensures that Fluss remains a flexible and powerful component in the modern data stack, bridging real-time and historical data for unified analytics and storage efficiency.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overall-architecture">Overall Architecture<a href="https://fluss.apache.org/blog/fluss-intro/#overall-architecture" class="hash-link" aria-label="Direct link to Overall Architecture" title="Direct link to Overall Architecture">​</a></h2>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img9-fb689d41f612ef840508c4c20399822c.jpg" width="3686" height="1242" class="img_ev3q">
This is the overall architecture of Fluss, a cutting-edge streaming storage solution designed specifically for real-time analytics. Fluss operates a server cluster to provide high-performance real-time read and write capabilities, while leveraging remote storage for data tiering to optimize storage costs. Additionally, Fluss integrates seamlessly with Lakehouse architectures, enabling robust query capabilities and a unified data ecosystem.</p>
<p>The core features of Fluss include real-time streaming reads and writes, column pruning, streaming updates, changelog subscription, real-time lookup queries, and integration of stream and Lakehouse.</p>
<p>With its robust architecture and comprehensive feature set, Fluss empowers organizations to bridge the gap between real-time and historical data, enabling efficient, scalable, and cost-effective solutions for real-time analytics.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-delta-join">Use Case: Delta Join<a href="https://fluss.apache.org/blog/fluss-intro/#use-case-delta-join" class="hash-link" aria-label="Direct link to Use Case: Delta Join" title="Direct link to Use Case: Delta Join">​</a></h2>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img5-c1bedf1a8c60844ffd67f77f722157f9.jpg" width="3650" height="1222" class="img_ev3q">
The combination of Fluss’s key features lends itself to a highly effective use case: Delta Join. Apache Flink provides a foundational feature called Stream-Stream Join, widely used for building wide tables. However, it is often one of the most challenging operations in Flink.
Stream-stream joins require maintaining the full upstream data in the state, leading to significant resource consumption. For instance, one of Taobao's largest Flink jobs is a stream-stream join (exposing associated orders), which needs to maintains a state of over 50 TB. This brings many challenges, such as high cost, unstable job, checkpoint timeout, slow restart recovery, etc.</p>
<p>To address these challenges, we developed a new Flink join operator implementation called Delta Join, leveraging Fluss’s streaming read and secondary-index lookup capabilities. Delta Join operates like a "bilateral driven lookup join", that is:
when data arrives from the left stream, the right table is queried using the join key;
when data arrives from the right stream, the left table is queried using the join key.
This approach eliminates state like Lookup Join, while preserving the semantics of a Stream-Stream Join (any updates on either side triggers an update to the join result).</p>
<p>We tested Taobao's largest stream-stream join job and migrated to delta join. The results were impressive:</p>
<ul>
<li><strong>Eliminate State:</strong> Migrating from stream-stream join to delta join eliminated the need for <code>50 TB</code> join state, leading to enhanced job stability and avoid checkpoint timeouts.</li>
<li><strong>Resource Optimization:</strong> Flink resource cost decreased by 10x, dropping from <code>2300 CU</code> to <code>200 CU</code>, while maintaining the same throughput.</li>
<li><strong>Faster Backfilling:</strong> By leveraging Fluss’s Lakehouse integration, we can use the converted Paimon/Iceberg table and Sort-Merge Join in batch mode for data backfilling. Re-processing one day data was reduced from <code>4 hours</code> to <code>30 minutes</code>.</li>
</ul>
<p>Besides the numbers, Delta Join's most significant benefit lies in its user flexibility.
Unlike traditional stream-stream joins, where the state is tightly coupled with Flink job, operating as an opaque 'black box', any job modification requires a costly and time-consuming state rebuild.
Delta Join addresses this by decoupling the state from the job, facilitating effortless job modifications without the need to reconstruct the state.
This separation not only boosts backfilling efficiency but also makes state data easily accessible in Fluss for analysis, thereby enhancing business agility and increasing developer productivity.</p>
<p>To formalize this innovation, we submitted the Delta Join <a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-486%3A+Introduce+A+New+DeltaJoin" target="_blank" rel="noopener noreferrer">FLIP-486 proposal</a> to the Apache Flink community. We invite those interested to review and contribute to this exciting advancement.</p>
<p>Delta Join, powered by Fluss, represents a breakthrough in real-time analytics by significantly reducing resource consumption, enhancing performance, and unlocking flexibility in stateful stream processing.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-plan">Future Plan<a href="https://fluss.apache.org/blog/fluss-intro/#future-plan" class="hash-link" aria-label="Direct link to Future Plan" title="Direct link to Future Plan">​</a></h2>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img6-3e455650eb36e97091211441c91b48ac.jpg" width="3700" height="1116" class="img_ev3q">
The future planning for Fluss involves three key aspects, each corresponding to its relationship with three open-source software projects:</p>
<ul>
<li><strong>Apache Kafka Protocol Compatibility:</strong> This is aimed at helping existing streaming data migrate to Fluss more effectively.</li>
<li><strong>Storage for Apache Flink:</strong> Fluss aims to be the best storage for Apache Flink and streaming analytics, offering deep optimization with Flink across the storage, optimizer and execution layer. Delta Join marks our first major step, with many more exciting features on the way.</li>
<li><strong>Real-Time Data Layer for Apache Iceberg:</strong> By unifying stream and Lakehouse, Fluss is committed to providing a robust real-time data layer for Apache Iceberg and Apache Paimon. This vision includes creating a unified storage solution that supports both real-time and offline analytics.</li>
</ul>
<p>There are more exciting work happening in the community. You can check out <a href="https://fluss.apache.org/roadmap/">Fluss Roadmap</a> for a comprehensive future planning.</p>]]></content>
        <author>
            <name>Jark Wu</name>
            <uri>https://github.com/wuchong</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why Fluss? Top 4 Challenges of Using Kafka for Real-Time Analytics]]></title>
        <id>https://fluss.apache.org/blog/why-fluss/</id>
        <link href="https://fluss.apache.org/blog/why-fluss/"/>
        <updated>2024-12-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>The industry is undergoing a clear and significant shift as big data computing transitions from offline to real-time processing.
This transition is revolutionizing various sectors, including the E-commerce, automotive networking, finance, and beyond,
where real-time data applications are becoming integral to operations. This evolution enables organizations to unlock greater
value by leveraging real-time insights to drive business impact and enhance decision-making.</p>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img1-a29d423ce0b5f952b79ad2babb903cf5.jpg" width="3656" height="1240" class="img_ev3q">
The evolution of big data technology is becoming increasingly impactful, reshaping the computing architecture landscape.
The traditional Hive-based data warehouse has given way to modern architectures, starting with Lakehouse models and progressing
to the Paimon streaming Lakehouse, which has gained significant traction in markets like China and more recently started expanding to EU/US markets.
The core driver behind these architectural innovations is the need to improve data processing timeliness. The data freshness is improved from traditional
T+1 (next-day readiness) to T+1 hours, and now T+1 minutes. However, Lakehouse architectures, being file-system-based,
inherently face minute-level latency as their practical upper limit.</p>
<p>Yet, many critical use cases, such as search and recommendation systems, advertisement attribution, and anomaly detection, demand second-level latency.
While big data technologies have advanced significantly, there remains a notable gap: a user-friendly, second-level storage solution tailored for big data analytics.</p>
<p>In most real-time data scenarios, Apache Kafka has emerged as the go-to second-level storage solution. Its integration with Apache Flink represents the dominant architecture for building real-time data warehouses. However, while widely adopted, this combination presents significant challenges for achieving true real-time analytics at scale. The limitations of using Kafka for big data analytics highlight the need for a more robust solution to meet the demands of modern real-time use cases.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kafka-falls-short-in-real-time-analytics">Kafka Falls Short in Real-Time Analytics<a href="https://fluss.apache.org/blog/why-fluss/#kafka-falls-short-in-real-time-analytics" class="hash-link" aria-label="Direct link to Kafka Falls Short in Real-Time Analytics" title="Direct link to Kafka Falls Short in Real-Time Analytics">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="no-support-for-updates">No Support for Updates<a href="https://fluss.apache.org/blog/why-fluss/#no-support-for-updates" class="hash-link" aria-label="Direct link to No Support for Updates" title="Direct link to No Support for Updates">​</a></h3>
<p>The first significant challenge with Apache Kafka is its lack of support for updates, a critical feature for data warehouses. In data warehousing, updates are often essential to correct or amend data. However, Kafka's inability to handle updates results in duplicate records for the same primary key. When consumed by a computing engine, this duplication necessitates costly deduplication processes to ensure accurate results.</p>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img2-d2d1a314768a1be3da0308e20851d3f3.jpg" width="3656" height="1172" class="img_ev3q"></p>
<p>In Apache Flink, for instance, handling this issue requires materializing all upstream data in state, which is resource-intensive. Every time data is consumed from Kafka, the deduplication process incurs a substantial overhead, significantly increasing computational and storage costs. This limitation not only impacts performance but also hampers the reusability of Kafka-stored data for downstream business processes.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lack-of-querying-capabilities">Lack of Querying Capabilities<a href="https://fluss.apache.org/blog/why-fluss/#lack-of-querying-capabilities" class="hash-link" aria-label="Direct link to Lack of Querying Capabilities" title="Direct link to Lack of Querying Capabilities">​</a></h3>
<p>The second major limitation of Apache Kafka is hard to debug, primarily due to its lack of native querying capabilities. In data warehousing, querying is a fundamental feature that facilitates troubleshooting and ad-hoc analysis to understand data trends. Unfortunately, Kafka operates much like a black box, making it challenging to perform these critical tasks without additional tools or layers.</p>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img3-32732f50a5420dad7d1dd6c5b3d17d6f.jpg" width="3696" height="1214" class="img_ev3q"></p>
<p>To address this limitation, the industry has adopted two primary approaches, each with its own trade-offs:</p>
<ul>
<li><strong>Synchronizing Kafka Data to an OLAP System:</strong> This allows for querying data using the OLAP system’s capabilities. However, this approach introduces additional components into the architecture, increasing both complexity and cost. Moreover, it risks data inconsistencies due to synchronization delays.</li>
<li><strong>Querying Kafka Directly Using Trino:</strong> While Trino can query Kafka, it relies solely on full scans, which are inefficient for large-scale operations. For instance, a simple query on just 1GB of Kafka data can take up to one minute, rendering it impractical for large datasets or real-time requirements.</li>
</ul>
<p>These limitations make Kafka unsuitable for efficient and scalable data exploration in modern data warehousing workflows.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="difficulty-with-data-backfilling">Difficulty with Data Backfilling<a href="https://fluss.apache.org/blog/why-fluss/#difficulty-with-data-backfilling" class="hash-link" aria-label="Direct link to Difficulty with Data Backfilling" title="Direct link to Difficulty with Data Backfilling">​</a></h3>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img4-5a57c638bb5dd478a86a9fcd1683734f.jpg" width="3526" height="1210" class="img_ev3q">
The third significant issue with Apache Kafka is processing historical data, also known as data backfilling, a common requirement in data warehousing.
For instance, in logistics, it usually needs to process and analyze historical data from several months ago. However, Kafka only retain data for a few days due to the high cost of storage.
Even though Kafka community has introduced <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-405%3A+Kafka+Tiered+Storage" target="_blank" rel="noopener noreferrer">Tiered Storage</a> to address the long-term data issue, it still has limitations.
Reading historical data still require all the data to pass through Kafka brokers, which can lead to brokers unstable and <a href="https://www.warpstream.com/blog/tiered-storage-wont-fix-kafka#increased-complexity-and-operational-burden" target="_blank" rel="noopener noreferrer">disrupt live traffics</a>.</p>
<p>These limitations highlight Kafka’s inefficiency as a solution for data backfilling in large-scale and long-term analytical use cases, further underscoring the need for more robust alternatives in real-time data warehousing.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="excessive-network-costs">Excessive Network Costs<a href="https://fluss.apache.org/blog/why-fluss/#excessive-network-costs" class="hash-link" aria-label="Direct link to Excessive Network Costs" title="Direct link to Excessive Network Costs">​</a></h3>
<p>The final major challenge with Apache Kafka lies in its high network costs, which account for an estimated 88% of Kafka's overall operational expenses. In data warehousing, the "one write, multiple read" pattern is common, with each consumer often requiring only a subset of the data. However, Kafka's design mandates that consumers read the entire dataset, regardless of how much is actually needed.</p>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img5-e185731d5e249a6c80b962b77b5a16ad.jpg" width="3636" height="1206" class="img_ev3q"></p>
<p>For instance, among the tens of thousands of Flink SQL jobs at Alibaba, only 49% of the upstream columns are utilized per job on average. Despite this, consumers must read all the columns and pay 100% networking cost, which is highly inefficient and wasteful.</p>
<p>In summary, using Kafka for real-time analytics presents several critical issues: <strong>(1) lack of support for updates</strong>, <strong>(2) absence of querying capabilities</strong>, <strong>(3) difficulty with data backfilling</strong>, and <strong>(4) excessive network costs</strong>. These limitations make the combination of Flink and Kafka less than ideal for real-time data warehousing.
But why Kafka lacks these abilities? Is it possible to add the abilities to Kafka?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kafka-is-not-designed-for-analytics">Kafka is not designed for Analytics<a href="https://fluss.apache.org/blog/why-fluss/#kafka-is-not-designed-for-analytics" class="hash-link" aria-label="Direct link to Kafka is not designed for Analytics" title="Direct link to Kafka is not designed for Analytics">​</a></h2>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img6-4741286b7e5d1410d5a8d7036e3cad8d.jpg" width="3620" height="1148" class="img_ev3q">
The root cause of these challenges lies in the fundamental design philosophy of Kafka: <strong>Kafka is designed for streaming events, NOT for streaming analytics</strong>. Each system has its own focus and strengths, and Kafka's design is optimized for message queue scenarios rather than analytical workloads.</p>
<p>In Kafka, data is typically stored in a row-oriented format, such as CSV, JSON, or Avro.
While this is highly efficient for use cases involving message streaming, it becomes a bottleneck for analytical scenarios.
Data analysis requires handling large volumes of data, and therefore heavily relies on data skipping capabilities from storage, such as column pruning and predicate pushdown.
For this reason, columnar storage is far better suited for analytical workloads, whereas Kafka's row-based storage is not designed to meet these demands effectively.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-fluss">Introducing Fluss<a href="https://fluss.apache.org/blog/why-fluss/#introducing-fluss" class="hash-link" aria-label="Direct link to Introducing Fluss" title="Direct link to Introducing Fluss">​</a></h2>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img7-06886bca9797751895c82d707cb04b2d.jpg" width="3644" height="1210" class="img_ev3q">
When visualizing the data ecosystem as a four-quadrant matrix, an intriguing pattern emerges.
The left side of the matrix represents operational systems, while the right side represents analytical systems.
The top half is dedicated to stream storage, and the bottom half to table storage.
In operational systems, both databases and stream storage predominantly use row-based formats, as row storage is more efficient for transactional workloads. Conversely, in analytical systems like Apache Iceberg and Snowflake, columnar storage is preferred due to its superior performance in analytical scenarios.</p>
<p>Interestingly, the upper-right quadrant of the matrix remains empty, indicating a significant gap in the market: a streaming storage for analytical scenarios. Unsurprisingly, such a storage would likely adopt a columnar format to effectively address the needs of real-time analytics.</p>
<p>To fill the gap and resolve problems in Flink and streaming analytics, we embarked on a journey two years ago to create a streaming storage. We named the project "<strong>FL</strong>ink <strong>U</strong>nified <strong>S</strong>treaming <strong>S</strong>torage", and from its initials, we derived the name <strong>Fluss</strong>.
<img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img8-87cfb5887e9a49febaacd805de5216fe.jpg" width="3700" height="946" class="img_ev3q">
Interestingly, Flink is derived from the German word for "<strong>agile</strong>", and Fluss, which translates to "<strong>river</strong>" in German, resonates deeply with the project’s vision.
It symbolizes the streaming data is continuously flowing, distributing and converging into data lakes, just like a river.
The launch of Fluss coincides with Flink's 10th anniversary, making it a fitting tribute to the project’s heritage and its enduring contribution to the streaming data landscape.</p>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/img9-fb689d41f612ef840508c4c20399822c.jpg" width="3686" height="1242" class="img_ev3q"></p>
<p>Learn more details about Fluss in the next <a href="https://fluss.apache.org/blog/fluss-intro/">blog post</a>, where we will delve deeper into Fluss's architecture, design principles, key features, and explore how it addresses the challenges of using Kafka for real-time analytics.</p>]]></content>
        <author>
            <name>Jark Wu</name>
            <uri>https://github.com/wuchong</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fluss is Now Open Source]]></title>
        <id>https://fluss.apache.org/blog/fluss-open-source/</id>
        <link href="https://fluss.apache.org/blog/fluss-open-source/"/>
        <updated>2024-11-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>Earlier this year at Flink Forward 2024 Berlin we <a href="https://www.ververica.com/blog/introducing-fluss" target="_blank" rel="noopener noreferrer">announced Fluss</a> and today we are thrilled to announce open-sourcing the project.
Fluss is a <strong>streaming storage system</strong> designed to power real-time analytics. It aspires to change how organizations approach real-time data by acting as the <strong>real-time data layer</strong> for the Lakehouse.
Its cutting-edge design enables businesses to achieve <strong>sub-second latency</strong>, <strong>high throughput</strong>, and <strong>cost efficiency</strong> for data analytics, making it the ideal solution for modern data-driven applications.</p>
<p>We have historically invested a lot of effort into advancing the data streaming ecosystem, being major contributors to <a href="https://flink.apache.org/" target="_blank" rel="noopener noreferrer">Apache Flink®</a>, <a href="https://www.ververica.com/blog/ververica-donates-flink-cdc-empowering-real-time-data-integration-for-the-community" target="_blank" rel="noopener noreferrer">Apache Flink CDC</a>, and <a href="https://paimon.apache.org/" target="_blank" rel="noopener noreferrer">Apache Paimon</a>.
As part of our commitment, Fluss is now open source under the Apache 2.0 license and is available on <a href="https://github.com/alibaba/fluss" target="_blank" rel="noopener noreferrer">GitHub</a>, inviting users to create the next generation of real-time architectures.</p>
<p><img decoding="async" loading="lazy" alt="FF Announcement" src="https://fluss.apache.org/assets/images/ff_os-2589690ef465b4d2c76c7861438ad18b.png" width="3840" height="1286" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="real-time-streaming-storage-for-the-lakehouse-era">Real-Time Streaming Storage for the Lakehouse Era<a href="https://fluss.apache.org/blog/fluss-open-source/#real-time-streaming-storage-for-the-lakehouse-era" class="hash-link" aria-label="Direct link to Real-Time Streaming Storage for the Lakehouse Era" title="Direct link to Real-Time Streaming Storage for the Lakehouse Era">​</a></h3>
<p>The need for real-time insights has grown exponentially - especially with the recent explosion of AI. Still, the tools and architectures we’ve relied on for years weren’t designed with streaming-first analytical workflows in mind. Traditional architectures often involve complex integrations between message queues like Kafka, processing engines like Flink, and storage systems that are more batch-oriented than real-time. This approach not only increases latency but also adds operational overhead and cost. Fluss offers a <strong>unified streaming storage layer</strong> purpose-built for <strong>real-time analytics</strong>.</p>
<p>At its core, Fluss combines the best of <strong>streaming</strong> and <strong>analytical storage</strong>. Its <strong>columnar stream</strong> design is optimized for real-time analytical queries, enabling lightning-fast data access and updates. With support for <strong>real-time data ingestion</strong> and integrations with <strong>real-time lakehouse solutions</strong> such as Paimon, Fluss ensures that data is always fresh and ready for analysis, making it ideal for applications where latency is critical.</p>
<p>A critical aspect of Fluss is also its deep integration with Apache FlinkⓇ the de facto gold standard for stream processing. This integration combines a <strong>stream processor</strong> and a <strong>real-time storage layer</strong>, eliminating the need for separate message queues like Kafka in analytics-focused architectures. Fluss simplifies pipelines, reduces costs, and improves performance for <strong>high-throughput</strong>, <strong>low-latency analytics</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="building-the-future-of-analytics-with-fluss">Building the Future of Analytics with Fluss<a href="https://fluss.apache.org/blog/fluss-open-source/#building-the-future-of-analytics-with-fluss" class="hash-link" aria-label="Direct link to Building the Future of Analytics with Fluss" title="Direct link to Building the Future of Analytics with Fluss">​</a></h3>
<p>Fluss is designed to support a wide range of use cases, from powering dashboards and monitoring systems to enabling <strong>streaming ETL</strong> and <strong>real-time intelligence pipelines</strong> for the modern AI era. Its ability to provide real-time updates makes it a natural fit for <strong>streaming data warehouses</strong>, where fresh data is essential for decision-making.</p>
<p>By serving as the real-time data layer on the Lakehouse, Fluss supports both <strong>streaming-first</strong> architectures and <strong>unified batch and stream processing</strong>. This flexibility should be appealing for organizations looking to modernize their analytics stack while keeping costs low and performance high.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next-for-fluss">What’s Next for Fluss?<a href="https://fluss.apache.org/blog/fluss-open-source/#whats-next-for-fluss" class="hash-link" aria-label="Direct link to What’s Next for Fluss?" title="Direct link to What’s Next for Fluss?">​</a></h3>
<p>Open-sourcing Fluss is just the beginning and it will be donated to the Apache Software Foundation (ASF). We’re committed to working closely with the community to expand its capabilities and adoption. You can find more information about the project’s roadmap <a href="https://alibaba.github.io/fluss-docs/roadmap/" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p><img decoding="async" loading="lazy" alt="Banner" src="https://fluss.apache.org/assets/images/banner-5523bd3a3f5145b15e36c6bfb46796be.png" width="1998" height="1001" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="join-the-journey">Join the Journey<a href="https://fluss.apache.org/blog/fluss-open-source/#join-the-journey" class="hash-link" aria-label="Direct link to Join the Journey" title="Direct link to Join the Journey">​</a></h3>
<p>We invite you to join us and help grow our community around the project. Explore Fluss, contribute to its development, and build the next generation of data pipelines.</p>
<p>Make sure to keep an eye on the project, give it a try and if you like it, don’t forget to give it some ❤️ via ⭐ on <a href="https://github.com/alibaba/fluss" target="_blank" rel="noopener noreferrer">GitHub</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started">Getting Started<a href="https://fluss.apache.org/blog/fluss-open-source/#getting-started" class="hash-link" aria-label="Direct link to Getting Started" title="Direct link to Getting Started">​</a></h3>
<ul>
<li>Visit the <a href="https://github.com/alibaba/fluss" target="_blank" rel="noopener noreferrer">GitHub repository</a>.</li>
<li>Check out the <a href="https://alibaba.github.io/fluss-docs/docs/quickstart/flink/" target="_blank" rel="noopener noreferrer">quickstart guide</a>.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="additional-resources">Additional Resources<a href="https://fluss.apache.org/blog/fluss-open-source/#additional-resources" class="hash-link" aria-label="Direct link to Additional Resources" title="Direct link to Additional Resources">​</a></h3>
<ul>
<li>Announcement Blog Post: <a href="https://www.ververica.com/blog/introducing-fluss" target="_blank" rel="noopener noreferrer">Introducing Fluss: Unified Streaming Storage For Next-Generation Data Analytics</a></li>
<li>Flink Forward Keynote Announcement: <a href="https://www.ververica.academy/courses/3d163483-5040-4d60-b5b3-755c3277edf7/activities/1af290fd-05bc-4fab-90be-6ed4628399be" target="_blank" rel="noopener noreferrer">The Future - Introducing Fluss</a></li>
<li>Flink Forward Fluss Presentation: <a href="https://www.ververica.academy/courses/3d163483-5040-4d60-b5b3-755c3277edf7/activities/a366d118-6c53-47ef-91bb-289fc2462b07" target="_blank" rel="noopener noreferrer">Is Kafka the Best Storage for Streaming Analytics?</a></li>
</ul>]]></content>
        <author>
            <name>Jark Wu</name>
            <uri>https://github.com/wuchong</uri>
        </author>
        <author>
            <name>Giannis Polyzos</name>
            <uri>https://github.com/polyzos</uri>
        </author>
    </entry>
</feed>